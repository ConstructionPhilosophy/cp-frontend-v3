{"file_contents":{"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\nThis is a frontend-only React application designed as a Q&A community platform, mimicking CMOlist's functionality and design. It allows users to view questions, answers, and engage in discussions related to marketing, branding, and business expertise. The platform features a modern, responsive design optimized for both desktop and mobile, with a focus on a clean user interface. The project's business vision is to provide a specialized community hub for professionals in specific industries, starting with construction and civil engineering.\n\n# User Preferences\nPreferred communication style: Simple, everyday language.\n\n## Design Standards\n**CRITICAL: Compact LinkedIn-Style Design** - ALL pages and components must follow the compact LinkedIn-style design established in user-profile.tsx:\n- **Avatar Sizes**: Use w-8 to w-10 maximum (never w-12, w-16, w-20, w-24 or larger)\n- **Font Hierarchy**: text-sm to text-lg maximum for headings (never text-xl, text-2xl or larger)\n- **Spacing**: Use p-4 for padding instead of p-6, mb-4 for margins\n- **Visual Consistency**: Maintain tight, professional spacing throughout all components\n- **Reference**: user-profile.tsx serves as the design standard - match its styling exactly\n\n# System Architecture\n\n## Frontend Architecture\nThe frontend is built with React 18 and TypeScript, employing a component-based architecture. It uses Tailwind CSS with a custom design system for styling, Radix UI primitives and custom shadcn/ui components for consistent and accessible UI elements, and Wouter for client-side routing. State management relies on native React state with the Fetch API for data interactions. Vite is used for fast development and optimized production builds. The design features a three-column layout (left sidebar for navigation, main content for Q&A, right sidebar for user stats) with mobile responsiveness handled via a bottom navigation bar and responsive grids. Custom UI components such as a date picker and country code selector are implemented to match precise design specifications.\n\n### Deployment Portability & Direct API Integration\n**UPDATED (2025-01-26)**: The application now calls external APIs directly for optimal performance:\n- **User APIs**: Direct calls to `https://cp-backend-service-test-972540571952.asia-south1.run.app` \n- **Geo APIs**: Direct calls to `https://geo-api-230500065838.asia-south1.run.app`\n- **Environment Override**: Still configurable via `VITE_API_BASE_URL` for different environments\nThis eliminates proxy overhead and provides faster API responses.\n\n## Backend Architecture\nThe backend uses Node.js with the Express.js framework, written in TypeScript. It follows a RESTful API pattern for managing users, security assessments, recommendations, and metrics. It includes centralized error handling. Currently, it utilizes an in-memory storage system with sample data, abstracted via an `IStorage` interface. The system is designed for easy migration to a persistent database.\n\n## Data Storage\nCurrently, an in-memory storage system is used with realistic sample data. It employs a repository pattern with the `IStorage` interface and uses strong TypeScript typing for entities like `User`, `SecurityAssessment`, `SecurityRecommendation`, and `SecurityMetric`. Zod schemas are used for runtime validation of API inputs. The architecture is prepared for a PostgreSQL migration using Drizzle ORM.\n\n## API Configuration\nThe application now uses direct external API calls for optimal performance:\n- **User/Backend APIs**: Direct calls to `https://cp-backend-service-test-972540571952.asia-south1.run.app`\n- **Geo APIs**: Direct calls to `https://geo-api-230500065838.asia-south1.run.app`\n- **Environment Override**: Both can be overridden via `VITE_API_BASE_URL` for different environments\n- This approach eliminates proxy overhead and provides faster, more reliable API responses.\n\n# External Dependencies\n\n### Core Framework Dependencies\n- **React Ecosystem**: React 18, React DOM, Wouter\n- **TypeScript**\n- **Build Tools**: Vite, esbuild\n\n### UI and Styling\n- **Radix UI**\n- **Tailwind CSS**\n- **Lucide React**\n- **Class Variance Authority**\n\n### Backend Infrastructure\n- **Express.js**\n- **Drizzle ORM** (prepared for PostgreSQL)\n- **Neon Database** (serverless PostgreSQL provider)\n- **Zod**\n\n### Development and Production Tools\n- **TanStack Query**\n- **Date-fns**\n- **React Hook Form**\n- **Firebase Authentication** (for login/signup, password reset, phone auth)\n\n# Recent Changes\n\n## Deployment Configuration Updates (2025-01-26)\n**Final Fix: Simplified autoscale deployment compatibility**\n- **RESOLVED**: Server now respects PORT environment variable set by autoscale deployment\n- Fixed deployment detection to use `REPLIT_DEPLOYMENT=1` (not 'true') for autoscale\n- Simplified server startup logging to reduce initialization time\n- Streamlined error handling to prevent startup delays\n- Server automatically adapts to autoscale port management\n\n**Technical Details:**\n- **Autoscale Deployment**: Respects `process.env.PORT` set by autoscale platform\n- **Development**: Uses PORT=5000 when no PORT env var is set\n- **Environment detection**: `REPLIT_DEPLOYMENT === '1'` for autoscale compatibility\n- **Fast startup**: Minimal logging during initialization to meet port detection timeouts\n- **Platform compatibility**: Works seamlessly with Replit autoscale port management","size_bytes":5389},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\n    \"./client/index.html\", \n    \"./client/src/**/*.{js,jsx,ts,tsx}\",\n    \"./index.html\", \n    \"./src/**/*.{js,jsx,ts,tsx}\"\n  ],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        // CMOlist specific colors\n        'cmo-primary': '#4285F4',\n        'cmo-bg-main': '#FAFAFA',\n        'cmo-bg-card': '#FFFFFF',\n        'cmo-text-primary': '#1A1A1A',\n        'cmo-text-secondary': '#666666',\n        'cmo-border': '#E0E0E0',\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3084},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    host: true,\n    allowedHosts: true,\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1011},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/deploy.js":{"content":"// Minimal deployment-focused server for troubleshooting\nconst express = require('express');\nconst path = require('path');\n\nconst app = express();\n\n// Basic middleware\napp.use('/api', express.json());\n\n// Health check endpoint\napp.get('/api/health', (req, res) => {\n  res.json({ \n    status: 'OK', \n    timestamp: new Date().toISOString(),\n    port: process.env.PORT,\n    host: '0.0.0.0',\n    deployment: process.env.REPLIT_DEPLOYMENT === '1'\n  });\n});\n\n// Serve static files\nconst staticPath = path.join(process.cwd(), 'dist', 'public');\napp.use(express.static(staticPath));\n\n// Fallback to index.html\napp.get('*', (req, res) => {\n  res.sendFile(path.join(staticPath, 'index.html'));\n});\n\n// Simple port and host configuration\nconst PORT = process.env.PORT || 8080;\nconst HOST = '0.0.0.0';\n\nconsole.log(`Starting minimal server...`);\nconsole.log(`PORT: ${PORT}, HOST: ${HOST}`);\nconsole.log(`REPLIT_DEPLOYMENT: ${process.env.REPLIT_DEPLOYMENT}`);\n\nconst server = app.listen(PORT, HOST, () => {\n  console.log(`Server running on ${HOST}:${PORT}`);\n});\n\nserver.on('error', (err) => {\n  console.error('Server error:', err);\n  process.exit(1);\n});","size_bytes":1143},"server/index.ts":{"content":"import express from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport path from \"path\";\nimport fs from \"fs\";\n\n// Create Express app\nconst app = express();\n\n// API routes middleware\napp.use('/api', express.json());\n\n// Register API routes FIRST - before static files\nregisterRoutes(app);\n\n// Debug endpoint to check server state\napp.get('/api/debug', (req, res) => {\n  const staticPath = path.join(process.cwd(), 'dist', 'public');\n  res.json({ \n    timestamp: new Date().toISOString(),\n    message: 'Server running with emergency inline CSS fix',\n    staticPath,\n    deployment: !!process.env.REPLIT_DEPLOYMENT,\n    nodeEnv: process.env.NODE_ENV,\n    htmlExists: fs.existsSync(path.join(staticPath, 'index.html'))\n  });\n});\n\n// Test route to verify CSS is working\napp.get('/test-css', (req, res) => {\n  res.setHeader('Content-Type', 'text/html; charset=utf-8');\n  res.send(`<!DOCTYPE html>\n<html>\n<head>\n    <title>CSS Test</title>\n    <link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap\" rel=\"stylesheet\">\n    <link rel=\"stylesheet\" href=\"/assets/index-DmExVhvI.css\">\n    <style>\n      body { font-family: 'Inter', sans-serif; margin: 20px; }\n      .test-bg { background-color: var(--cmo-bg-main, #f8f9fa); padding: 20px; }\n      .test-text { color: var(--cmo-primary, #4285f4); font-size: 24px; }\n    </style>\n</head>\n<body>\n    <div class=\"test-bg\">\n        <h1 class=\"test-text\">CSS Test Page</h1>\n        <p>If you see styled text with Inter font and light gray background, CSS is working.</p>\n        <div class=\"bg-blue-500 text-white p-4 rounded-lg mt-4\">\n            This should be blue with white text if Tailwind CSS is working.\n        </div>\n    </div>\n</body>\n</html>`);\n});\n\n// Serve static files from the built client directory with cache-busting headers\nconst staticPath = path.join(process.cwd(), 'dist', 'public');\napp.use(express.static(staticPath, {\n  maxAge: 0,\n  etag: true,\n  lastModified: true,\n  setHeaders: (res, filePath) => {\n    // Force fresh CSS and JS files - no caching during development\n    if (filePath.endsWith('.css')) {\n      res.setHeader('Content-Type', 'text/css; charset=utf-8');\n      res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');\n      res.setHeader('Pragma', 'no-cache');\n      res.setHeader('Expires', '0');\n    } else if (filePath.endsWith('.js')) {\n      res.setHeader('Content-Type', 'application/javascript; charset=utf-8');\n      res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');\n      res.setHeader('Pragma', 'no-cache');\n      res.setHeader('Expires', '0');\n    }\n  }\n}));\n\n\n\n// Fallback for SPA routes - serve the built React app for all routes\napp.use((req, res, next) => {\n  // Skip API routes and assets\n  if (req.path.startsWith('/api/') || req.path.startsWith('/assets/') || req.path === '/test-css') {\n    return next();\n  }\n  \n  // Serve the built React app\n  const indexPath = path.join(staticPath, 'index.html');\n  res.sendFile(indexPath, (err) => {\n    if (err) {\n      console.error('Error serving index.html:', err);\n      res.status(500).send('Error loading application');\n    }\n  });\n});\n\n// Simplified deployment-ready server configuration\n// Let autoscale manage the PORT automatically, only override for development\nconst isProduction = process.env.NODE_ENV === 'production';\nconst isDeployment = process.env.REPLIT_DEPLOYMENT === '1';\nconst PORT = parseInt(process.env.PORT || (isProduction || isDeployment ? '80' : '5000'), 10);\n\nconsole.log(`Server starting on port ${PORT} [${process.env.NODE_ENV || 'development'}]`);\nif (isDeployment) console.log(`Autoscale deployment detected (REPLIT_DEPLOYMENT=${process.env.REPLIT_DEPLOYMENT})`);\nif (isProduction) console.log(`Production environment detected`);\n\nconst server = app.listen(PORT, '0.0.0.0', () => {\n  console.log(`Server running on 0.0.0.0:${PORT}`);\n});\n\nserver.on('error', (error: any) => {\n  console.error(`Server failed to start on port ${PORT}: ${error.code || error.message}`);\n  if (error.code === 'EADDRINUSE') {\n    console.error(`Port ${PORT} already in use`);\n  } else if (error.code === 'EACCES') {\n    console.error(`Permission denied for port ${PORT}`);\n  }\n  process.exit(1);\n});\n\n// Graceful shutdown\nprocess.on('SIGTERM', () => {\n  console.log('Received SIGTERM, shutting down gracefully');\n  server.close(() => {\n    console.log('Server closed');\n    process.exit(0);\n  });\n});","size_bytes":4425},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { API_ENDPOINTS } from \"../shared/config\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Health check endpoint\n  app.get(\"/api/health\", (req, res) => {\n    res.json({ status: \"OK\", message: \"Server is running\" });\n  });\n\n  // Custom Geo API endpoints\n  app.get(\"/api/countries\", async (req, res) => {\n    try {\n      const response = await fetch(API_ENDPOINTS.GEO_COUNTRIES);\n      if (response.ok) {\n        const data = await response.json();\n        res.json(data);\n      } else {\n        throw new Error('Failed to fetch countries');\n      }\n    } catch (error) {\n      console.error('Error fetching countries:', error);\n      res.status(500).json({ error: \"Failed to fetch countries\" });\n    }\n  });\n\n  app.get(\"/api/states\", async (req, res) => {\n    try {\n      const { country_code } = req.query;\n      if (!country_code) {\n        return res.status(400).json({ error: \"country_code parameter is required\" });\n      }\n\n      const response = await fetch(`${API_ENDPOINTS.GEO_STATES}?country_code=${country_code}`);\n      if (response.ok) {\n        const data = await response.json();\n        res.json(data);\n      } else {\n        throw new Error('Failed to fetch states');\n      }\n    } catch (error) {\n      console.error('Error fetching states:', error);\n      res.status(500).json({ error: \"Failed to fetch states\" });\n    }\n  });\n\n  app.get(\"/api/cities\", async (req, res) => {\n    try {\n      const { country_code, state_code } = req.query;\n      if (!country_code || !state_code) {\n        return res.status(400).json({ error: \"country_code and state_code parameters are required\" });\n      }\n\n      const response = await fetch(`${API_ENDPOINTS.GEO_CITIES}?country_code=${country_code}&state_code=${state_code}`);\n      if (response.ok) {\n        const data = await response.json();\n        res.json(data);\n      } else {\n        throw new Error('Failed to fetch cities');\n      }\n    } catch (error) {\n      console.error('Error fetching cities:', error);\n      res.status(500).json({ error: \"Failed to fetch cities\" });\n    }\n  });\n\n\n  // SMS/OTP endpoints for phone verification\n  app.post(\"/api/send-otp\", async (req, res) => {\n    try {\n      const { phoneNumber } = req.body;\n      \n      if (!phoneNumber) {\n        return res.status(400).json({ error: \"Phone number is required\" });\n      }\n\n      // In a real implementation, you would integrate with an SMS service like:\n      // - Twilio\n      // - AWS SNS\n      // - Firebase Phone Auth\n      // - Any other SMS gateway\n      \n      // For demo purposes, we'll simulate sending an OTP\n      console.log(`Sending OTP to ${phoneNumber}`);\n      \n      // Generate a random 6-digit OTP (in real app, store this securely)\n      const otp = Math.floor(100000 + Math.random() * 900000).toString();\n      console.log(`Generated OTP: ${otp} for ${phoneNumber}`);\n      \n      // TODO: Integrate with your SMS service provider\n      // Example with Twilio:\n      // await twilioClient.messages.create({\n      //   body: `Your verification code is: ${otp}`,\n      //   from: process.env.TWILIO_PHONE_NUMBER,\n      //   to: phoneNumber\n      // });\n\n      res.json({ \n        success: true, \n        message: \"OTP sent successfully\",\n        // In production, don't send OTP in response\n        debug: process.env.NODE_ENV === 'development' ? { otp } : undefined\n      });\n    } catch (error) {\n      console.error('Error sending OTP:', error);\n      res.status(500).json({ error: \"Failed to send OTP\" });\n    }\n  });\n\n  app.post(\"/api/verify-otp\", async (req, res) => {\n    try {\n      const { phoneNumber, code } = req.body;\n      \n      if (!phoneNumber || !code) {\n        return res.status(400).json({ error: \"Phone number and code are required\" });\n      }\n\n      // In a real implementation, you would:\n      // 1. Retrieve the stored OTP for this phone number\n      // 2. Check if it matches the provided code\n      // 3. Check if it hasn't expired (usually 5-10 minutes)\n      // 4. Mark the phone number as verified\n      \n      // For demo purposes, accept any 6-digit code\n      if (code.length === 6 && /^\\d{6}$/.test(code)) {\n        res.json({ \n          success: true, \n          message: \"Phone number verified successfully\" \n        });\n      } else {\n        res.status(400).json({ \n          error: \"Invalid verification code\" \n        });\n      }\n    } catch (error) {\n      console.error('Error verifying OTP:', error);\n      res.status(500).json({ error: \"Failed to verify OTP\" });\n    }\n  });\n\n  // User endpoints for chat fallback\n  app.get(\"/api/users/:uid\", async (req, res) => {\n    try {\n      const { uid } = req.params;\n      \n      // Create a mock user for any Firebase UID  \n      const mockUser = {\n        id: uid,\n        uid: uid,\n        email: `user${uid.slice(0, 8)}@example.com`,\n        firstName: `User`,\n        lastName: uid.slice(0, 8),\n        username: `user_${uid.slice(0, 8)}`,\n        photoUrl: `https://ui-avatars.com/api/?name=${encodeURIComponent(`User ${uid.slice(0, 8)}`)}&background=0D8ABC&color=fff`,\n        profilePic: `https://ui-avatars.com/api/?name=${encodeURIComponent(`User ${uid.slice(0, 8)}`)}&background=0D8ABC&color=fff`,\n        isActive: Math.random() > 0.5, // Random online status\n        hasBasicInfo: true,\n        verified: false,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n      res.json(mockUser);\n    } catch (error) {\n      console.error('Error fetching user:', error);\n      res.status(500).json({ error: \"Failed to fetch user\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}","size_bytes":5711},"server/simple-server.ts":{"content":"import express from \"express\";\nimport { registerRoutes } from \"./routes\";\n\nasync function startSimpleServer() {\n  const app = express();\n  \n  // Enable JSON parsing\n  app.use(express.json());\n  \n  // Test endpoint\n  app.get(\"/\", (req, res) => {\n    res.json({ message: \"Server is running!\", timestamp: new Date().toISOString() });\n  });\n  \n  // Register API routes\n  registerRoutes(app);\n  \n  const PORT = parseInt(process.env.PORT || '5000', 10);\n  const HOST = process.env.HOST || '0.0.0.0';\n  \n  app.listen(PORT, HOST, () => {\n    console.log(`Simple server running on ${HOST}:${PORT}`);\n  });\n}\n\nstartSimpleServer().catch(console.error);","size_bytes":641},"server/storage.ts":{"content":"import type { \n  User, \n  InsertUser, \n  SecurityAssessment, \n  InsertSecurityAssessment,\n  SecurityRecommendation,\n  InsertSecurityRecommendation,\n  SecurityMetric,\n  InsertSecurityMetric\n} from \"../shared/schema\";\n\n// Storage interface\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, user: Partial<InsertUser>): Promise<User | undefined>;\n\n  // Security assessment operations\n  createSecurityAssessment(assessment: InsertSecurityAssessment): Promise<SecurityAssessment>;\n  getSecurityAssessment(id: string): Promise<SecurityAssessment | undefined>;\n  getUserAssessments(userId: string): Promise<SecurityAssessment[]>;\n  updateSecurityAssessment(id: string, assessment: Partial<InsertSecurityAssessment>): Promise<SecurityAssessment | undefined>;\n\n  // Security recommendation operations\n  createSecurityRecommendation(recommendation: InsertSecurityRecommendation): Promise<SecurityRecommendation>;\n  getAssessmentRecommendations(assessmentId: string): Promise<SecurityRecommendation[]>;\n  updateRecommendation(id: string, recommendation: Partial<InsertSecurityRecommendation>): Promise<SecurityRecommendation | undefined>;\n\n  // Security metrics operations\n  createSecurityMetric(metric: InsertSecurityMetric): Promise<SecurityMetric>;\n  getUserMetrics(userId: string, metricType?: string): Promise<SecurityMetric[]>;\n}\n\n// In-memory storage implementation\nexport class MemStorage implements IStorage {\n  private users: Map<string, User> = new Map();\n  private assessments: Map<string, SecurityAssessment> = new Map();\n  private recommendations: Map<string, SecurityRecommendation> = new Map();\n  private metrics: Map<string, SecurityMetric> = new Map();\n\n  constructor() {\n    // Initialize with sample data\n    this.initializeSampleData();\n  }\n\n  private initializeSampleData() {\n    // Sample user\n    const sampleUser: User = {\n      id: \"user-1\",\n      email: \"john.doe@techcorp.com\",\n      firstName: \"John\",\n      lastName: \"Doe\",\n      company: \"TechCorp Inc\",\n      title: \"Chief Marketing Officer\",\n      profileImageUrl: \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=100&h=100&fit=crop&crop=face\",\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.users.set(sampleUser.id, sampleUser);\n\n    // Sample security assessment\n    const sampleAssessment: SecurityAssessment = {\n      id: \"assessment-1\",\n      userId: \"user-1\",\n      companyName: \"TechCorp Inc\",\n      industry: \"Technology\",\n      companySize: \"medium\",\n      currentSecurityTools: [\"Microsoft Defender\", \"LastPass\", \"Slack\"],\n      complianceRequirements: [\"GDPR\", \"SOX\"],\n      assessmentData: {\n        networkSecurity: { score: 75, vulnerabilities: 3 },\n        dataProtection: { score: 60, issues: 5 },\n        accessControl: { score: 85, compliant: true },\n        employeeTraining: { score: 45, lastTraining: \"2023-01-15\" }\n      },\n      overallScore: 66,\n      riskLevel: \"medium\",\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.assessments.set(sampleAssessment.id, sampleAssessment);\n\n    // Sample recommendations\n    const recommendations = [\n      {\n        id: \"rec-1\",\n        assessmentId: \"assessment-1\",\n        category: \"data_protection\",\n        title: \"Implement End-to-End Encryption\",\n        description: \"Your current data protection score indicates vulnerabilities in data transmission. Implementing end-to-end encryption will significantly reduce the risk of data breaches during transit.\",\n        priority: \"critical\",\n        difficulty: \"medium\",\n        estimatedCost: \"medium\",\n        estimatedTimeToImplement: \"2-4 weeks\",\n        benefits: [\n          \"Protects sensitive customer data during transmission\",\n          \"Ensures compliance with GDPR requirements\",\n          \"Reduces risk of man-in-the-middle attacks\",\n          \"Builds customer trust and confidence\"\n        ],\n        steps: [\n          { step: 1, title: \"Audit Current Data Flows\", description: \"Map all data transmission points in your system\", estimatedTime: \"3 days\" },\n          { step: 2, title: \"Choose Encryption Standard\", description: \"Select AES-256 or similar enterprise-grade encryption\", estimatedTime: \"1 day\" },\n          { step: 3, title: \"Implement Encryption\", description: \"Deploy encryption across all data transmission channels\", estimatedTime: \"1-2 weeks\" },\n          { step: 4, title: \"Test and Validate\", description: \"Comprehensive testing of encrypted data flows\", estimatedTime: \"3 days\" }\n        ],\n        resources: {\n          documentation: [\"https://owasp.org/www-community/controls/Data_Encryption\"],\n          tools: [\"OpenSSL\", \"AWS KMS\", \"Azure Key Vault\"],\n          guides: [\"NIST Encryption Guidelines\", \"GDPR Encryption Requirements\"]\n        },\n        isImplemented: false,\n        implementationNotes: null,\n        implementedAt: null,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n      {\n        id: \"rec-2\",\n        assessmentId: \"assessment-1\",\n        category: \"employee_training\",\n        title: \"Mandatory Security Awareness Training\",\n        description: \"Your employee training score is below industry standards. Regular security awareness training is critical for preventing social engineering attacks and maintaining security compliance.\",\n        priority: \"high\",\n        difficulty: \"easy\",\n        estimatedCost: \"low\",\n        estimatedTimeToImplement: \"1-2 weeks\",\n        benefits: [\n          \"Reduces human error security incidents by 70%\",\n          \"Improves phishing detection rates\",\n          \"Ensures compliance with security frameworks\",\n          \"Creates security-conscious culture\"\n        ],\n        steps: [\n          { step: 1, title: \"Select Training Platform\", description: \"Choose comprehensive security training solution\", estimatedTime: \"2 days\" },\n          { step: 2, title: \"Customize Training Content\", description: \"Tailor content to your industry and threats\", estimatedTime: \"3 days\" },\n          { step: 3, title: \"Roll Out Training\", description: \"Deploy training to all employees\", estimatedTime: \"1 week\" },\n          { step: 4, title: \"Monitor and Track\", description: \"Implement completion tracking and assessments\", estimatedTime: \"2 days\" }\n        ],\n        resources: {\n          platforms: [\"KnowBe4\", \"Proofpoint Security Awareness\", \"Wombat Security\"],\n          content: [\"SANS Security Awareness\", \"NIST Cybersecurity Framework\"],\n          metrics: [\"Phishing simulation results\", \"Training completion rates\"]\n        },\n        isImplemented: false,\n        implementationNotes: null,\n        implementedAt: null,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n      {\n        id: \"rec-3\",\n        assessmentId: \"assessment-1\",\n        category: \"network_security\",\n        title: \"Deploy Multi-Factor Authentication\",\n        description: \"Enhance your access control by implementing MFA across all critical systems. This will significantly reduce the risk of unauthorized access even if passwords are compromised.\",\n        priority: \"critical\",\n        difficulty: \"easy\",\n        estimatedCost: \"low\",\n        estimatedTimeToImplement: \"1 week\",\n        benefits: [\n          \"Prevents 99.9% of automated attacks\",\n          \"Protects against password-based attacks\",\n          \"Ensures compliance with security standards\",\n          \"Easy to implement and maintain\"\n        ],\n        steps: [\n          { step: 1, title: \"Choose MFA Solution\", description: \"Select appropriate MFA provider for your needs\", estimatedTime: \"1 day\" },\n          { step: 2, title: \"Configure MFA Policies\", description: \"Set up policies for different user groups\", estimatedTime: \"2 days\" },\n          { step: 3, title: \"User Enrollment\", description: \"Enroll all users and provide setup guidance\", estimatedTime: \"3 days\" },\n          { step: 4, title: \"Monitor and Support\", description: \"Ongoing monitoring and user support\", estimatedTime: \"ongoing\" }\n        ],\n        resources: {\n          providers: [\"Microsoft Authenticator\", \"Google Authenticator\", \"Duo Security\"],\n          guides: [\"NIST MFA Guidelines\", \"CISA MFA Fact Sheet\"],\n          support: [\"User setup guides\", \"Troubleshooting documentation\"]\n        },\n        isImplemented: true,\n        implementationNotes: \"Implemented across all critical systems on 2024-01-15\",\n        implementedAt: new Date(\"2024-01-15\"),\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      }\n    ];\n\n    recommendations.forEach(rec => {\n      this.recommendations.set(rec.id, rec as SecurityRecommendation);\n    });\n\n    // Sample metrics\n    const sampleMetrics = [\n      {\n        id: \"metric-1\",\n        userId: \"user-1\",\n        assessmentId: \"assessment-1\",\n        metricType: \"overall_score\",\n        value: 66,\n        previousValue: 52,\n        changePercentage: 27,\n        recordedAt: new Date(),\n      },\n      {\n        id: \"metric-2\",\n        userId: \"user-1\",\n        assessmentId: \"assessment-1\",\n        metricType: \"critical_recommendations\",\n        value: 2,\n        previousValue: 5,\n        changePercentage: -60,\n        recordedAt: new Date(),\n      },\n      {\n        id: \"metric-3\",\n        userId: \"user-1\",\n        assessmentId: \"assessment-1\",\n        metricType: \"implemented_recommendations\",\n        value: 1,\n        previousValue: 0,\n        changePercentage: 100,\n        recordedAt: new Date(),\n      }\n    ];\n\n    sampleMetrics.forEach(metric => {\n      this.metrics.set(metric.id, metric as SecurityMetric);\n    });\n  }\n\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    for (const user of this.users.values()) {\n      if (user.email === email) {\n        return user;\n      }\n    }\n    return undefined;\n  }\n\n  async createUser(user: InsertUser): Promise<User> {\n    const newUser: User = {\n      ...user,\n      id: `user-${Date.now()}`,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    } as User;\n    this.users.set(newUser.id, newUser);\n    return newUser;\n  }\n\n  async updateUser(id: string, user: Partial<InsertUser>): Promise<User | undefined> {\n    const existing = this.users.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, ...user, updatedAt: new Date() };\n    this.users.set(id, updated);\n    return updated;\n  }\n\n  // Security assessment operations\n  async createSecurityAssessment(assessment: InsertSecurityAssessment): Promise<SecurityAssessment> {\n    const newAssessment: SecurityAssessment = {\n      ...assessment,\n      id: `assessment-${Date.now()}`,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    } as SecurityAssessment;\n    this.assessments.set(newAssessment.id, newAssessment);\n    return newAssessment;\n  }\n\n  async getSecurityAssessment(id: string): Promise<SecurityAssessment | undefined> {\n    return this.assessments.get(id);\n  }\n\n  async getUserAssessments(userId: string): Promise<SecurityAssessment[]> {\n    return Array.from(this.assessments.values()).filter(a => a.userId === userId);\n  }\n\n  async updateSecurityAssessment(id: string, assessment: Partial<InsertSecurityAssessment>): Promise<SecurityAssessment | undefined> {\n    const existing = this.assessments.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, ...assessment, updatedAt: new Date() };\n    this.assessments.set(id, updated);\n    return updated;\n  }\n\n  // Security recommendation operations\n  async createSecurityRecommendation(recommendation: InsertSecurityRecommendation): Promise<SecurityRecommendation> {\n    const newRecommendation: SecurityRecommendation = {\n      ...recommendation,\n      id: `rec-${Date.now()}`,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    } as SecurityRecommendation;\n    this.recommendations.set(newRecommendation.id, newRecommendation);\n    return newRecommendation;\n  }\n\n  async getAssessmentRecommendations(assessmentId: string): Promise<SecurityRecommendation[]> {\n    return Array.from(this.recommendations.values()).filter(r => r.assessmentId === assessmentId);\n  }\n\n  async updateRecommendation(id: string, recommendation: Partial<InsertSecurityRecommendation>): Promise<SecurityRecommendation | undefined> {\n    const existing = this.recommendations.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, ...recommendation, updatedAt: new Date() };\n    this.recommendations.set(id, updated);\n    return updated;\n  }\n\n  // Security metrics operations\n  async createSecurityMetric(metric: InsertSecurityMetric): Promise<SecurityMetric> {\n    const newMetric: SecurityMetric = {\n      ...metric,\n      id: `metric-${Date.now()}`,\n      recordedAt: new Date(),\n    } as SecurityMetric;\n    this.metrics.set(newMetric.id, newMetric);\n    return newMetric;\n  }\n\n  async getUserMetrics(userId: string, metricType?: string): Promise<SecurityMetric[]> {\n    const userMetrics = Array.from(this.metrics.values()).filter(m => m.userId === userId);\n    if (metricType) {\n      return userMetrics.filter(m => m.metricType === metricType);\n    }\n    return userMetrics;\n  }\n}\n\nexport const storage = new MemStorage();","size_bytes":13408},"shared/config.ts":{"content":"// External API Configuration\n// All external API endpoints and constants are centralized here for easy maintenance\n\nexport const API_ENDPOINTS = {\n  // Geo Location APIs (Custom API)\n  GEO_COUNTRIES: 'https://geo-api-230500065838.asia-south1.run.app/countries',\n  GEO_STATES: 'https://geo-api-230500065838.asia-south1.run.app/states',\n  GEO_CITIES: 'https://geo-api-230500065838.asia-south1.run.app/cities',\n  \n  // Add other external APIs here as needed\n  // EXAMPLE_API: 'https://api.example.com/v1',\n} as const;\n\nexport const API_HEADERS = {\n  COUNTRY_STATE_CITY: {\n    'X-CSCAPI-KEY': 'YOUR_API_KEY_HERE', // Replace with actual API key if needed\n    'Content-Type': 'application/json',\n  },\n} as const;\n\nexport const CONSTANTS = {\n  // File upload limits\n  MAX_FILE_SIZE: 5 * 1024 * 1024, // 5MB\n  SUPPORTED_IMAGE_TYPES: ['image/jpeg', 'image/jpg', 'image/png'],\n  \n  // Form validation\n  MIN_AGE: 13,\n  MIN_YEAR: 1950,\n  \n  // Phone number\n  MAX_PHONE_DIGITS: 15,\n  \n  // API timeouts\n  REQUEST_TIMEOUT: 10000, // 10 seconds\n  \n} as const;\n\n// Helper function to build API URLs\nexport const buildApiUrl = {\n  countries: () => API_ENDPOINTS.GEO_COUNTRIES,\n  states: (countryCode: string) => `${API_ENDPOINTS.GEO_STATES}?country_code=${countryCode}`,\n  cities: (countryCode: string, stateCode: string) => \n    `${API_ENDPOINTS.GEO_CITIES}?country_code=${countryCode}&state_code=${stateCode}`,\n} as const;","size_bytes":1409},"shared/schema.ts":{"content":"import { z } from \"zod\";\nimport { pgTable, varchar, text, timestamp, integer, boolean, jsonb } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey(),\n  email: varchar(\"email\").unique().notNull(),\n  firstName: varchar(\"first_name\").notNull(),\n  lastName: varchar(\"last_name\").notNull(),\n  company: varchar(\"company\"),\n  title: varchar(\"title\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Security assessments table\nexport const securityAssessments = pgTable(\"security_assessments\", {\n  id: varchar(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  companyName: varchar(\"company_name\").notNull(),\n  industry: varchar(\"industry\").notNull(),\n  companySize: varchar(\"company_size\").notNull(), // small, medium, large, enterprise\n  currentSecurityTools: text(\"current_security_tools\").array(), // array of strings\n  complianceRequirements: text(\"compliance_requirements\").array(), // GDPR, HIPAA, SOX, etc.\n  assessmentData: jsonb(\"assessment_data\").notNull(), // detailed assessment responses\n  overallScore: integer(\"overall_score\").notNull(), // 0-100\n  riskLevel: varchar(\"risk_level\").notNull(), // low, medium, high, critical\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Security recommendations table\nexport const securityRecommendations = pgTable(\"security_recommendations\", {\n  id: varchar(\"id\").primaryKey(),\n  assessmentId: varchar(\"assessment_id\").references(() => securityAssessments.id).notNull(),\n  category: varchar(\"category\").notNull(), // access_control, data_protection, network_security, etc.\n  title: varchar(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  priority: varchar(\"priority\").notNull(), // critical, high, medium, low\n  difficulty: varchar(\"difficulty\").notNull(), // easy, medium, hard\n  estimatedCost: varchar(\"estimated_cost\"), // free, low, medium, high\n  estimatedTimeToImplement: varchar(\"estimated_time\"), // hours, days, weeks, months\n  benefits: text(\"benefits\").array(), // array of benefit descriptions\n  steps: jsonb(\"steps\").notNull(), // detailed implementation steps\n  resources: jsonb(\"resources\"), // links, tools, guides\n  isImplemented: boolean(\"is_implemented\").default(false),\n  implementationNotes: text(\"implementation_notes\"),\n  implementedAt: timestamp(\"implemented_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Security metrics tracking\nexport const securityMetrics = pgTable(\"security_metrics\", {\n  id: varchar(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  assessmentId: varchar(\"assessment_id\").references(() => securityAssessments.id).notNull(),\n  metricType: varchar(\"metric_type\").notNull(), // vulnerability_count, compliance_score, etc.\n  value: integer(\"value\").notNull(),\n  previousValue: integer(\"previous_value\"),\n  changePercentage: integer(\"change_percentage\"),\n  recordedAt: timestamp(\"recorded_at\").defaultNow().notNull(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  assessments: many(securityAssessments),\n  metrics: many(securityMetrics),\n}));\n\nexport const securityAssessmentsRelations = relations(securityAssessments, ({ one, many }) => ({\n  user: one(users, {\n    fields: [securityAssessments.userId],\n    references: [users.id],\n  }),\n  recommendations: many(securityRecommendations),\n  metrics: many(securityMetrics),\n}));\n\nexport const securityRecommendationsRelations = relations(securityRecommendations, ({ one }) => ({\n  assessment: one(securityAssessments, {\n    fields: [securityRecommendations.assessmentId],\n    references: [securityAssessments.id],\n  }),\n}));\n\nexport const securityMetricsRelations = relations(securityMetrics, ({ one }) => ({\n  user: one(users, {\n    fields: [securityMetrics.userId],\n    references: [users.id],\n  }),\n  assessment: one(securityAssessments, {\n    fields: [securityMetrics.assessmentId],\n    references: [securityAssessments.id],\n  }),\n}));\n\n// Zod schemas for validation\nexport const insertUserSchema = createInsertSchema(users);\nexport const insertSecurityAssessmentSchema = createInsertSchema(securityAssessments);\nexport const insertSecurityRecommendationSchema = createInsertSchema(securityRecommendations);\nexport const insertSecurityMetricSchema = createInsertSchema(securityMetrics);\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = typeof users.$inferInsert;\n\nexport type SecurityAssessment = typeof securityAssessments.$inferSelect;\nexport type InsertSecurityAssessment = typeof securityAssessments.$inferInsert;\n\nexport type SecurityRecommendation = typeof securityRecommendations.$inferSelect;\nexport type InsertSecurityRecommendation = typeof securityRecommendations.$inferInsert;\n\nexport type SecurityMetric = typeof securityMetrics.$inferSelect;\nexport type InsertSecurityMetric = typeof securityMetrics.$inferInsert;","size_bytes":5289},"client/src/App.tsx":{"content":"import React from \"react\";\nimport { Route, Router, Switch } from \"wouter\";\nimport HomePage from \"./pages/home\";\nimport ProfilePage from \"./pages/profile\";\nimport NotFoundPage from \"./pages/not-found\";\nimport { LoginPage } from \"./pages/login\";\nimport { SignupPage } from \"./pages/signup\";\nimport { CheckEmailPage } from \"./pages/check-email\";\nimport { VerificationSuccessPage } from \"./pages/verification-success\";\nimport { ForgotPasswordPage } from \"./pages/forgot-password\";\nimport { CheckEmailResetPage } from \"./pages/check-email-reset\";\nimport { ResetPasswordPage } from \"./pages/reset-password\";\nimport { PasswordResetSuccessPage } from \"./pages/password-reset-success\";\nimport { BasicInfoPage } from \"./pages/basic-info\";\nimport { SecurityDashboard } from \"./pages/security-dashboard-simple\";\nimport { MessagesPage } from \"./pages/messages\";\nimport { ChatPage } from \"./pages/chat\";\nimport UserProfilePage from \"./pages/user-profile\";\nimport JobsPage from \"./pages/jobs\";\nimport { AuthProvider } from \"./contexts/AuthContext\";\nimport { ProtectedRoute } from \"./components/ProtectedRoute\";\nimport { PublicRoute } from \"./components/PublicRoute\";\nimport { Toaster } from \"./components/ui/toaster\";\n\nfunction App() {\n  return (\n    <AuthProvider>\n      <Router>\n        <Switch>\n          {/* Public auth routes - redirect to home if logged in */}\n          <Route path=\"/login\" component={() => (\n            <PublicRoute>\n              <LoginPage />\n            </PublicRoute>\n          )} />\n          <Route path=\"/signup\" component={() => (\n            <PublicRoute>\n              <SignupPage />\n            </PublicRoute>\n          )} />\n          <Route path=\"/check-email\" component={() => <CheckEmailPage />} />\n          <Route\n            path=\"/verification-success\"\n            component={() => <VerificationSuccessPage />}\n          />\n          <Route\n            path=\"/forgot-password\"\n            component={() => (\n              <PublicRoute>\n                <ForgotPasswordPage />\n              </PublicRoute>\n            )}\n          />\n          <Route\n            path=\"/check-email-reset\"\n            component={() => <CheckEmailResetPage />}\n          />\n          <Route\n            path=\"/reset-password\"\n            component={() => <ResetPasswordPage />}\n          />\n          <Route\n            path=\"/password-reset-success\"\n            component={() => <PasswordResetSuccessPage />}\n          />\n          \n          {/* Basic info route - only for users without complete profile */}\n          <Route\n            path=\"/basic-info\"\n            component={() => (\n              <ProtectedRoute requiresIncompleteProfile={true}>\n                <BasicInfoPage />\n              </ProtectedRoute>\n            )}\n          />\n\n          {/* Protected routes */}\n          <Route\n            path=\"/\"\n            component={() => (\n              <ProtectedRoute>\n                <HomePage />\n              </ProtectedRoute>\n            )}\n          />\n          <Route\n            path=\"/profile\"\n            component={() => (\n              <ProtectedRoute>\n                <ProfilePage />\n              </ProtectedRoute>\n            )}\n          />\n          <Route\n            path=\"/security\"\n            component={() => (\n              <ProtectedRoute>\n                <SecurityDashboard />\n              </ProtectedRoute>\n            )}\n          />\n          <Route\n            path=\"/messages\"\n            component={() => (\n              <ProtectedRoute>\n                <MessagesPage />\n              </ProtectedRoute>\n            )}\n          />\n          <Route\n            path=\"/chat/:conversationId\"\n            component={() => (\n              <ProtectedRoute>\n                <ChatPage />\n              </ProtectedRoute>\n            )}\n          />\n          <Route\n            path=\"/u/:username\"\n            component={() => (\n              <ProtectedRoute>\n                <UserProfilePage />\n              </ProtectedRoute>\n            )}\n          />\n          <Route\n            path=\"/jobs\"\n            component={() => (\n              <ProtectedRoute>\n                <JobsPage />\n              </ProtectedRoute>\n            )}\n          />\n\n          {/* 404 fallback - must be last */}\n          <Route path=\"*\" component={NotFoundPage} />\n        </Switch>\n      </Router>\n      <Toaster />\n    </AuthProvider>\n  );\n}\n\nexport default App;\n","size_bytes":4399},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(0 0% 10.2%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(0 0% 10.2%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(0 0% 10.2%);\n  --primary: hsl(217 89% 61%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(0 0% 96.1%);\n  --secondary-foreground: hsl(0 0% 10.2%);\n  --muted: hsl(0 0% 96.1%);\n  --muted-foreground: hsl(0 0% 40%);\n  --accent: hsl(0 0% 96.1%);\n  --accent-foreground: hsl(0 0% 10.2%);\n  --destructive: hsl(0 84.2% 60.2%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(0 0% 87.8%);\n  --input: hsl(0 0% 96.1%);\n  --ring: hsl(217 89% 61%);\n  --chart-1: hsl(217 89% 61%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(0 0% 98%);\n  --sidebar-foreground: hsl(0 0% 10.2%);\n  --sidebar-primary: hsl(217 89% 61%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(0 0% 96.1%);\n  --sidebar-accent-foreground: hsl(0 0% 10.2%);\n  --sidebar-border: hsl(0 0% 87.8%);\n  --sidebar-ring: hsl(217 89% 61%);\n  --font-sans: 'Inter', system-ui, -apple-system, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(217 89% 61% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(217 89% 61% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(217 89% 61% / 0.00), 0px 1px 2px -1px hsl(217 89% 61% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(217 89% 61% / 0.00), 0px 1px 2px -1px hsl(217 89% 61% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(217 89% 61% / 0.00), 0px 2px 4px -1px hsl(217 89% 61% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(217 89% 61% / 0.00), 0px 4px 6px -1px hsl(217 89% 61% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(217 89% 61% / 0.00), 0px 8px 10px -1px hsl(217 89% 61% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(217 89% 61% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n  \n  /* CMOlist specific colors */\n  --cmo-primary: hsl(217 89% 61%);\n  --cmo-bg-main: hsl(0 0% 98%);\n  --cmo-bg-card: hsl(0 0% 100%);\n  --cmo-text-primary: hsl(0 0% 10.2%);\n  --cmo-text-secondary: hsl(0 0% 40%);\n  --cmo-border: hsl(0 0% 87.8%);\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(0 0% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(0 0% 91.1765%);\n  --primary: hsl(217 89% 61%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(217 89% 61%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(217 89% 61%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-[var(--cmo-bg-main)] text-[var(--cmo-text-primary)];\n  }\n}\n\n@layer utilities {\n  .cmo-primary {\n    color: var(--cmo-primary);\n  }\n  \n  .bg-cmo-primary {\n    background-color: var(--cmo-primary);\n  }\n  \n  .text-cmo-primary {\n    color: var(--cmo-text-primary);\n  }\n  \n  .text-cmo-secondary {\n    color: var(--cmo-text-secondary);\n  }\n  \n  .bg-cmo-card {\n    background-color: var(--cmo-bg-card);\n  }\n  \n  .border-cmo {\n    border-color: var(--cmo-border);\n  }\n}\n\n/* Remove default focus outline on form elements */\ninput:focus,\ntextarea:focus,\nselect:focus,\nbutton:focus {\n  outline: none !important;\n}\n\n/* Input styling - Gray borders for all input fields */\ninput, \n.input,\ninput[type=\"text\"],\ninput[type=\"email\"], \ninput[type=\"password\"],\ninput[type=\"tel\"],\ntextarea,\nselect {\n  border: 1px solid #d1d5db !important; /* Gray-300 */\n}\n\ninput:focus,\n.input:focus,\ninput[type=\"text\"]:focus,\ninput[type=\"email\"]:focus,\ninput[type=\"password\"]:focus,\ninput[type=\"tel\"]:focus,\ntextarea:focus,\nselect:focus {\n  border-color: #9ca3af !important; /* Gray-400 on focus */\n  box-shadow: 0 0 0 1px #9ca3af !important;\n}\n\n/* Calendar dropdown alignment fixes */\n.rdp-dropdown_month,\n.rdp-dropdown_year {\n  display: flex !important;\n  align-items: center !important;\n}\n\n.rdp-dropdown_month select,\n.rdp-dropdown_year select {\n  height: 2rem !important;\n  line-height: 1.5 !important;\n  display: flex !important;\n  align-items: center !important;\n  padding: 0.25rem 1.5rem 0.25rem 0.5rem !important;\n  background-color: white !important;\n  border: 1px solid #d1d5db !important;\n  border-radius: 0.375rem !important;\n  font-size: 0.875rem !important;\n  appearance: none !important;\n  background-image: url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='M6 8l4 4 4-4'/%3e%3c/svg%3e\") !important;\n  background-position: right 0.5rem center !important;\n  background-repeat: no-repeat !important;\n  background-size: 1rem !important;\n}\n\n.rdp-dropdown_month select:focus,\n.rdp-dropdown_year select:focus {\n  outline: 2px solid #3b82f6 !important;\n  outline-offset: 2px !important;\n  border-color: #3b82f6 !important;\n}\n\n.rdp-caption_dropdowns {\n  display: flex !important;\n  justify-content: center !important;\n  align-items: center !important;\n  gap: 0.5rem !important;\n  margin-bottom: 1rem !important;\n}\n\n/* Fix calendar text overlap issue */\n.rdp-caption {\n  position: relative !important;\n  height: 40px !important;\n  display: flex !important;\n  align-items: center !important;\n  justify-content: center !important;\n}\n\n.rdp-caption_label {\n  display: none !important;\n}\n\n.rdp-dropdown {\n  height: 32px !important;\n  padding: 4px 8px !important;\n  border: 1px solid #d1d5db !important;\n  border-radius: 4px !important;\n  background: white !important;\n  min-width: 90px !important;\n  text-align: center !important;\n  font-size: 14px !important;\n  line-height: 1.2 !important;\n  position: relative !important;\n}\n","size_bytes":6323},"client/src/main.tsx":{"content":"import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":184},"client/src/components/ProtectedRoute.tsx":{"content":"import React, { useEffect } from 'react';\nimport { useAuth } from '../contexts/AuthContext';\nimport { useLocation } from 'wouter';\nimport { LoginPage } from '../pages/login';\nimport { Loader2 } from 'lucide-react';\n\ninterface ProtectedRouteProps {\n  children: React.ReactNode;\n  requiresIncompleteProfile?: boolean;\n}\n\nexport function ProtectedRoute({ children, requiresIncompleteProfile = false }: ProtectedRouteProps) {\n  const { user, userProfile, loading } = useAuth();\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    if (!loading && user && userProfile) {\n      // Check if user email is verified\n      if (!user.emailVerified && !userProfile.verified) {\n        setLocation('/check-email');\n        return;\n      }\n\n      // Check if user has completed basic info\n      if (!requiresIncompleteProfile && !userProfile.hasBasicInfo) {\n        setLocation('/basic-info');\n        return;\n      }\n      \n      // If this route requires incomplete profile but user has complete profile\n      if (requiresIncompleteProfile && userProfile.hasBasicInfo) {\n        setLocation('/');\n        return;\n      }\n    }\n  }, [loading, user, userProfile, setLocation]);\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"text-center\">\n          <Loader2 className=\"w-8 h-8 animate-spin mx-auto mb-4 text-cmo-primary\" />\n          <p className=\"text-gray-600\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return <LoginPage />;\n  }\n\n  // Additional checks for verified and basic info completion\n  if (userProfile) {\n    if (!user.emailVerified && !userProfile.verified) {\n      return null; // Will redirect to check-email\n    }\n\n    if (!requiresIncompleteProfile && !userProfile.hasBasicInfo) {\n      return null; // Will redirect to basic-info\n    }\n    \n    if (requiresIncompleteProfile && userProfile.hasBasicInfo) {\n      return null; // Will redirect to home\n    }\n  }\n\n  return <>{children}</>;\n}","size_bytes":2024},"client/src/components/PublicRoute.tsx":{"content":"import React from 'react';\nimport { useLocation } from 'wouter';\nimport { useAuth } from '../contexts/AuthContext';\n\ninterface PublicRouteProps {\n  children: React.ReactNode;\n}\n\nexport function PublicRoute({ children }: PublicRouteProps) {\n  const { isAuthenticated, userProfile, loading } = useAuth();\n  const [, setLocation] = useLocation();\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  // If user is authenticated, redirect based on profile completion\n  if (isAuthenticated) {\n    if (userProfile?.hasBasicInfo) {\n      setLocation('/');\n      return null;\n    } else {\n      setLocation('/basic-info');\n      return null;\n    }\n  }\n\n  // If not authenticated, show the public route\n  return <>{children}</>;\n}","size_bytes":727},"client/src/components/answer-card.tsx":{"content":"import React from \"react\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"./ui/avatar\";\nimport { Button } from \"./ui/button\";\nimport { MessageCircle, X, ThumbsUp, Lightbulb } from \"lucide-react\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport type { Answer, User } from \"../types/schema\";\n\ninterface AnswerCardProps {\n  answer: Answer;\n  author: User;\n}\n\nexport default function AnswerCard({ answer, author }: AnswerCardProps) {\n  return (\n    <article className=\"bg-cmo-card rounded-lg border border-cmo-border p-4\">\n      <div className=\"flex items-start space-x-4\">\n        <Avatar className=\"w-10 h-10 flex-shrink-0\">\n          <AvatarImage src={author.avatar || \"\"} />\n          <AvatarFallback>{author.name.charAt(0)}</AvatarFallback>\n        </Avatar>\n        <div className=\"flex-1\">\n          <div className=\"flex items-center space-x-2 mb-2\">\n            <h3 className=\"font-medium text-sm text-cmo-text-primary\">{author.name}</h3>\n            <span className=\"text-cmo-text-secondary text-sm\">\n              {author.title} • {formatDistanceToNow(answer.createdAt, { addSuffix: true })}\n            </span>\n          </div>\n          <p className=\"text-cmo-text-secondary text-sm mb-3\">\n            Answering a previous • Retouch #content-marketing #branding\n          </p>\n          \n          <p className=\"text-xs text-cmo-text-primary mb-4\">\n            {answer.content}\n          </p>\n          \n          {/* Action Buttons */}\n          <div className=\"flex items-center space-x-6 pt-4 border-t border-cmo-border\">\n            <Button variant=\"ghost\" size=\"sm\" className=\"text-cmo-primary\">\n              <MessageCircle className=\"h-4 w-4 mr-2\" />\n              Answer\n            </Button>\n            <Button variant=\"ghost\" size=\"sm\" className=\"text-cmo-text-secondary hover:text-cmo-primary\">\n              <X className=\"h-4 w-4 mr-2\" />\n              Pass\n            </Button>\n            <Button variant=\"ghost\" size=\"sm\" className=\"text-cmo-text-secondary hover:text-cmo-primary\">\n              <ThumbsUp className=\"h-4 w-4 mr-2\" />\n              Thanks\n            </Button>\n            <Button variant=\"ghost\" size=\"sm\" className=\"text-cmo-text-secondary hover:text-cmo-primary\">\n              <Lightbulb className=\"h-4 w-4 mr-2\" />\n              Insightful\n            </Button>\n          </div>\n        </div>\n      </div>\n    </article>\n  );\n}\n","size_bytes":2392},"client/src/components/mobile-navigation.tsx":{"content":"import React from \"react\";\nimport { Home, Users, Book, TrendingUp, Building, User } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function MobileNavigation() {\n  return (\n    <nav className=\"md:hidden fixed bottom-0 left-0 right-0 bg-white border-t border-cmo-border z-50\">\n      <div className=\"flex items-center justify-around py-2\">\n        <Link href=\"/\">\n          <a className=\"flex flex-col items-center p-2 text-cmo-primary\">\n            <Home className=\"h-5 w-5\" />\n            <span className=\"text-xs mt-1\">Home</span>\n          </a>\n        </Link>\n        <Link href=\"/members\">\n          <a className=\"flex flex-col items-center p-2 text-cmo-text-secondary\">\n            <Users className=\"h-5 w-5\" />\n            <span className=\"text-xs mt-1\">Members</span>\n          </a>\n        </Link>\n        <Link href=\"/guides\">\n          <a className=\"flex flex-col items-center p-2 text-cmo-text-secondary\">\n            <Book className=\"h-5 w-5\" />\n            <span className=\"text-xs mt-1\">Guides</span>\n          </a>\n        </Link>\n        <Link href=\"/profile\">\n          <a className=\"flex flex-col items-center p-2 text-cmo-text-secondary\">\n            <User className=\"h-5 w-5\" />\n            <span className=\"text-xs mt-1\">Profile</span>\n          </a>\n        </Link>\n        <Link href=\"/construction\">\n          <a className=\"flex flex-col items-center p-2 text-cmo-text-secondary\">\n            <Building className=\"h-5 w-5\" />\n            <span className=\"text-xs mt-1\">Projects</span>\n          </a>\n        </Link>\n      </div>\n    </nav>\n  );\n}","size_bytes":1590},"client/src/components/question-card.tsx":{"content":"import React from \"react\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"./ui/avatar\";\nimport { Button } from \"./ui/button\";\nimport { MessageCircle, X, ThumbsUp, Lightbulb } from \"lucide-react\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport type { Question, User } from \"../types/schema\";\n\ninterface QuestionCardProps {\n  question: Question;\n  author: User;\n}\n\nexport default function QuestionCard({ question, author }: QuestionCardProps) {\n  return (\n    <article className=\"bg-cmo-card rounded-lg border border-cmo-border p-4\">\n      <div className=\"flex items-start space-x-4\">\n        <Avatar className=\"w-10 h-10 flex-shrink-0\">\n          <AvatarImage src={author.avatar || \"\"} />\n          <AvatarFallback>{author.name.charAt(0)}</AvatarFallback>\n        </Avatar>\n        <div className=\"flex-1\">\n          <div className=\"flex items-center space-x-2 mb-2\">\n            <h3 className=\"font-medium text-sm text-cmo-text-primary\">{author.name}</h3>\n            <span className=\"text-cmo-text-secondary text-sm\">{author.title}</span>\n            <span className=\"text-cmo-text-secondary text-sm\">\n              • {formatDistanceToNow(question.createdAt, { addSuffix: true })}\n            </span>\n          </div>\n          <p className=\"text-cmo-text-secondary text-sm mb-3\">\n            Asked a question • {question.category} {question.tags?.map(tag => `#${tag}`).join(' ')}\n          </p>\n          \n          <h2 className=\"text-sm font-semibold text-cmo-text-primary mb-4\">\n            {question.title}\n          </h2>\n          \n          <p className=\"text-xs text-cmo-text-primary mb-4\">\n            {question.content}\n          </p>\n          \n          {/* Question illustration */}\n          {(question as any).imageUrl && (\n            <div className=\"mb-4\">\n              <img \n                src={(question as any).imageUrl} \n                alt=\"Question illustration\" \n                className=\"w-full h-48 object-cover rounded-lg\"\n              />\n            </div>\n          )}\n          \n          {/* Action Buttons */}\n          <div className=\"flex items-center space-x-6 pt-4 border-t border-cmo-border\">\n            <Button variant=\"ghost\" size=\"sm\" className=\"text-cmo-text-secondary hover:text-cmo-primary\">\n              <MessageCircle className=\"h-4 w-4 mr-2\" />\n              Answer\n            </Button>\n            <Button variant=\"ghost\" size=\"sm\" className=\"text-cmo-text-secondary hover:text-cmo-primary\">\n              <X className=\"h-4 w-4 mr-2\" />\n              Pass\n            </Button>\n            <Button variant=\"ghost\" size=\"sm\" className=\"text-cmo-text-secondary hover:text-cmo-primary\">\n              <ThumbsUp className=\"h-4 w-4 mr-2\" />\n              Thanks\n            </Button>\n            <Button variant=\"ghost\" size=\"sm\" className=\"text-cmo-text-secondary hover:text-cmo-primary\">\n              <Lightbulb className=\"h-4 w-4 mr-2\" />\n              Insightful\n            </Button>\n          </div>\n        </div>\n      </div>\n    </article>\n  );\n}\n","size_bytes":3026},"client/src/contexts/AuthContext.tsx":{"content":"import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { User } from 'firebase/auth';\nimport { onAuthStateChange } from '../lib/firebase';\nimport { userApiService, UserProfile } from '../lib/userApi';\n\ninterface AuthContextType {\n  user: User | null;\n  userProfile: UserProfile | null;\n  loading: boolean;\n  isAuthenticated: boolean;\n  refreshUserProfile: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType>({\n  user: null,\n  userProfile: null,\n  loading: true,\n  isAuthenticated: false,\n  refreshUserProfile: async () => {},\n});\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [userProfile, setUserProfile] = useState<UserProfile | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  const refreshUserProfile = async () => {\n    if (!user) return;\n    \n    try {\n      const profile = await userApiService.getCurrentUser(true);\n      setUserProfile(profile);\n    } catch (error: any) {\n      if (error.message === 'AUTH_EXPIRED') {\n        // Token expired, sign out user\n        setUser(null);\n        setUserProfile(null);\n        userApiService.clearCache();\n      }\n      console.error('Error fetching user profile:', error);\n    }\n  };\n\n  useEffect(() => {\n    const unsubscribe = onAuthStateChange(async (firebaseUser) => {\n      setUser(firebaseUser);\n      \n      if (firebaseUser) {\n        // Handle remember me functionality\n        const rememberMe = localStorage.getItem('rememberMe');\n        if (rememberMe === 'true') {\n          console.log('User session will be remembered');\n        }\n        \n        try {\n          const profile = await userApiService.getCurrentUser();\n          setUserProfile(profile);\n        } catch (error: any) {\n          if (error.message === 'AUTH_EXPIRED') {\n            setUser(null);\n            setUserProfile(null);\n            userApiService.clearCache();\n          }\n          console.error('Error fetching user profile:', error);\n        }\n      } else {\n        setUserProfile(null);\n        userApiService.clearCache();\n      }\n      \n      setLoading(false);\n    });\n\n    return unsubscribe;\n  }, []);\n\n  const value = {\n    user,\n    userProfile,\n    loading,\n    isAuthenticated: !!user,\n    refreshUserProfile,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}","size_bytes":2623},"client/src/hooks/use-mobile.tsx":{"content":"import { useState, useEffect } from \"react\";\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = useState(false);\n\n  useEffect(() => {\n    const checkDevice = () => {\n      setIsMobile(window.innerWidth < 768);\n    };\n\n    checkDevice();\n    window.addEventListener(\"resize\", checkDevice);\n    \n    return () => window.removeEventListener(\"resize\", checkDevice);\n  }, []);\n\n  return isMobile;\n}","size_bytes":409},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useState, useEffect } from 'react';\nimport { User } from 'firebase/auth';\nimport { onAuthStateChange } from '../lib/firebase';\n\nexport const useAuth = () => {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const unsubscribe = onAuthStateChange((user) => {\n      setUser(user);\n      setLoading(false);\n    });\n\n    return () => unsubscribe();\n  }, []);\n\n  return {\n    user,\n    loading,\n    isAuthenticated: !!user,\n  };\n};","size_bytes":514},"client/src/hooks/useChat.ts":{"content":"import { useState, useEffect, useCallback } from 'react';\nimport { \n  collection, \n  query, \n  orderBy, \n  limit, \n  onSnapshot, \n  addDoc, \n  updateDoc,\n  doc,\n  where,\n  getDocs,\n  startAfter,\n  QueryDocumentSnapshot,\n  DocumentData,\n  serverTimestamp,\n  getDoc,\n  setDoc\n} from 'firebase/firestore';\nimport { deleteDoc } from 'firebase/firestore';\nimport { onAuthStateChanged } from 'firebase/auth';\nimport { ref, uploadBytes, getDownloadURL } from 'firebase/storage';\nimport { firestore, storage, auth } from '../lib/firebase';\nimport { Message, Conversation, ChatUser } from '../types/chat';\n\nexport const useChat = (conversationId?: string) => {\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [hasMore, setHasMore] = useState(true);\n  const [lastDoc, setLastDoc] = useState<QueryDocumentSnapshot<DocumentData> | null>(null);\n\n  // Load initial messages\n  useEffect(() => {\n    if (!conversationId || !auth.currentUser) return;\n\n    const messagesRef = collection(firestore, `conversations/${conversationId}/messages`);\n    const q = query(\n      messagesRef,\n      orderBy('timestamp', 'desc'),\n      limit(30)\n    );\n\n    const unsubscribe = onSnapshot(q, (snapshot) => {\n      const newMessages: Message[] = [];\n      snapshot.forEach((doc) => {\n        const data = doc.data();\n        newMessages.push({\n          id: doc.id,\n          ...data,\n          timestamp: data.timestamp?.toDate() || new Date(),\n        } as Message);\n      });\n      \n      setMessages(newMessages.reverse());\n      setLastDoc(snapshot.docs[snapshot.docs.length - 1] || null);\n      setHasMore(snapshot.docs.length === 30);\n      setLoading(false);\n    });\n\n    return () => unsubscribe();\n  }, [conversationId]);\n\n  // Load more messages (pagination)\n  const loadMoreMessages = useCallback(async () => {\n    if (!conversationId || !lastDoc || !hasMore) return;\n\n    const messagesRef = collection(firestore, `conversations/${conversationId}/messages`);\n    const q = query(\n      messagesRef,\n      orderBy('timestamp', 'desc'),\n      startAfter(lastDoc),\n      limit(20)\n    );\n\n    const snapshot = await getDocs(q);\n    const olderMessages: Message[] = [];\n    \n    snapshot.forEach((doc) => {\n      const data = doc.data();\n      olderMessages.push({\n        id: doc.id,\n        ...data,\n        timestamp: data.timestamp?.toDate() || new Date(),\n      } as Message);\n    });\n\n    if (olderMessages.length > 0) {\n      setMessages(prev => [...olderMessages.reverse(), ...prev]);\n      setLastDoc(snapshot.docs[snapshot.docs.length - 1]);\n      setHasMore(snapshot.docs.length === 20);\n    } else {\n      setHasMore(false);\n    }\n  }, [conversationId, lastDoc, hasMore]);\n\n  // Send text message\n  const sendMessage = useCallback(async (text: string) => {\n    if (!conversationId || !auth.currentUser || !text.trim()) return;\n\n    const messagesRef = collection(firestore, `conversations/${conversationId}/messages`);\n    \n    await addDoc(messagesRef, {\n      senderId: auth.currentUser.uid,\n      text: text.trim(),\n      type: 'text',\n      timestamp: serverTimestamp(),\n      status: 'sent'\n    });\n\n    // Update conversation last message\n    const conversationRef = doc(firestore, `conversations/${conversationId}`);\n    await updateDoc(conversationRef, {\n      lastMessage: text.trim(),\n      lastMessageTime: serverTimestamp(),\n      updatedBy: auth.currentUser.uid\n    });\n  }, [conversationId]);\n\n  // Send media message\n  const sendMediaMessage = useCallback(async (file: File, type: 'image' | 'video') => {\n    if (!conversationId || !auth.currentUser) return;\n\n    // Upload file to storage\n    const storageRef = ref(storage, `chat-media/${conversationId}/${Date.now()}_${file.name}`);\n    const snapshot = await uploadBytes(storageRef, file);\n    const mediaUrl = await getDownloadURL(snapshot.ref);\n\n    const messagesRef = collection(firestore, `conversations/${conversationId}/messages`);\n    \n    await addDoc(messagesRef, {\n      senderId: auth.currentUser.uid,\n      mediaUrl,\n      type,\n      timestamp: serverTimestamp(),\n      status: 'sent'\n    });\n\n    // Update conversation last message\n    const conversationRef = doc(firestore, `conversations/${conversationId}`);\n    await updateDoc(conversationRef, {\n      lastMessage: type === 'image' ? '📷 Image' : '🎥 Video',\n      lastMessageTime: serverTimestamp(),\n      updatedBy: auth.currentUser.uid\n    });\n  }, [conversationId]);\n\n  return {\n    messages,\n    loading,\n    hasMore,\n    sendMessage,\n    sendMediaMessage,\n    loadMoreMessages\n  };\n};\n\nexport const useConversations = () => {\n  const [conversations, setConversations] = useState<Conversation[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    let conversationUnsubscribe: (() => void) | null = null;\n\n    const setupConversationListener = (user: any) => {\n      if (!user) {\n        setConversations([]);\n        setLoading(false);\n        return;\n      }\n\n      const conversationsRef = collection(firestore, 'conversations');\n      const q = query(\n        conversationsRef,\n        where('participants', 'array-contains', user.uid),\n        orderBy('lastMessageTime', 'desc')\n      );\n\n      conversationUnsubscribe = onSnapshot(q, (snapshot) => {\n        const newConversations: Conversation[] = [];\n        snapshot.forEach((doc) => {\n          const data = doc.data();\n          newConversations.push({\n            id: doc.id,\n            ...data,\n            lastMessageTime: data.lastMessageTime?.toDate() || new Date(),\n          } as Conversation);\n        });\n        \n        setConversations(newConversations);\n        setLoading(false);\n      }, (error) => {\n        console.error('Error in conversation listener:', error);\n        setLoading(false);\n      });\n    };\n\n    // Set up auth state listener - this handles both initial load and auth changes\n    const authUnsubscribe = onAuthStateChanged(auth, (user: any) => {\n      // Clean up previous listener\n      if (conversationUnsubscribe) {\n        conversationUnsubscribe();\n        conversationUnsubscribe = null;\n      }\n\n      // Set up new listener for this user (or clear if no user)\n      setupConversationListener(user);\n    });\n\n    return () => {\n      if (conversationUnsubscribe) conversationUnsubscribe();\n      authUnsubscribe();\n    };\n  }, []);\n\n  return { conversations, loading };\n};\n\nexport const useCreateConversation = () => {\n  const createConversation = useCallback(async (otherUserId: string): Promise<string> => {\n    if (!auth.currentUser) throw new Error('Not authenticated');\n    \n    const participants = [auth.currentUser.uid, otherUserId].sort();\n    \n    // Check if conversation already exists\n    const conversationsRef = collection(firestore, 'conversations');\n    const q = query(\n      conversationsRef,\n      where('participants', '==', participants)\n    );\n    \n    const existingConversations = await getDocs(q);\n    \n    if (!existingConversations.empty) {\n      return existingConversations.docs[0].id;\n    }\n    \n    // Create new conversation\n    const newConversationRef = doc(collection(firestore, 'conversations'));\n    await setDoc(newConversationRef, {\n      participants,\n      lastMessage: '',\n      lastMessageTime: serverTimestamp(),\n      updatedBy: auth.currentUser.uid\n    });\n    \n    return newConversationRef.id;\n  }, []);\n\n  return { createConversation };\n};\n\nexport const useChatUsers = () => {\n  const [users, setUsers] = useState<ChatUser[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  // This would typically fetch from your user collection\n  // For now, we'll return an empty array as this depends on your user management system\n  useEffect(() => {\n    // In a real app, you'd query your users collection here\n    setUsers([]);\n    setLoading(false);\n  }, []);\n\n  return { users, loading };\n};\n\n// Block/Unblock functionality\nexport const useBlockUser = () => {\n  const blockUser = useCallback(async (targetUid: string): Promise<void> => {\n    if (!auth.currentUser) throw new Error('Not authenticated');\n    \n    await setDoc(doc(firestore, 'users', auth.currentUser.uid, 'blockedUsers', targetUid), {\n      blockedAt: serverTimestamp()\n    });\n  }, []);\n\n  const unblockUser = useCallback(async (targetUid: string): Promise<void> => {\n    if (!auth.currentUser) throw new Error('Not authenticated');\n    \n    await deleteDoc(doc(firestore, 'users', auth.currentUser.uid, 'blockedUsers', targetUid));\n  }, []);\n\n  return { blockUser, unblockUser };\n};\n\n// Check blocking status with real-time updates\nexport const useBlockingStatus = (otherUserId?: string) => {\n  const [isBlockedByMe, setIsBlockedByMe] = useState(false);\n  const [isBlockedByThem, setIsBlockedByThem] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    if (!auth.currentUser || !otherUserId) {\n      setLoading(false);\n      return;\n    }\n\n    let unsubscribeMyBlock: () => void;\n    let unsubscribeTheirBlock: () => void;\n\n    // Real-time listener for if I blocked them\n    const blockedByMeRef = doc(firestore, 'users', auth.currentUser.uid, 'blockedUsers', otherUserId);\n    unsubscribeMyBlock = onSnapshot(blockedByMeRef, (doc) => {\n      setIsBlockedByMe(doc.exists());\n      setLoading(false);\n    }, (error) => {\n      console.error('Error listening to my block status:', error);\n      setLoading(false);\n    });\n\n    // Real-time listener for if they blocked me\n    const blockedByThemRef = doc(firestore, 'users', otherUserId, 'blockedUsers', auth.currentUser.uid);\n    unsubscribeTheirBlock = onSnapshot(blockedByThemRef, (doc) => {\n      setIsBlockedByThem(doc.exists());\n    }, (error) => {\n      console.error('Error listening to their block status:', error);\n    });\n\n    // Cleanup listeners on unmount\n    return () => {\n      if (unsubscribeMyBlock) unsubscribeMyBlock();\n      if (unsubscribeTheirBlock) unsubscribeTheirBlock();\n    };\n  }, [otherUserId]);\n\n  return { isBlockedByMe, isBlockedByThem, loading };\n};","size_bytes":10026},"client/src/lib/firebase.ts":{"content":"import { initializeApp } from \"firebase/app\";\nimport { \n  getAuth, \n  signInWithPopup, \n  GoogleAuthProvider, \n  createUserWithEmailAndPassword,\n  sendEmailVerification,\n  signInWithEmailAndPassword,\n  signOut,\n  onAuthStateChanged,\n  sendPasswordResetEmail,\n  confirmPasswordReset,\n  verifyPasswordResetCode,\n  User\n} from \"firebase/auth\";\nimport { getFirestore } from \"firebase/firestore\";\nimport { getStorage } from \"firebase/storage\";\n\nconst firebaseConfig = {\n  apiKey: import.meta.env.VITE_FIREBASE_API_KEY,\n  authDomain: `${import.meta.env.VITE_FIREBASE_PROJECT_ID}.firebaseapp.com`,\n  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID,\n  storageBucket: `${import.meta.env.VITE_FIREBASE_PROJECT_ID}.firebasestorage.app`,\n  messagingSenderId: '972540571952',\n  appId: import.meta.env.VITE_FIREBASE_APP_ID,\n};\n\n// Debug Firebase configuration (remove these console.logs in production)\nif (import.meta.env.DEV) {\n  console.log('🔥 Firebase Configuration Debug:');\n  console.log('API Key:', import.meta.env.VITE_FIREBASE_API_KEY ? \n    `✅ Set (${import.meta.env.VITE_FIREBASE_API_KEY.substring(0, 10)}...)` : \n    '❌ Missing');\n  console.log('Project ID:', import.meta.env.VITE_FIREBASE_PROJECT_ID || '❌ Missing');\n  console.log('App ID:', import.meta.env.VITE_FIREBASE_APP_ID ? \n    `✅ Set (${import.meta.env.VITE_FIREBASE_APP_ID.substring(0, 15)}...)` : \n    '❌ Missing');\n  console.log('Auth Domain:', `${import.meta.env.VITE_FIREBASE_PROJECT_ID || 'MISSING'}.firebaseapp.com`);\n  console.log('Full Config:', firebaseConfig);\n}\n\nconst app = initializeApp(firebaseConfig);\nexport const auth = getAuth(app);\nexport const firestore = getFirestore(app);\nexport const storage = getStorage(app);\n\nconst googleProvider = new GoogleAuthProvider();\ngoogleProvider.addScope('email');\ngoogleProvider.addScope('profile');\n\n// External API base URL - configurable via environment variables\n// Direct external API URL - call the backend service directly\nconst API_BASE_URL = import.meta.env.VITE_API_BASE_URL || 'https://cp-backend-service-test-972540571952.asia-south1.run.app';\n\n// Call external signup API with FormData\nconst callExternalSignupAPI = async (userData: {\n  firstName: string;\n  lastName: string;\n  email: string;\n  profilePic?: string;\n  hasBasicInfo?: boolean;\n}, user?: User) => {\n  try {\n    const headers: HeadersInit = {};\n\n    // Add bearer token if user is provided\n    if (user) {\n      const token = await user.getIdToken();\n      headers['Authorization'] = `Bearer ${token}`;\n    }\n\n    // Create FormData instead of JSON\n    const formData = new FormData();\n    formData.append('email', userData.email);\n    formData.append('firstName', userData.firstName);\n    formData.append('lastName', userData.lastName);\n    formData.append('hasBasicInfo', userData.hasBasicInfo?.toString() || 'false');\n    \n    // Only add profileURL if it exists\n    if (userData.profilePic) {\n      formData.append('profileURL', userData.profilePic);\n    }\n\n    const response = await fetch(`${API_BASE_URL}/auth/signup`, {\n      method: 'POST',\n      headers,\n      body: formData,\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(`API call failed: ${response.status} ${response.statusText} - ${errorText}`);\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error('External API call error:', error);\n    throw error;\n  }\n};\n\n// Google Sign In\nexport const signInWithGoogle = async () => {\n  try {\n    const result = await signInWithPopup(auth, googleProvider);\n    const user = result.user;\n\n    // Call external signup API with Google user data and bearer token\n    await callExternalSignupAPI({\n      firstName: user.displayName?.split(' ')[0] || '',\n      lastName: user.displayName?.split(' ').slice(1).join(' ') || '',\n      email: user.email || '',\n      profilePic: user.photoURL || '',\n      hasBasicInfo: false,\n    }, user);\n\n    return user;\n  } catch (error) {\n    console.error('Google sign-in error:', error);\n    throw error;\n  }\n};\n\n// Email/Password Sign Up\nexport const signUpWithEmail = async (\n  email: string, \n  password: string, \n  firstName: string, \n  lastName: string\n) => {\n  try {\n    // Create user in Firebase\n    const result = await createUserWithEmailAndPassword(auth, email, password);\n    const user = result.user;\n\n    // Send verification email\n    await sendEmailVerification(user, {\n      url: `${window.location.origin}/verification-success`,\n      handleCodeInApp: true,\n    });\n\n    // Call external signup API with email user data  \n    await callExternalSignupAPI({\n      firstName,\n      lastName,\n      email,\n      hasBasicInfo: false,\n    }, user);\n\n    return user;\n  } catch (error) {\n    console.error('Email sign-up error:', error);\n    throw error;\n  }\n};\n\n// Email/Password Sign In\nexport const signInWithEmail = async (email: string, password: string) => {\n  try {\n    const result = await signInWithEmailAndPassword(auth, email, password);\n    return result.user;\n  } catch (error) {\n    console.error('Email sign-in error:', error);\n    throw error;\n  }\n};\n\n// Auth state change listener\nexport const onAuthStateChange = (callback: (user: User | null) => void) => {\n  return onAuthStateChanged(auth, callback);\n};\n\n// Send Password Reset Email\nexport const sendPasswordReset = async (email: string) => {\n  try {\n    await sendPasswordResetEmail(auth, email, {\n      url: `${window.location.origin}/login`,\n      handleCodeInApp: false,\n    });\n    console.log('Password reset email sent successfully');\n  } catch (error) {\n    console.error('Send password reset error:', error);\n    throw error;\n  }\n};\n\n// Verify Password Reset Code\nexport const verifyResetCode = async (code: string) => {\n  try {\n    const email = await verifyPasswordResetCode(auth, code);\n    return email;\n  } catch (error) {\n    console.error('Verify reset code error:', error);\n    throw error;\n  }\n};\n\n// Confirm Password Reset\nexport const resetPassword = async (code: string, newPassword: string) => {\n  try {\n    await confirmPasswordReset(auth, code, newPassword);\n    console.log('Password reset successfully');\n  } catch (error) {\n    console.error('Reset password error:', error);\n    throw error;\n  }\n};\n\n// Sign Out\nexport const signOutUser = async () => {\n  try {\n    await signOut(auth);\n    console.log('User signed out successfully');\n  } catch (error) {\n    console.error('Sign out error:', error);\n    throw error;\n  }\n};","size_bytes":6456},"client/src/lib/mock-data.ts":{"content":"import type { User, Question, Space, Vendor } from \"../types/schema\";\n\nexport const mockUsers: User[] = [\n  {\n    id: \"1\",\n    username: \"jennifer.smith\",\n    name: \"Jennifer Smith\",\n    title: \"Brand at Modern Media\",\n    company: \"Modern Media\",\n    avatar: \"https://images.unsplash.com/photo-1494790108755-2616b612b786?ixlib=rb-4.0.3&auto=format&fit=crop&w=100&h=100\",\n    bio: \"Marketing professional with 10+ years experience\",\n    posts: 15,\n    views: 2500,\n    thanks: 45,\n    insightful: 32,\n    createdAt: new Date(\"2023-01-15\"),\n  },\n  {\n    id: \"2\",\n    username: \"eckart.walther\",\n    name: \"Eckart Walther\",\n    title: \"CMO at Modern Media\",\n    company: \"Modern Media\",\n    avatar: \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-4.0.3&auto=format&fit=crop&w=100&h=100\",\n    bio: \"Chief Marketing Officer specializing in B2B growth\",\n    posts: 43,\n    views: 4300,\n    thanks: 105,\n    insightful: 342,\n    createdAt: new Date(\"2022-03-10\"),\n  },\n  {\n    id: \"3\",\n    username: \"hilary.jones\",\n    name: \"Hilary Jones\",\n    title: \"Performance Marketing Lead at Modern Media\",\n    company: \"Modern Media\",\n    avatar: \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&auto=format&fit=crop&w=100&h=100\",\n    bio: \"Performance marketing specialist\",\n    posts: 28,\n    views: 1800,\n    thanks: 67,\n    insightful: 89,\n    createdAt: new Date(\"2022-08-22\"),\n  },\n  {\n    id: \"4\",\n    username: \"john.smith\",\n    name: \"John Smith\",\n    title: \"CMO at Modern Media\",\n    company: \"Modern Media\",\n    avatar: \"https://images.unsplash.com/photo-1519085360753-af0119f7cbe7?ixlib=rb-4.0.3&auto=format&fit=crop&w=100&h=100\",\n    bio: \"Marketing leader focused on digital transformation\",\n    posts: 127,\n    views: 8900,\n    thanks: 234,\n    insightful: 456,\n    createdAt: new Date(\"2021-11-05\"),\n  },\n];\n\nexport const mockQuestions: Question[] = [\n  {\n    id: \"1\",\n    title: \"Do you have any experience with deploying @Hubspot?\",\n    content: \"We are a series A B2B startup with a custom solution today. We are using @Mixpanel and working with @Division of Labor to rebuild our pages. @Jennifer Smith, Would love your thoughts as well.\",\n    authorId: \"1\",\n    category: \"Retouch\",\n    tags: [\"content-marketing\", \"branding\"],\n    imageUrl: \"https://images.unsplash.com/photo-1552664730-d307ca884978?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\",\n    createdAt: new Date(\"2023-11-20\"),\n  },\n  {\n    id: \"2\",\n    title: \"Best practices for B2B lead generation?\",\n    content: \"We have used @Hubspot extensively for our business, and are generally very happy with them. We started with a custom solution, and it took us a month to switch, the results have been dramatic, and feel free. See more\",\n    authorId: \"3\",\n    category: \"Performance Marketing\",\n    tags: [\"lead-generation\", \"b2b\"],\n    imageUrl: undefined,\n    createdAt: new Date(\"2023-11-23\"),\n  },\n  {\n    id: \"3\",\n    title: \"Do you have any experience with deploying @Hubspot?\",\n    content: \"We are a series A B2B startup with a custom solution today. We are using @Mixpanel and working with... See more\",\n    authorId: \"2\",\n    category: \"Retouch\",\n    tags: [\"content-marketing\", \"branding\"],\n    imageUrl: undefined,\n    createdAt: new Date(\"2023-11-20\"),\n  },\n];\n\nexport const mockSpaces: Space[] = [\n  {\n    id: \"1\",\n    name: \"Advertising\",\n    hashtag: \"#advertising\",\n    count: 22,\n    isActive: true,\n  },\n  {\n    id: \"2\",\n    name: \"Performance Marketing\",\n    hashtag: \"#performance-m...\",\n    count: 0,\n    isActive: false,\n  },\n  {\n    id: \"3\",\n    name: \"Social Media Marketing\",\n    hashtag: \"#social-media-m...\",\n    count: 0,\n    isActive: false,\n  },\n  {\n    id: \"4\",\n    name: \"Public Relations\",\n    hashtag: \"#public-relations\",\n    count: 3,\n    isActive: true,\n  },\n  {\n    id: \"5\",\n    name: \"Design\",\n    hashtag: \"#design\",\n    count: 0,\n    isActive: false,\n  },\n  {\n    id: \"6\",\n    name: \"Account Based Marketing\",\n    hashtag: \"#account-based...\",\n    count: 0,\n    isActive: false,\n  },\n  {\n    id: \"7\",\n    name: \"Content Marketing\",\n    hashtag: \"#content-marke...\",\n    count: 17,\n    isActive: true,\n  },\n  {\n    id: \"8\",\n    name: \"Conversion Rate Optimization\",\n    hashtag: \"#conversion-rat...\",\n    count: 0,\n    isActive: false,\n  },\n  {\n    id: \"9\",\n    name: \"Demand Generation\",\n    hashtag: \"#demand-gener...\",\n    count: 0,\n    isActive: false,\n  },\n];\n\nexport const mockVendors: Vendor[] = [\n  {\n    id: \"1\",\n    name: \"Mixpanel\",\n    location: \"San Francisco, CA\",\n    initials: \"MP\",\n    color: \"bg-blue-100 text-blue-600\",\n  },\n  {\n    id: \"2\",\n    name: \"Hubspot\",\n    location: \"Boston, MA\",\n    initials: \"H\",\n    color: \"bg-orange-100 text-orange-600\",\n  },\n  {\n    id: \"3\",\n    name: \"Division of Labor\",\n    location: \"San Francisco, CA\",\n    initials: \"DL\",\n    color: \"bg-red-100 text-red-600\",\n  },\n];\n","size_bytes":4889},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/userApi.ts":{"content":"import { auth } from \"./firebase\";\n\n// Direct external API URL - call the backend service directly\nconst API_BASE_URL = import.meta.env.VITE_API_BASE_URL || 'https://cp-backend-service-test-972540571952.asia-south1.run.app';\n\nexport interface UserProfile {\n  uid: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  username?: string;\n  hasBasicInfo: boolean;\n  verified?: boolean;\n  phoneNumber?: string;\n  title?: string;\n  positionDesignation?: string;\n  currentCompany?: string;\n  about?: string;\n  gender?: string;\n  dateOfBirth?: string;\n  city?: string;\n  state?:\n    | string\n    | {\n        code: string;\n        name: string;\n      };\n  country?:\n    | string\n    | {\n        code: string;\n        name: string;\n      };\n  photoUrl?: string;\n  bannerUrl?: string;\n  userType?: string;\n  organizationName?: string;\n  isActive?: boolean;\n  createdTime?: string;\n  updatedTime?: string;\n  // Legacy fields for backward compatibility\n  profilePic?: string;\n  bannerPic?: string;\n  createdAt?: string;\n  updatedAt?: string;\n  followingCount?: number;\n  followersCount?: number;\n  followerlist?: string[];\n}\n\nexport interface UpdateUserData {\n  userType?: \"personal\" | \"business\";\n  phoneNumber?: string;\n  title?: string;\n  positionDesignation?: string;\n  gender?: string;\n  dateOfBirth?: string;\n  city?: string;\n  state?: { name: string; code: string };\n  country?: { name: string; code: string };\n  company?: string;\n  companyName?: string;\n  industry?: string;\n  companyType?: string;\n  description?: string;\n  address?: string;\n  pincode?: string;\n  website?: string;\n  registrationNumber?: string;\n  companySize?: string;\n  hasBasicInfo?: boolean;\n  profilePic?: File | string;\n  bannerPic?: File | string;\n}\n\n// Types for Education, Experience, and Projects\nexport interface Education {\n  id?: string;\n  degree: string;\n  fieldOfStudy: string;\n  schoolOrCollege: string;\n  startDate: string;\n  endDate: string;\n  grade: string;\n}\n\nexport interface Experience {\n  id?: string;\n  companyName: string;\n  title: string;\n  employmentType: string;\n  location: string;\n  startDate: string;\n  endDate: string;\n  isCurrent: boolean;\n  description: string;\n}\n\nexport interface Project {\n  id?: string;\n  title: string;\n  description: string;\n  location?: string;\n  tags?: string[];\n  imageURLs?: string[];\n  createdAt?: string;\n  updatedAt?: string;\n}\n\nclass UserApiService {\n  private userCache: UserProfile | null = null;\n  private cacheTimestamp: number | null = null;\n  private readonly CACHE_DURATION = 5 * 60 * 1000; // 5 minutes\n\n  private async getAuthHeaders(): Promise<{ Authorization: string }> {\n    const user = auth.currentUser;\n    if (!user) {\n      throw new Error(\"User not authenticated\");\n    }\n\n    const token = await user.getIdToken(true); // Force refresh\n    return {\n      Authorization: `Bearer ${token}`,\n    };\n  }\n\n  private isCacheValid(): boolean {\n    return (\n      this.userCache !== null &&\n      this.cacheTimestamp !== null &&\n      Date.now() - this.cacheTimestamp < this.CACHE_DURATION\n    );\n  }\n\n  async getCurrentUser(forceRefresh: boolean = false): Promise<UserProfile> {\n    // Return cached data if valid and not forcing refresh\n    if (!forceRefresh && this.isCacheValid()) {\n      return this.userCache!;\n    }\n\n    try {\n      const headers = await this.getAuthHeaders();\n      console.log(\"Making request to:\", `${API_BASE_URL}/users/me`);\n      console.log(\"With headers:\", headers);\n\n      const response = await fetch(`${API_BASE_URL}/users/me`, {\n        method: \"GET\",\n        headers: {\n          ...headers,\n          \"Content-Type\": \"application/json\",\n          \"Access-Control-Allow-Origin\": \"*\",\n        },\n        mode: \"cors\",\n        credentials: \"omit\",\n      });\n\n      console.log(\"Response status:\", response.status);\n      console.log(\"Response headers:\", response.headers);\n\n      if (response.status === 401) {\n        // Token expired or invalid\n        throw new Error(\"AUTH_EXPIRED\");\n      }\n\n      if (!response.ok) {\n        throw new Error(\n          `Failed to fetch user data: ${response.status} ${response.statusText}`,\n        );\n      }\n\n      const userData: UserProfile = await response.json();\n\n      // Update cache\n      this.userCache = userData;\n      this.cacheTimestamp = Date.now();\n\n      return userData;\n    } catch (error: any) {\n      if (error.message === \"AUTH_EXPIRED\") {\n        throw error;\n      }\n      console.error(\"Error fetching user data:\", error);\n      throw new Error(\"Failed to fetch user profile\");\n    }\n  }\n\n  async updateUser(\n    uid: string,\n    userData: UpdateUserData,\n  ): Promise<UserProfile> {\n    try {\n      const headers = await this.getAuthHeaders();\n\n      // Create FormData for multipart request\n      const formData = new FormData();\n\n      // Add all fields to FormData\n      Object.entries(userData).forEach(([key, value]) => {\n        if (value !== undefined && value !== null && value !== \"\") {\n          if (value instanceof File) {\n            formData.append(key, value);\n          } else {\n            formData.append(key, value.toString());\n          }\n        }\n      });\n\n      const response = await fetch(`${API_BASE_URL}/users/${uid}`, {\n        method: \"PUT\",\n        headers, // Don't set Content-Type header - browser will set it with boundary\n        body: formData,\n      });\n\n      if (response.status === 401) {\n        throw new Error(\"AUTH_EXPIRED\");\n      }\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(\n          `Failed to update user: ${response.status} ${response.statusText} - ${errorText}`,\n        );\n      }\n\n      const updatedUser: UserProfile = await response.json();\n\n      // Update cache with new data\n      this.userCache = updatedUser;\n      this.cacheTimestamp = Date.now();\n\n      return updatedUser;\n    } catch (error: any) {\n      if (error.message === \"AUTH_EXPIRED\") {\n        throw error;\n      }\n      console.error(\"Error updating user:\", error);\n      throw new Error(\"Failed to update user profile\");\n    }\n  }\n\n  clearCache(): void {\n    this.userCache = null;\n    this.cacheTimestamp = null;\n  }\n\n  async getUserByUid(uid: string): Promise<UserProfile> {\n    try {\n      const headers = await this.getAuthHeaders();\n\n      const response = await fetch(`${API_BASE_URL}/users/${uid}`, {\n        method: \"GET\",\n        headers: {\n          ...headers,\n          \"Content-Type\": \"application/json\",\n        },\n        mode: \"cors\",\n        credentials: \"omit\",\n      });\n\n      if (response.status === 401) {\n        throw new Error(\"AUTH_EXPIRED\");\n      }\n\n      if (response.status === 404) {\n        throw new Error(\"USER_NOT_FOUND\");\n      }\n\n      if (!response.ok) {\n        throw new Error(\n          `Failed to fetch user: ${response.status} ${response.statusText}`,\n        );\n      }\n\n      const userData: UserProfile = await response.json();\n      return userData;\n    } catch (error: any) {\n      if (\n        error.message === \"AUTH_EXPIRED\" ||\n        error.message === \"USER_NOT_FOUND\"\n      ) {\n        throw error;\n      }\n      console.error(\"Error fetching user by uid:\", error);\n      throw new Error(\"Failed to fetch user profile\");\n    }\n  }\n\n  async getChatUserInfo(uid: string): Promise<{\n    uid: string;\n    firstName: string;\n    lastName: string;\n    title?: string;\n    positionDesignation?: string;\n    photoUrl?: string;\n    username?: string;\n  }> {\n    try {\n      const headers = await this.getAuthHeaders();\n\n      const response = await fetch(`${API_BASE_URL}/users/chatinfo/${uid}`, {\n        method: \"GET\",\n        headers: {\n          ...headers,\n          \"Content-Type\": \"application/json\",\n        },\n        mode: \"cors\",\n        credentials: \"omit\",\n      });\n\n      if (response.status === 401) {\n        throw new Error(\"AUTH_EXPIRED\");\n      }\n\n      if (response.status === 404) {\n        throw new Error(\"USER_NOT_FOUND\");\n      }\n\n      if (!response.ok) {\n        throw new Error(\n          `Failed to fetch chat user info: ${response.status} ${response.statusText}`,\n        );\n      }\n\n      const userData = await response.json();\n      return userData;\n    } catch (error: any) {\n      if (\n        error.message === \"AUTH_EXPIRED\" ||\n        error.message === \"USER_NOT_FOUND\"\n      ) {\n        throw error;\n      }\n      console.error(\"Error fetching chat user info:\", error);\n      throw new Error(\"Failed to fetch chat user info\");\n    }\n  }\n\n  async searchUsersByUsername(username: string): Promise<UserProfile[]> {\n    try {\n      const headers = await this.getAuthHeaders();\n\n      const response = await fetch(\n        `${API_BASE_URL}/users/search?username=${encodeURIComponent(username)}`,\n        {\n          method: \"GET\",\n          headers: {\n            ...headers,\n            \"Content-Type\": \"application/json\",\n          },\n          mode: \"cors\",\n          credentials: \"omit\",\n        },\n      );\n\n      if (response.status === 401) {\n        throw new Error(\"AUTH_EXPIRED\");\n      }\n\n      if (!response.ok) {\n        throw new Error(\n          `Failed to search users: ${response.status} ${response.statusText}`,\n        );\n      }\n\n      const users: UserProfile[] = await response.json();\n      return users;\n    } catch (error: any) {\n      if (error.message === \"AUTH_EXPIRED\") {\n        throw error;\n      }\n      console.error(\"Error searching users:\", error);\n      throw new Error(\"Failed to search users\");\n    }\n  }\n\n  async followUser(targetUid: string): Promise<void> {\n    try {\n      const headers = await this.getAuthHeaders();\n\n      const response = await fetch(\n        `${API_BASE_URL}/users/follow?targetUid=${targetUid}`,\n        {\n          method: \"POST\",\n          headers: {\n            ...headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n      );\n\n      if (response.status === 401) {\n        throw new Error(\"AUTH_EXPIRED\");\n      }\n\n      if (!response.ok) {\n        throw new Error(\n          `Failed to follow user: ${response.status} ${response.statusText}`,\n        );\n      }\n    } catch (error: any) {\n      if (error.message === \"AUTH_EXPIRED\") {\n        throw error;\n      }\n      console.error(\"Error following user:\", error);\n      throw new Error(\"Failed to follow user\");\n    }\n  }\n\n  async unfollowUser(targetUid: string): Promise<void> {\n    try {\n      const headers = await this.getAuthHeaders();\n\n      const response = await fetch(\n        `${API_BASE_URL}/users/unfollow?targetUid=${targetUid}`,\n        {\n          method: \"POST\",\n          headers: {\n            ...headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n      );\n\n      if (response.status === 401) {\n        throw new Error(\"AUTH_EXPIRED\");\n      }\n\n      if (!response.ok) {\n        throw new Error(\n          `Failed to unfollow user: ${response.status} ${response.statusText}`,\n        );\n      }\n    } catch (error: any) {\n      if (error.message === \"AUTH_EXPIRED\") {\n        throw error;\n      }\n      console.error(\"Error unfollowing user:\", error);\n      throw new Error(\"Failed to unfollow user\");\n    }\n  }\n\n  async getUserFollowers(uid: string): Promise<UserProfile[]> {\n    try {\n      const headers = await this.getAuthHeaders();\n\n      const response = await fetch(`${API_BASE_URL}/users/${uid}/followers`, {\n        method: \"GET\",\n        headers: {\n          ...headers,\n          \"Content-Type\": \"application/json\",\n        },\n        mode: \"cors\",\n        credentials: \"omit\",\n      });\n\n      if (response.status === 401) {\n        throw new Error(\"AUTH_EXPIRED\");\n      }\n\n      if (!response.ok) {\n        throw new Error(\n          `Failed to fetch followers: ${response.status} ${response.statusText}`,\n        );\n      }\n\n      const followers: UserProfile[] = await response.json();\n      return followers;\n    } catch (error: any) {\n      if (error.message === \"AUTH_EXPIRED\") {\n        throw error;\n      }\n      console.error(\"Error fetching followers:\", error);\n      throw new Error(\"Failed to fetch followers\");\n    }\n  }\n\n  async getUserFollowing(uid: string): Promise<UserProfile[]> {\n    try {\n      const headers = await this.getAuthHeaders();\n\n      const response = await fetch(`${API_BASE_URL}/users/${uid}/following`, {\n        method: \"GET\",\n        headers: {\n          ...headers,\n          \"Content-Type\": \"application/json\",\n        },\n        mode: \"cors\",\n        credentials: \"omit\",\n      });\n\n      if (response.status === 401) {\n        throw new Error(\"AUTH_EXPIRED\");\n      }\n\n      if (!response.ok) {\n        throw new Error(\n          `Failed to fetch following: ${response.status} ${response.statusText}`,\n        );\n      }\n\n      const following: UserProfile[] = await response.json();\n      return following;\n    } catch (error: any) {\n      if (error.message === \"AUTH_EXPIRED\") {\n        throw error;\n      }\n      console.error(\"Error fetching following:\", error);\n      throw new Error(\"Failed to fetch following\");\n    }\n  }\n\n  // Education Methods\n  async getUserEducation(uid: string): Promise<Education[]> {\n    try {\n      const headers = await this.getAuthHeaders();\n      const response = await fetch(`${API_BASE_URL}/users/${uid}/education`, {\n        method: \"GET\",\n        headers: {\n          ...headers,\n          \"Content-Type\": \"application/json\",\n        },\n        mode: \"cors\",\n        credentials: \"omit\",\n      });\n\n      if (response.status === 401) {\n        throw new Error(\"AUTH_EXPIRED\");\n      }\n\n      if (!response.ok) {\n        throw new Error(`Failed to fetch education: ${response.status}`);\n      }\n\n      const education: Education[] = await response.json();\n      return education;\n    } catch (error: any) {\n      if (error.message === \"AUTH_EXPIRED\") {\n        throw error;\n      }\n      console.error(\"Error fetching education:\", error);\n      throw new Error(\"Failed to fetch education\");\n    }\n  }\n\n  async addEducation(uid: string, education: Omit<Education, 'id'>): Promise<Education> {\n    try {\n      const headers = await this.getAuthHeaders();\n      const response = await fetch(`${API_BASE_URL}/users/${uid}/education`, {\n        method: \"POST\",\n        headers: {\n          ...headers,\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(education),\n        mode: \"cors\",\n        credentials: \"omit\",\n      });\n\n      if (response.status === 401) {\n        throw new Error(\"AUTH_EXPIRED\");\n      }\n\n      if (!response.ok) {\n        throw new Error(`Failed to add education: ${response.status}`);\n      }\n\n      const newEducation: Education = await response.json();\n      return newEducation;\n    } catch (error: any) {\n      if (error.message === \"AUTH_EXPIRED\") {\n        throw error;\n      }\n      console.error(\"Error adding education:\", error);\n      throw new Error(\"Failed to add education\");\n    }\n  }\n\n  async updateEducation(uid: string, docId: string, education: Omit<Education, 'id'>): Promise<void> {\n    try {\n      const headers = await this.getAuthHeaders();\n      const response = await fetch(`${API_BASE_URL}/users/${uid}/education/${docId}`, {\n        method: \"PUT\",\n        headers: {\n          ...headers,\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(education),\n        mode: \"cors\",\n        credentials: \"omit\",\n      });\n\n      if (response.status === 401) {\n        throw new Error(\"AUTH_EXPIRED\");\n      }\n\n      if (!response.ok) {\n        throw new Error(`Failed to update education: ${response.status}`);\n      }\n    } catch (error: any) {\n      if (error.message === \"AUTH_EXPIRED\") {\n        throw error;\n      }\n      console.error(\"Error updating education:\", error);\n      throw new Error(\"Failed to update education\");\n    }\n  }\n\n  async deleteEducation(uid: string, docId: string): Promise<void> {\n    try {\n      const headers = await this.getAuthHeaders();\n      const response = await fetch(`${API_BASE_URL}/users/${uid}/education/${docId}`, {\n        method: \"DELETE\",\n        headers: {\n          ...headers,\n          \"Content-Type\": \"application/json\",\n        },\n        mode: \"cors\",\n        credentials: \"omit\",\n      });\n\n      if (response.status === 401) {\n        throw new Error(\"AUTH_EXPIRED\");\n      }\n\n      if (!response.ok) {\n        throw new Error(`Failed to delete education: ${response.status}`);\n      }\n    } catch (error: any) {\n      if (error.message === \"AUTH_EXPIRED\") {\n        throw error;\n      }\n      console.error(\"Error deleting education:\", error);\n      throw new Error(\"Failed to delete education\");\n    }\n  }\n\n  // Experience Methods\n  async getUserExperience(uid: string): Promise<Experience[]> {\n    try {\n      const headers = await this.getAuthHeaders();\n      const response = await fetch(`${API_BASE_URL}/users/${uid}/experience`, {\n        method: \"GET\",\n        headers: {\n          ...headers,\n          \"Content-Type\": \"application/json\",\n        },\n        mode: \"cors\",\n        credentials: \"omit\",\n      });\n\n      if (response.status === 401) {\n        throw new Error(\"AUTH_EXPIRED\");\n      }\n\n      if (!response.ok) {\n        throw new Error(`Failed to fetch experience: ${response.status}`);\n      }\n\n      const experience: Experience[] = await response.json();\n      return experience;\n    } catch (error: any) {\n      if (error.message === \"AUTH_EXPIRED\") {\n        throw error;\n      }\n      console.error(\"Error fetching experience:\", error);\n      throw new Error(\"Failed to fetch experience\");\n    }\n  }\n\n  async addExperience(uid: string, experience: Omit<Experience, 'id'>): Promise<Experience> {\n    try {\n      const headers = await this.getAuthHeaders();\n      const response = await fetch(`${API_BASE_URL}/users/${uid}/experience`, {\n        method: \"POST\",\n        headers: {\n          ...headers,\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(experience),\n        mode: \"cors\",\n        credentials: \"omit\",\n      });\n\n      if (response.status === 401) {\n        throw new Error(\"AUTH_EXPIRED\");\n      }\n\n      if (!response.ok) {\n        throw new Error(`Failed to add experience: ${response.status}`);\n      }\n\n      const newExperience: Experience = await response.json();\n      return newExperience;\n    } catch (error: any) {\n      if (error.message === \"AUTH_EXPIRED\") {\n        throw error;\n      }\n      console.error(\"Error adding experience:\", error);\n      throw new Error(\"Failed to add experience\");\n    }\n  }\n\n  async updateExperience(uid: string, docId: string, experience: Omit<Experience, 'id'>): Promise<void> {\n    try {\n      const headers = await this.getAuthHeaders();\n      const response = await fetch(`${API_BASE_URL}/users/${uid}/experience/${docId}`, {\n        method: \"PUT\",\n        headers: {\n          ...headers,\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(experience),\n        mode: \"cors\",\n        credentials: \"omit\",\n      });\n\n      if (response.status === 401) {\n        throw new Error(\"AUTH_EXPIRED\");\n      }\n\n      if (!response.ok) {\n        throw new Error(`Failed to update experience: ${response.status}`);\n      }\n    } catch (error: any) {\n      if (error.message === \"AUTH_EXPIRED\") {\n        throw error;\n      }\n      console.error(\"Error updating experience:\", error);\n      throw new Error(\"Failed to update experience\");\n    }\n  }\n\n  async deleteExperience(uid: string, docId: string): Promise<void> {\n    try {\n      const headers = await this.getAuthHeaders();\n      const response = await fetch(`${API_BASE_URL}/users/${uid}/experience/${docId}`, {\n        method: \"DELETE\",\n        headers: {\n          ...headers,\n          \"Content-Type\": \"application/json\",\n        },\n        mode: \"cors\",\n        credentials: \"omit\",\n      });\n\n      if (response.status === 401) {\n        throw new Error(\"AUTH_EXPIRED\");\n      }\n\n      if (!response.ok) {\n        throw new Error(`Failed to delete experience: ${response.status}`);\n      }\n    } catch (error: any) {\n      if (error.message === \"AUTH_EXPIRED\") {\n        throw error;\n      }\n      console.error(\"Error deleting experience:\", error);\n      throw new Error(\"Failed to delete experience\");\n    }\n  }\n\n  // Projects Methods\n  async getUserProjects(uid: string): Promise<Project[]> {\n    try {\n      const headers = await this.getAuthHeaders();\n      const response = await fetch(`${API_BASE_URL}/users/${uid}/projects`, {\n        method: \"GET\",\n        headers: {\n          ...headers,\n          \"Content-Type\": \"application/json\",\n        },\n        mode: \"cors\",\n        credentials: \"omit\",\n      });\n\n      if (response.status === 401) {\n        throw new Error(\"AUTH_EXPIRED\");\n      }\n\n      if (!response.ok) {\n        throw new Error(`Failed to fetch projects: ${response.status}`);\n      }\n\n      const projects: Project[] = await response.json();\n      return projects;\n    } catch (error: any) {\n      if (error.message === \"AUTH_EXPIRED\") {\n        throw error;\n      }\n      console.error(\"Error fetching projects:\", error);\n      throw new Error(\"Failed to fetch projects\");\n    }\n  }\n\n  async addProject(uid: string, project: Omit<Project, 'id' | 'createdAt' | 'updatedAt' | 'imageURLs'>, images?: File[]): Promise<Project> {\n    try {\n      const headers = await this.getAuthHeaders();\n      \n      // Use multipart/form-data for project creation with images\n      const formData = new FormData();\n      formData.append('title', project.title);\n      formData.append('description', project.description);\n      if (project.location) formData.append('location', project.location);\n      \n      if (project.tags) {\n        project.tags.forEach(tag => formData.append('tags[]', tag));\n      }\n      \n      if (images) {\n        images.forEach(image => formData.append('images', image));\n      }\n\n      const response = await fetch(`${API_BASE_URL}/users/${uid}/projects`, {\n        method: \"POST\",\n        headers: {\n          Authorization: headers.Authorization,\n        },\n        body: formData,\n        mode: \"cors\",\n        credentials: \"omit\",\n      });\n\n      if (response.status === 401) {\n        throw new Error(\"AUTH_EXPIRED\");\n      }\n\n      if (!response.ok) {\n        throw new Error(`Failed to add project: ${response.status}`);\n      }\n\n      const newProject: Project = await response.json();\n      return newProject;\n    } catch (error: any) {\n      if (error.message === \"AUTH_EXPIRED\") {\n        throw error;\n      }\n      console.error(\"Error adding project:\", error);\n      throw new Error(\"Failed to add project\");\n    }\n  }\n\n  async updateProject(uid: string, projectId: string, project: Omit<Project, 'id' | 'createdAt' | 'updatedAt'>): Promise<void> {\n    try {\n      const headers = await this.getAuthHeaders();\n      const response = await fetch(`${API_BASE_URL}/users/${uid}/projects/${projectId}`, {\n        method: \"PUT\",\n        headers: {\n          ...headers,\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(project),\n        mode: \"cors\",\n        credentials: \"omit\",\n      });\n\n      if (response.status === 401) {\n        throw new Error(\"AUTH_EXPIRED\");\n      }\n\n      if (!response.ok) {\n        throw new Error(`Failed to update project: ${response.status}`);\n      }\n    } catch (error: any) {\n      if (error.message === \"AUTH_EXPIRED\") {\n        throw error;\n      }\n      console.error(\"Error updating project:\", error);\n      throw new Error(\"Failed to update project\");\n    }\n  }\n\n  async deleteProject(uid: string, projectId: string): Promise<void> {\n    try {\n      const headers = await this.getAuthHeaders();\n      const response = await fetch(`${API_BASE_URL}/users/${uid}/projects/${projectId}`, {\n        method: \"DELETE\",\n        headers: {\n          ...headers,\n          \"Content-Type\": \"application/json\",\n        },\n        mode: \"cors\",\n        credentials: \"omit\",\n      });\n\n      if (response.status === 401) {\n        throw new Error(\"AUTH_EXPIRED\");\n      }\n\n      if (!response.ok) {\n        throw new Error(`Failed to delete project: ${response.status}`);\n      }\n    } catch (error: any) {\n      if (error.message === \"AUTH_EXPIRED\") {\n        throw error;\n      }\n      console.error(\"Error deleting project:\", error);\n      throw new Error(\"Failed to delete project\");\n    }\n  }\n\n  // Skills API methods\n  async getAllSkills(): Promise<{ id: string; name: string }[]> {\n    try {\n      const headers = await this.getAuthHeaders();\n\n      const response = await fetch(`${API_BASE_URL}/skills`, {\n        method: \"GET\",\n        headers: {\n          ...headers,\n          \"Content-Type\": \"application/json\",\n        },\n        mode: \"cors\",\n        credentials: \"omit\",\n      });\n\n      if (response.status === 401) {\n        throw new Error(\"AUTH_EXPIRED\");\n      }\n\n      if (!response.ok) {\n        throw new Error(\n          `Failed to fetch skills: ${response.status} ${response.statusText}`,\n        );\n      }\n\n      const skills = await response.json();\n      return skills;\n    } catch (error: any) {\n      if (error.message === \"AUTH_EXPIRED\") {\n        throw error;\n      }\n      console.error(\"Error fetching skills:\", error);\n      throw new Error(\"Failed to fetch skills\");\n    }\n  }\n\n  async getUserSkills(uid: string): Promise<{skillIds: string[], skills: {skillId: string, name: string}[]}> {\n    try {\n      const headers = await this.getAuthHeaders();\n\n      const response = await fetch(`${API_BASE_URL}/users/${uid}/skills`, {\n        method: \"GET\",\n        headers: {\n          ...headers,\n          \"Content-Type\": \"application/json\",\n        },\n        mode: \"cors\",\n        credentials: \"omit\",\n      });\n\n      if (response.status === 401) {\n        throw new Error(\"AUTH_EXPIRED\");\n      }\n\n      if (!response.ok) {\n        throw new Error(\n          `Failed to fetch user skills: ${response.status} ${response.statusText}`,\n        );\n      }\n\n      const skillsData = await response.json();\n      return skillsData;\n    } catch (error: any) {\n      if (error.message === \"AUTH_EXPIRED\") {\n        throw error;\n      }\n      console.error(\"Error fetching user skills:\", error);\n      throw new Error(\"Failed to fetch user skills\");\n    }\n  }\n\n  async updateUserSkills(uid: string, skillIds: string[]): Promise<void> {\n    try {\n      const headers = await this.getAuthHeaders();\n\n      const response = await fetch(`${API_BASE_URL}/users/${uid}/skills`, {\n        method: \"PUT\",\n        headers: {\n          ...headers,\n          \"Content-Type\": \"application/json\",\n        },\n        mode: \"cors\",\n        credentials: \"omit\",\n        body: JSON.stringify({ skillIds }),\n      });\n\n      if (response.status === 401) {\n        throw new Error(\"AUTH_EXPIRED\");\n      }\n\n      if (!response.ok) {\n        throw new Error(\n          `Failed to update user skills: ${response.status} ${response.statusText}`,\n        );\n      }\n    } catch (error: any) {\n      if (error.message === \"AUTH_EXPIRED\") {\n        throw error;\n      }\n      console.error(\"Error updating user skills:\", error);\n      throw new Error(\"Failed to update user skills\");\n    }\n  }\n\n  async getUserSuggestions(): Promise<UserProfile[]> {\n    try {\n      const headers = await this.getAuthHeaders();\n\n      const response = await fetch(`${API_BASE_URL}/users/suggestions/short`, {\n        method: \"GET\",\n        headers: {\n          ...headers,\n          \"Content-Type\": \"application/json\",\n        },\n        mode: \"cors\",\n        credentials: \"omit\",\n      });\n\n      if (response.status === 401) {\n        throw new Error(\"AUTH_EXPIRED\");\n      }\n\n      if (!response.ok) {\n        throw new Error(\n          `Failed to fetch user suggestions: ${response.status} ${response.statusText}`,\n        );\n      }\n\n      const suggestions = await response.json();\n      return suggestions;\n    } catch (error: any) {\n      if (error.message === \"AUTH_EXPIRED\") {\n        throw error;\n      }\n      console.error(\"Error fetching user suggestions:\", error);\n      throw new Error(\"Failed to fetch user suggestions\");\n    }\n  }\n}\n\nexport const userApiService = new UserApiService();\n","size_bytes":28090},"client/src/lib/utils.ts":{"content":"import { type ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}","size_bytes":168},"client/src/pages/basic-info.tsx":{"content":"import React, { useState, useRef, useEffect, useMemo } from 'react';\nimport { useLocation } from 'wouter';\nimport { Button } from '../components/ui/button';\nimport { Input } from '../components/ui/input';\nimport { Label } from '../components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../components/ui/select';\nimport { Combobox } from '../components/ui/combobox';\nimport { Card, CardContent, CardHeader, CardTitle } from '../components/ui/card';\nimport { Calendar } from '../components/ui/calendar';\nimport { Popover, PopoverContent, PopoverTrigger } from '../components/ui/popover';\n\nimport { CountryCodeSelector } from '../components/ui/country-code-selector';\nimport { RadioGroup, RadioGroupItem } from '../components/ui/radio-group';\nimport { Textarea } from '../components/ui/textarea';\nimport { CalendarIcon, Camera, Loader2, Upload, Plus, X, Check } from 'lucide-react';\nimport { format } from 'date-fns';\n\nimport { cn } from '../lib/utils';\nimport { userApiService } from '../lib/userApi';\nimport { useAuth } from '../contexts/AuthContext';\nimport { useToast } from '../hooks/use-toast';\nimport { getAuth, RecaptchaVerifier, signInWithPhoneNumber, ConfirmationResult, PhoneAuthProvider, linkWithCredential } from 'firebase/auth';\n// Direct geo API calls - much simpler approach\nconst GEO_API_BASE_URL = 'https://geo-api-230500065838.asia-south1.run.app';\n\nconst JOB_TITLES = [\n  'Architect',\n  'Urban Planner',\n  'Interior Designer/Architect',\n  'Landscape Architect/Designer',\n  'Sustainability Consultant',\n  'Draughtsman',\n  'Cad/BIM technician',\n  'Civil Engineer',\n  'Structural Engineer/Designer',\n  'Project Director',\n  'Construction Manager',\n  'Contracts Manager',\n  'MEP Engineer',\n  'Quality Control Engineer',\n  'Planning Engineer',\n  'Tendering Engineer',\n  'Project Engineer',\n  'Supervisor',\n  'Foreman',\n  'Site Engineer',\n  'Site Manager',\n  'Electrical Engineer',\n  'Geotechnical Engineer',\n  'Project Manager',\n  'Document Controller',\n  'Purchase Manager/Officer',\n  'Procurement Manager/Officer',\n  'Operations Manager',\n  'Trainee',\n  'Student',\n  'Intern',\n  'Project Coordinator',\n  'Projects Head',\n  'Supplier',\n  'Manufacturer',\n  'Builder',\n  'Contractor',\n  'Dealer',\n  'Agent',\n  'Surveyor',\n  'Valuer',\n  'Arbitrator',\n  'Lecturer',\n  'Professor',\n  'Other (Specify)',\n];\n\nconst COMPANY_TYPES = [\n  'Construction Contractor',\n  'Design & Engineering Services',\n  'Project Management & Consultancy',\n  'Cost & Quantity Services',\n  'Construction Material Suppliers',\n  'Construction Equipment & Machinery',\n  'Infrastructure & Utilities',\n  'Prefabrication & Modular Construction',\n  'Green & Sustainable Construction',\n  'Safety & Compliance',\n  'Technology & Software',\n  'Logistics & Support Services',\n  'Testing & Laboratory Services',\n];\n\nconst INDUSTRIES = [\n  'Construction',\n  'Real Estate',\n  'Infrastructure',\n  'Others',\n];\n\nconst COMPANY_SIZES = [\n  '1-10',\n  '10-50',\n  '50-100',\n  '100-500',\n  '500-1000',\n  '1000+',\n];\n\nconst COUNTRY_CODES = [\n  { code: '+93', country: 'AF', name: 'Afghanistan', flag: '🇦🇫' },\n  { code: '+355', country: 'AL', name: 'Albania', flag: '🇦🇱' },\n  { code: '+213', country: 'DZ', name: 'Algeria', flag: '🇩🇿' },\n  { code: '+376', country: 'AD', name: 'Andorra', flag: '🇦🇩' },\n  { code: '+244', country: 'AO', name: 'Angola', flag: '🇦🇴' },\n  { code: '+54', country: 'AR', name: 'Argentina', flag: '🇦🇷' },\n  { code: '+374', country: 'AM', name: 'Armenia', flag: '🇦🇲' },\n  { code: '+61', country: 'AU', name: 'Australia', flag: '🇦🇺' },\n  { code: '+43', country: 'AT', name: 'Austria', flag: '🇦🇹' },\n  { code: '+994', country: 'AZ', name: 'Azerbaijan', flag: '🇦🇿' },\n  { code: '+973', country: 'BH', name: 'Bahrain', flag: '🇧🇭' },\n  { code: '+880', country: 'BD', name: 'Bangladesh', flag: '🇧🇩' },\n  { code: '+375', country: 'BY', name: 'Belarus', flag: '🇧🇾' },\n  { code: '+32', country: 'BE', name: 'Belgium', flag: '🇧🇪' },\n  { code: '+501', country: 'BZ', name: 'Belize', flag: '🇧🇿' },\n  { code: '+229', country: 'BJ', name: 'Benin', flag: '🇧🇯' },\n  { code: '+975', country: 'BT', name: 'Bhutan', flag: '🇧🇹' },\n  { code: '+591', country: 'BO', name: 'Bolivia', flag: '🇧🇴' },\n  { code: '+387', country: 'BA', name: 'Bosnia and Herzegovina', flag: '🇧🇦' },\n  { code: '+267', country: 'BW', name: 'Botswana', flag: '🇧🇼' },\n  { code: '+55', country: 'BR', name: 'Brazil', flag: '🇧🇷' },\n  { code: '+673', country: 'BN', name: 'Brunei', flag: '🇧🇳' },\n  { code: '+359', country: 'BG', name: 'Bulgaria', flag: '🇧🇬' },\n  { code: '+226', country: 'BF', name: 'Burkina Faso', flag: '🇧🇫' },\n  { code: '+257', country: 'BI', name: 'Burundi', flag: '🇧🇮' },\n  { code: '+855', country: 'KH', name: 'Cambodia', flag: '🇰🇭' },\n  { code: '+237', country: 'CM', name: 'Cameroon', flag: '🇨🇲' },\n  { code: '+1', country: 'CA', name: 'Canada', flag: '🇨🇦' },\n  { code: '+238', country: 'CV', name: 'Cape Verde', flag: '🇨🇻' },\n  { code: '+236', country: 'CF', name: 'Central African Republic', flag: '🇨🇫' },\n  { code: '+235', country: 'TD', name: 'Chad', flag: '🇹🇩' },\n  { code: '+56', country: 'CL', name: 'Chile', flag: '🇨🇱' },\n  { code: '+86', country: 'CN', name: 'China', flag: '🇨🇳' },\n  { code: '+57', country: 'CO', name: 'Colombia', flag: '🇨🇴' },\n  { code: '+269', country: 'KM', name: 'Comoros', flag: '🇰🇲' },\n  { code: '+242', country: 'CG', name: 'Congo', flag: '🇨🇬' },\n  { code: '+243', country: 'CD', name: 'Congo (DRC)', flag: '🇨🇩' },\n  { code: '+506', country: 'CR', name: 'Costa Rica', flag: '🇨🇷' },\n  { code: '+225', country: 'CI', name: 'Côte d\\'Ivoire', flag: '🇨🇮' },\n  { code: '+385', country: 'HR', name: 'Croatia', flag: '🇭🇷' },\n  { code: '+53', country: 'CU', name: 'Cuba', flag: '🇨🇺' },\n  { code: '+357', country: 'CY', name: 'Cyprus', flag: '🇨🇾' },\n  { code: '+420', country: 'CZ', name: 'Czech Republic', flag: '🇨🇿' },\n  { code: '+45', country: 'DK', name: 'Denmark', flag: '🇩🇰' },\n  { code: '+253', country: 'DJ', name: 'Djibouti', flag: '🇩🇯' },\n  { code: '+1767', country: 'DM', name: 'Dominica', flag: '🇩🇲' },\n  { code: '+1', country: 'DO', name: 'Dominican Republic', flag: '🇩🇴' },\n  { code: '+593', country: 'EC', name: 'Ecuador', flag: '🇪🇨' },\n  { code: '+20', country: 'EG', name: 'Egypt', flag: '🇪🇬' },\n  { code: '+503', country: 'SV', name: 'El Salvador', flag: '🇸🇻' },\n  { code: '+240', country: 'GQ', name: 'Equatorial Guinea', flag: '🇬🇶' },\n  { code: '+291', country: 'ER', name: 'Eritrea', flag: '🇪🇷' },\n  { code: '+372', country: 'EE', name: 'Estonia', flag: '🇪🇪' },\n  { code: '+251', country: 'ET', name: 'Ethiopia', flag: '🇪🇹' },\n  { code: '+679', country: 'FJ', name: 'Fiji', flag: '🇫🇯' },\n  { code: '+358', country: 'FI', name: 'Finland', flag: '🇫🇮' },\n  { code: '+33', country: 'FR', name: 'France', flag: '🇫🇷' },\n  { code: '+241', country: 'GA', name: 'Gabon', flag: '🇬🇦' },\n  { code: '+220', country: 'GM', name: 'Gambia', flag: '🇬🇲' },\n  { code: '+995', country: 'GE', name: 'Georgia', flag: '🇬🇪' },\n  { code: '+49', country: 'DE', name: 'Germany', flag: '🇩🇪' },\n  { code: '+233', country: 'GH', name: 'Ghana', flag: '🇬🇭' },\n  { code: '+30', country: 'GR', name: 'Greece', flag: '🇬🇷' },\n  { code: '+1473', country: 'GD', name: 'Grenada', flag: '🇬🇩' },\n  { code: '+502', country: 'GT', name: 'Guatemala', flag: '🇬🇹' },\n  { code: '+224', country: 'GN', name: 'Guinea', flag: '🇬🇳' },\n  { code: '+245', country: 'GW', name: 'Guinea-Bissau', flag: '🇬🇼' },\n  { code: '+592', country: 'GY', name: 'Guyana', flag: '🇬🇾' },\n  { code: '+509', country: 'HT', name: 'Haiti', flag: '🇭🇹' },\n  { code: '+504', country: 'HN', name: 'Honduras', flag: '🇭🇳' },\n  { code: '+36', country: 'HU', name: 'Hungary', flag: '🇭🇺' },\n  { code: '+354', country: 'IS', name: 'Iceland', flag: '🇮🇸' },\n  { code: '+91', country: 'IN', name: 'India', flag: '🇮🇳' },\n  { code: '+62', country: 'ID', name: 'Indonesia', flag: '🇮🇩' },\n  { code: '+98', country: 'IR', name: 'Iran', flag: '🇮🇷' },\n  { code: '+964', country: 'IQ', name: 'Iraq', flag: '🇮🇶' },\n  { code: '+353', country: 'IE', name: 'Ireland', flag: '🇮🇪' },\n  { code: '+972', country: 'IL', name: 'Israel', flag: '🇮🇱' },\n  { code: '+39', country: 'IT', name: 'Italy', flag: '🇮🇹' },\n  { code: '+1876', country: 'JM', name: 'Jamaica', flag: '🇯🇲' },\n  { code: '+81', country: 'JP', name: 'Japan', flag: '🇯🇵' },\n  { code: '+962', country: 'JO', name: 'Jordan', flag: '🇯🇴' },\n  { code: '+7', country: 'KZ', name: 'Kazakhstan', flag: '🇰🇿' },\n  { code: '+254', country: 'KE', name: 'Kenya', flag: '🇰🇪' },\n  { code: '+686', country: 'KI', name: 'Kiribati', flag: '🇰🇮' },\n  { code: '+850', country: 'KP', name: 'North Korea', flag: '🇰🇵' },\n  { code: '+82', country: 'KR', name: 'South Korea', flag: '🇰🇷' },\n  { code: '+965', country: 'KW', name: 'Kuwait', flag: '🇰🇼' },\n  { code: '+996', country: 'KG', name: 'Kyrgyzstan', flag: '🇰🇬' },\n  { code: '+856', country: 'LA', name: 'Laos', flag: '🇱🇦' },\n  { code: '+371', country: 'LV', name: 'Latvia', flag: '🇱🇻' },\n  { code: '+961', country: 'LB', name: 'Lebanon', flag: '🇱🇧' },\n  { code: '+266', country: 'LS', name: 'Lesotho', flag: '🇱🇸' },\n  { code: '+231', country: 'LR', name: 'Liberia', flag: '🇱🇷' },\n  { code: '+218', country: 'LY', name: 'Libya', flag: '🇱🇾' },\n  { code: '+423', country: 'LI', name: 'Liechtenstein', flag: '🇱🇮' },\n  { code: '+370', country: 'LT', name: 'Lithuania', flag: '🇱🇹' },\n  { code: '+352', country: 'LU', name: 'Luxembourg', flag: '🇱🇺' },\n  { code: '+389', country: 'MK', name: 'North Macedonia', flag: '🇲🇰' },\n  { code: '+261', country: 'MG', name: 'Madagascar', flag: '🇲🇬' },\n  { code: '+265', country: 'MW', name: 'Malawi', flag: '🇲🇼' },\n  { code: '+60', country: 'MY', name: 'Malaysia', flag: '🇲🇾' },\n  { code: '+960', country: 'MV', name: 'Maldives', flag: '🇲🇻' },\n  { code: '+223', country: 'ML', name: 'Mali', flag: '🇲🇱' },\n  { code: '+356', country: 'MT', name: 'Malta', flag: '🇲🇹' },\n  { code: '+692', country: 'MH', name: 'Marshall Islands', flag: '🇲🇭' },\n  { code: '+222', country: 'MR', name: 'Mauritania', flag: '🇲🇷' },\n  { code: '+230', country: 'MU', name: 'Mauritius', flag: '🇲🇺' },\n  { code: '+52', country: 'MX', name: 'Mexico', flag: '🇲🇽' },\n  { code: '+691', country: 'FM', name: 'Micronesia', flag: '🇫🇲' },\n  { code: '+373', country: 'MD', name: 'Moldova', flag: '🇲🇩' },\n  { code: '+377', country: 'MC', name: 'Monaco', flag: '🇲🇨' },\n  { code: '+976', country: 'MN', name: 'Mongolia', flag: '🇲🇳' },\n  { code: '+382', country: 'ME', name: 'Montenegro', flag: '🇲🇪' },\n  { code: '+212', country: 'MA', name: 'Morocco', flag: '🇲🇦' },\n  { code: '+258', country: 'MZ', name: 'Mozambique', flag: '🇲🇿' },\n  { code: '+95', country: 'MM', name: 'Myanmar', flag: '🇲🇲' },\n  { code: '+264', country: 'NA', name: 'Namibia', flag: '🇳🇦' },\n  { code: '+674', country: 'NR', name: 'Nauru', flag: '🇳🇷' },\n  { code: '+977', country: 'NP', name: 'Nepal', flag: '🇳🇵' },\n  { code: '+31', country: 'NL', name: 'Netherlands', flag: '🇳🇱' },\n  { code: '+64', country: 'NZ', name: 'New Zealand', flag: '🇳🇿' },\n  { code: '+505', country: 'NI', name: 'Nicaragua', flag: '🇳🇮' },\n  { code: '+227', country: 'NE', name: 'Niger', flag: '🇳🇪' },\n  { code: '+234', country: 'NG', name: 'Nigeria', flag: '🇳🇬' },\n  { code: '+47', country: 'NO', name: 'Norway', flag: '🇳🇴' },\n  { code: '+968', country: 'OM', name: 'Oman', flag: '🇴🇲' },\n  { code: '+92', country: 'PK', name: 'Pakistan', flag: '🇵🇰' },\n  { code: '+680', country: 'PW', name: 'Palau', flag: '🇵🇼' },\n  { code: '+970', country: 'PS', name: 'Palestine', flag: '🇵🇸' },\n  { code: '+507', country: 'PA', name: 'Panama', flag: '🇵🇦' },\n  { code: '+675', country: 'PG', name: 'Papua New Guinea', flag: '🇵🇬' },\n  { code: '+595', country: 'PY', name: 'Paraguay', flag: '🇵🇾' },\n  { code: '+51', country: 'PE', name: 'Peru', flag: '🇵🇪' },\n  { code: '+63', country: 'PH', name: 'Philippines', flag: '🇵🇭' },\n  { code: '+48', country: 'PL', name: 'Poland', flag: '🇵🇱' },\n  { code: '+351', country: 'PT', name: 'Portugal', flag: '🇵🇹' },\n  { code: '+974', country: 'QA', name: 'Qatar', flag: '🇶🇦' },\n  { code: '+40', country: 'RO', name: 'Romania', flag: '🇷🇴' },\n  { code: '+7', country: 'RU', name: 'Russia', flag: '🇷🇺' },\n  { code: '+250', country: 'RW', name: 'Rwanda', flag: '🇷🇼' },\n  { code: '+1869', country: 'KN', name: 'Saint Kitts and Nevis', flag: '🇰🇳' },\n  { code: '+1758', country: 'LC', name: 'Saint Lucia', flag: '🇱🇨' },\n  { code: '+1784', country: 'VC', name: 'Saint Vincent and the Grenadines', flag: '🇻🇨' },\n  { code: '+685', country: 'WS', name: 'Samoa', flag: '🇼🇸' },\n  { code: '+378', country: 'SM', name: 'San Marino', flag: '🇸🇲' },\n  { code: '+239', country: 'ST', name: 'São Tomé and Príncipe', flag: '🇸🇹' },\n  { code: '+966', country: 'SA', name: 'Saudi Arabia', flag: '🇸🇦' },\n  { code: '+221', country: 'SN', name: 'Senegal', flag: '🇸🇳' },\n  { code: '+381', country: 'RS', name: 'Serbia', flag: '🇷🇸' },\n  { code: '+248', country: 'SC', name: 'Seychelles', flag: '🇸🇨' },\n  { code: '+232', country: 'SL', name: 'Sierra Leone', flag: '🇸🇱' },\n  { code: '+65', country: 'SG', name: 'Singapore', flag: '🇸🇬' },\n  { code: '+421', country: 'SK', name: 'Slovakia', flag: '🇸🇰' },\n  { code: '+386', country: 'SI', name: 'Slovenia', flag: '🇸🇮' },\n  { code: '+677', country: 'SB', name: 'Solomon Islands', flag: '🇸🇧' },\n  { code: '+252', country: 'SO', name: 'Somalia', flag: '🇸🇴' },\n  { code: '+27', country: 'ZA', name: 'South Africa', flag: '🇿🇦' },\n  { code: '+211', country: 'SS', name: 'South Sudan', flag: '🇸🇸' },\n  { code: '+34', country: 'ES', name: 'Spain', flag: '🇪🇸' },\n  { code: '+94', country: 'LK', name: 'Sri Lanka', flag: '🇱🇰' },\n  { code: '+249', country: 'SD', name: 'Sudan', flag: '🇸🇩' },\n  { code: '+597', country: 'SR', name: 'Suriname', flag: '🇸🇷' },\n  { code: '+268', country: 'SZ', name: 'Eswatini', flag: '🇸🇿' },\n  { code: '+46', country: 'SE', name: 'Sweden', flag: '🇸🇪' },\n  { code: '+41', country: 'CH', name: 'Switzerland', flag: '🇨🇭' },\n  { code: '+963', country: 'SY', name: 'Syria', flag: '🇸🇾' },\n  { code: '+886', country: 'TW', name: 'Taiwan', flag: '🇹🇼' },\n  { code: '+992', country: 'TJ', name: 'Tajikistan', flag: '🇹🇯' },\n  { code: '+255', country: 'TZ', name: 'Tanzania', flag: '🇹🇿' },\n  { code: '+66', country: 'TH', name: 'Thailand', flag: '🇹🇭' },\n  { code: '+670', country: 'TL', name: 'Timor-Leste', flag: '🇹🇱' },\n  { code: '+228', country: 'TG', name: 'Togo', flag: '🇹🇬' },\n  { code: '+676', country: 'TO', name: 'Tonga', flag: '🇹🇴' },\n  { code: '+1868', country: 'TT', name: 'Trinidad and Tobago', flag: '🇹🇹' },\n  { code: '+216', country: 'TN', name: 'Tunisia', flag: '🇹🇳' },\n  { code: '+90', country: 'TR', name: 'Turkey', flag: '🇹🇷' },\n  { code: '+993', country: 'TM', name: 'Turkmenistan', flag: '🇹🇲' },\n  { code: '+688', country: 'TV', name: 'Tuvalu', flag: '🇹🇻' },\n  { code: '+256', country: 'UG', name: 'Uganda', flag: '🇺🇬' },\n  { code: '+380', country: 'UA', name: 'Ukraine', flag: '🇺🇦' },\n  { code: '+971', country: 'AE', name: 'United Arab Emirates', flag: '🇦🇪' },\n  { code: '+44', country: 'GB', name: 'United Kingdom', flag: '🇬🇧' },\n  { code: '+1', country: 'US', name: 'United States', flag: '🇺🇸' },\n  { code: '+598', country: 'UY', name: 'Uruguay', flag: '🇺🇾' },\n  { code: '+998', country: 'UZ', name: 'Uzbekistan', flag: '🇺🇿' },\n  { code: '+678', country: 'VU', name: 'Vanuatu', flag: '🇻🇺' },\n  { code: '+39', country: 'VA', name: 'Vatican City', flag: '🇻🇦' },\n  { code: '+58', country: 'VE', name: 'Venezuela', flag: '🇻🇪' },\n  { code: '+84', country: 'VN', name: 'Vietnam', flag: '🇻🇳' },\n  { code: '+967', country: 'YE', name: 'Yemen', flag: '🇾🇪' },\n  { code: '+260', country: 'ZM', name: 'Zambia', flag: '🇿🇲' },\n  { code: '+263', country: 'ZW', name: 'Zimbabwe', flag: '🇿🇼' },\n];\n\ninterface Country {\n  name: string;\n  iso2: string;\n}\n\ninterface State {\n  name: string;\n  iso2: string;\n  state_code: string;\n}\n\ninterface City {\n  name: string;\n}\n\nexport function BasicInfoPage() {\n  const [, setLocation] = useLocation();\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [loading, setLoading] = useState(false);\n  const [selectedDate, setSelectedDate] = useState<Date>();\n  const [userType, setUserType] = useState<'personal' | 'business'>('personal');\n  const [switchingType, setSwitchingType] = useState(false);\n  const [showOtherTitle, setShowOtherTitle] = useState(false);\n  const [showOtherIndustry, setShowOtherIndustry] = useState(false);\n  const [profileImageFile, setProfileImageFile] = useState<File | null>(null);\n  const [coverImageFile, setCoverImageFile] = useState<File | null>(null);\n  const [profileImagePreview, setProfileImagePreview] = useState<string>('');\n  const [coverImagePreview, setCoverImagePreview] = useState<string>('');\n  \n  // Location data from custom API\n  const [countries, setCountries] = useState<Country[]>([]);\n  const [states, setStates] = useState<State[]>([]);\n  const [cities, setCities] = useState<City[]>([]);\n  const [loadingLocations, setLoadingLocations] = useState(false);\n\n  // Phone verification\n  const [phoneCodeSent, setPhoneCodeSent] = useState(false);\n  const [phoneVerified, setPhoneVerified] = useState(false);\n  const [verificationCode, setVerificationCode] = useState('');\n  const [sendingCode, setSendingCode] = useState(false);\n  const [verifyingCode, setVerifyingCode] = useState(false);\n  const [phoneError, setPhoneError] = useState('');\n  const [confirmationResult, setConfirmationResult] = useState<ConfirmationResult | null>(null);\n  const [recaptchaVerifier, setRecaptchaVerifier] = useState<RecaptchaVerifier | null>(null);\n  \n  const profileFileRef = useRef<HTMLInputElement>(null);\n  const coverFileRef = useRef<HTMLInputElement>(null);\n\n  // Personal form data\n  const [personalData, setPersonalData] = useState({\n    gender: '',\n    dateOfBirth: '',\n    phoneNumber: '',\n    countryCode: '+91',\n    country: { name: '', code: '' },\n    state: { name: '', code: '' },\n    city: '',\n    title: '',\n    positionDesignation: '',\n    company: '',\n    customTitle: '',\n    hidePhoneNumber: false,\n  });\n\n  // Business form data\n  const [businessData, setBusinessData] = useState({\n    companyName: '',\n    industry: '',\n    customIndustry: '',\n    companyType: '',\n    description: '',\n    addressLine1: '',\n    addressLine2: '',\n    city: '',\n    state: { name: '', code: '' },\n    country: { name: '', code: '' },\n    pincode: '',\n    website: '',\n    registrationNumber: '',\n    companySize: '',\n    phoneNumber: '',\n    countryCode: '+91',\n  });\n\n  const [errors, setErrors] = useState<Record<string, string>>({});\n\n  // Load countries on component mount\n  useEffect(() => {\n    loadCountries();\n  }, []);\n\n  const loadCountries = async () => {\n    try {\n      setLoadingLocations(true);\n      const response = await fetch(`${GEO_API_BASE_URL}/countries`);\n      \n      if (response.ok) {\n        const data = await response.json();\n        setCountries(data);\n      } else {\n        throw new Error('Failed to load countries');\n      }\n    } catch (error) {\n      console.error('Error loading countries:', error);\n      toast({\n        title: \"Error Loading Countries\",\n        description: \"Failed to load country data. Please refresh the page.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoadingLocations(false);\n    }\n  };\n\n  const loadStates = async (countryCode: string) => {\n    try {\n      setLoadingLocations(true);\n      const response = await fetch(`${GEO_API_BASE_URL}/states?country_code=${countryCode}`);\n      \n      if (response.ok) {\n        const data = await response.json();\n        setStates(data);\n      } else {\n        throw new Error('Failed to load states');\n      }\n    } catch (error) {\n      console.error('Error loading states:', error);\n      toast({\n        title: \"Error Loading States\",\n        description: \"Failed to load state data. Please try again.\",\n        variant: \"destructive\",\n      });\n      setStates([]);\n    } finally {\n      setLoadingLocations(false);\n    }\n  };\n\n  const loadCities = async (countryCode: string, stateCode: string) => {\n    try {\n      setLoadingLocations(true);\n      const response = await fetch(`${GEO_API_BASE_URL}/cities?country_code=${countryCode}&state_code=${stateCode}`);\n      \n      if (response.ok) {\n        const data = await response.json();\n        const citiesArray = Array.isArray(data) ? data : (data.data || []);\n        setCities(citiesArray);\n      } else {\n        throw new Error('Failed to load cities');\n      }\n    } catch (error) {\n      console.error('Error loading cities:', error);\n      toast({\n        title: \"Error Loading Cities\",\n        description: \"Failed to load city data. Please try again.\",\n        variant: \"destructive\",\n      });\n      setCities([]);\n    } finally {\n      setLoadingLocations(false);\n    }\n  };\n\n  const validateRequiredFields = () => {\n    const newErrors: Record<string, string> = {};\n    \n    if (userType === 'personal') {\n      if (!personalData.dateOfBirth) newErrors.dateOfBirth = 'Date of birth is required';\n      if (!personalData.title) newErrors.title = 'Current job title is required';\n      if (showOtherTitle && !personalData.customTitle) newErrors.customTitle = 'Please specify the job title';\n      if (!personalData.positionDesignation) newErrors.positionDesignation = 'Position is required';\n      if (!personalData.company) newErrors.company = 'Current company is required';\n      if (!personalData.country.name) newErrors.country = 'Country is required';\n      if (!personalData.state.name) newErrors.state = 'State is required';\n      if (!personalData.city) newErrors.city = 'City is required';\n      \n      // Phone verification check\n      if (personalData.phoneNumber && !phoneVerified) {\n        newErrors.phoneNumber = 'Please verify your phone number';\n      }\n    } else {\n      // Business validation\n      if (!businessData.companyName) newErrors.companyName = 'Company name is required';\n      if (!businessData.industry) newErrors.industry = 'Industry is required';\n      if (showOtherIndustry && !businessData.customIndustry) newErrors.customIndustry = 'Please specify the industry';\n      if (!businessData.companyType) newErrors.companyType = 'Company type is required';\n      if (!businessData.description) newErrors.description = 'Description is required';\n      if (!businessData.addressLine1) newErrors.addressLine1 = 'Address line 1 is required';\n      if (!businessData.city) newErrors.city = 'City is required';\n      if (!businessData.state.name) newErrors.state = 'State is required';\n      if (!businessData.country.name) newErrors.country = 'Country is required';\n      if (!businessData.pincode) newErrors.pincode = 'Pincode is required';\n      if (!businessData.website) newErrors.website = 'Website is required';\n      if (!businessData.registrationNumber) newErrors.registrationNumber = 'Registration number is required';\n      if (!businessData.companySize) newErrors.companySize = 'Company size is required';\n      if (!businessData.phoneNumber) newErrors.phoneNumber = 'Phone number is required for business profiles';\n      \n      // Phone verification check for business (required field)\n      if (businessData.phoneNumber && !phoneVerified) {\n        newErrors.phoneNumber = 'Please verify your phone number';\n      }\n    }\n    \n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handlePersonalInputChange = (field: string, value: string | { name: string; code: string } | boolean) => {\n    setPersonalData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n\n    // Clear error when user starts typing\n    if (errors[field]) {\n      setErrors(prev => ({ ...prev, [field]: '' }));\n    }\n\n    // Handle \"Other (Specify)\" option\n    if (field === 'title') {\n      setShowOtherTitle(value === 'Other (Specify)');\n      if (value !== 'Other (Specify)') {\n        setPersonalData(prev => ({ ...prev, customTitle: '' }));\n      }\n    }\n\n    // Reset phone verification when phone changes\n    if (field === 'phoneNumber') {\n      setPhoneCodeSent(false);\n      setPhoneVerified(false);\n      setVerificationCode('');\n      setPhoneError('');\n      setConfirmationResult(null);\n      \n      // Validate phone number format\n      if (value && typeof value === 'string') {\n        const cleanedValue = value.replace(/\\D/g, '');\n        if (cleanedValue && (cleanedValue.length < 10 || cleanedValue.length > 15)) {\n          setPhoneError('Please enter a valid phone number (10-15 digits)');\n        }\n      }\n    }\n\n    // Handle location changes\n    if (field === 'country') {\n      const countryObj = value as { name: string; code: string };\n      setPersonalData(prev => ({ ...prev, state: { name: '', code: '' }, city: '' }));\n      setStates([]);\n      setCities([]);\n      if (errors.state) setErrors(prev => ({ ...prev, state: '' }));\n      if (errors.city) setErrors(prev => ({ ...prev, city: '' }));\n      \n      if (countryObj.code) {\n        loadStates(countryObj.code);\n      }\n    }\n    if (field === 'state') {\n      const stateObj = value as { name: string; code: string };\n      setPersonalData(prev => ({ ...prev, city: '' }));\n      setCities([]);\n      if (errors.city) setErrors(prev => ({ ...prev, city: '' }));\n      \n      // Use current country code from state since personalData hasn't updated yet\n      const currentCountryCode = personalData.country.code;\n      if (currentCountryCode && stateObj.code) {\n        setTimeout(() => {\n          loadCities(currentCountryCode, stateObj.code);\n        }, 0);\n      }\n    }\n  };\n\n  const handleBusinessInputChange = (field: string, value: string | { name: string; code: string } | boolean) => {\n    setBusinessData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n\n    // Clear error when user starts typing\n    if (errors[field]) {\n      setErrors(prev => ({ ...prev, [field]: '' }));\n    }\n\n    // Handle \"Others\" industry option\n    if (field === 'industry') {\n      setShowOtherIndustry(value === 'Others');\n      if (value !== 'Others') {\n        setBusinessData(prev => ({ ...prev, customIndustry: '' }));\n      }\n    }\n\n    // Reset phone verification when phone changes\n    if (field === 'phoneNumber') {\n      setPhoneCodeSent(false);\n      setPhoneVerified(false);\n      setVerificationCode('');\n      setPhoneError('');\n      setConfirmationResult(null);\n      \n      // Validate phone number format\n      if (value && typeof value === 'string') {\n        const cleanedValue = value.replace(/\\D/g, '');\n        if (cleanedValue && (cleanedValue.length < 10 || cleanedValue.length > 15)) {\n          setPhoneError('Please enter a valid phone number (10-15 digits)');\n        }\n      }\n    }\n\n    // Handle location changes\n    if (field === 'country') {\n      const countryObj = value as { name: string; code: string };\n      setBusinessData(prev => ({ ...prev, state: { name: '', code: '' }, city: '' }));\n      setStates([]);\n      setCities([]);\n      if (errors.state) setErrors(prev => ({ ...prev, state: '' }));\n      if (errors.city) setErrors(prev => ({ ...prev, city: '' }));\n      \n      if (countryObj.code) {\n        loadStates(countryObj.code);\n      }\n    }\n    if (field === 'state') {\n      const stateObj = value as { name: string; code: string };\n      setBusinessData(prev => ({ ...prev, city: '' }));\n      setCities([]);\n      if (errors.city) setErrors(prev => ({ ...prev, city: '' }));\n      \n      // Use current country code from state since businessData hasn't updated yet\n      const currentCountryCode = businessData.country.code;\n      if (currentCountryCode && stateObj.code) {\n        setTimeout(() => {\n          loadCities(currentCountryCode, stateObj.code);\n        }, 0);\n      }\n    }\n  };\n\n  const handleDateSelect = (date: Date | undefined) => {\n    setSelectedDate(date);\n    if (date) {\n      setPersonalData(prev => ({\n        ...prev,\n        dateOfBirth: format(date, 'yyyy-MM-dd')\n      }));\n      if (errors.dateOfBirth) {\n        setErrors(prev => ({ ...prev, dateOfBirth: '' }));\n      }\n    }\n  };\n\n  const handleImageUpload = (file: File, type: 'profile' | 'cover') => {\n    if (!file.type.startsWith('image/')) {\n      toast({\n        title: \"Invalid File\",\n        description: \"Please select an image file\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      const result = e.target?.result as string;\n      if (type === 'profile') {\n        setProfileImageFile(file);\n        setProfileImagePreview(result);\n      } else {\n        setCoverImageFile(file);\n        setCoverImagePreview(result);\n      }\n    };\n    reader.readAsDataURL(file);\n  };\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n  };\n\n  const handleDrop = (e: React.DragEvent, type: 'profile' | 'cover') => {\n    e.preventDefault();\n    const files = e.dataTransfer.files;\n    if (files.length > 0) {\n      handleImageUpload(files[0], type);\n    }\n  };\n\n  const handleFileInputChange = (e: React.ChangeEvent<HTMLInputElement>, type: 'profile' | 'cover') => {\n    const file = e.target.files?.[0];\n    if (file) {\n      handleImageUpload(file, type);\n    }\n  };\n\n  // Initialize reCAPTCHA verifier\n  const setupRecaptcha = () => {\n    const authInstance = getAuth();\n    if (!recaptchaVerifier) {\n      const verifier = new RecaptchaVerifier(authInstance, 'recaptcha-container', {\n        size: 'invisible',\n        callback: (response: any) => {\n          // reCAPTCHA solved\n        },\n      });\n      setRecaptchaVerifier(verifier);\n      return verifier;\n    }\n    return recaptchaVerifier;\n  };\n\n  const sendVerificationCode = async (phoneNumber: string, countryCode: string) => {\n    try {\n      const authInstance = getAuth();\n      const currentUser = authInstance.currentUser;\n      \n      if (!currentUser) {\n        throw new Error('User not authenticated');\n      }\n      \n      const verifier = setupRecaptcha();\n      const fullPhoneNumber = `${countryCode}${phoneNumber}`;\n      \n      // Use PhoneAuthProvider to send verification code without signing in\n      const phoneProvider = new PhoneAuthProvider(authInstance);\n      const verificationId = await phoneProvider.verifyPhoneNumber(fullPhoneNumber, verifier);\n      \n      // Store verification ID instead of confirmation result\n      setConfirmationResult({ verificationId } as any);\n      return true;\n    } catch (error: any) {\n      console.error('Error sending OTP:', error);\n      if (error.code === 'auth/too-many-requests') {\n        throw new Error('Too many requests. Please try again later.');\n      } else if (error.code === 'auth/invalid-phone-number') {\n        throw new Error('Invalid phone number format.');\n      } else {\n        throw new Error('Failed to send verification code. Please try again.');\n      }\n    }\n  };\n\n  const verifyOtpCode = async (code: string) => {\n    try {\n      if (!confirmationResult || !(confirmationResult as any).verificationId) {\n        throw new Error('No verification in progress');\n      }\n      \n      const authInstance = getAuth();\n      const currentUser = authInstance.currentUser;\n      \n      if (!currentUser) {\n        throw new Error('User not authenticated');\n      }\n      \n      // Create phone credential from verification ID and code\n      const verificationId = (confirmationResult as any).verificationId;\n      const phoneCredential = PhoneAuthProvider.credential(verificationId, code);\n      \n      // Link phone credential to existing user instead of signing in\n      try {\n        await linkWithCredential(currentUser, phoneCredential);\n        console.log('Phone number linked successfully to existing user');\n      } catch (linkError: any) {\n        // If linking fails due to phone number already being used by another account,\n        // we'll still consider the verification successful for our purposes\n        if (linkError.code === 'auth/credential-already-in-use') {\n          console.log('Phone number verified (already linked to another account)');\n        } else {\n          throw linkError;\n        }\n      }\n      \n      return true;\n    } catch (error: any) {\n      console.error('Error verifying OTP:', error);\n      if (error.code === 'auth/invalid-verification-code') {\n        throw new Error('Invalid verification code');\n      } else if (error.code === 'auth/credential-already-in-use') {\n        // Still count as success since the phone number is valid\n        return true;\n      } else {\n        throw new Error('Verification failed. Please try again.');\n      }\n    }\n  };\n\n  const handleSendVerificationCode = async () => {\n    const currentPhoneNumber = userType === 'personal' ? personalData.phoneNumber : businessData.phoneNumber;\n    const currentCountryCode = userType === 'personal' ? personalData.countryCode : businessData.countryCode;\n    \n    if (!currentPhoneNumber) {\n      toast({\n        title: \"Phone Number Required\",\n        description: \"Please enter your phone number first\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setSendingCode(true);\n    try {\n      const success = await sendVerificationCode(currentPhoneNumber, currentCountryCode);\n      \n      if (success) {\n        setPhoneCodeSent(true);\n        toast({\n          title: \"Verification Code Sent\",\n          description: `Code sent to ${currentCountryCode}${currentPhoneNumber}`,\n        });\n      } else {\n        throw new Error('Failed to send verification code');\n      }\n    } catch (error) {\n      toast({\n        title: \"Failed to Send Code\",\n        description: \"Please try again later\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setSendingCode(false);\n    }\n  };\n\n  const handleVerifyCode = async () => {\n    if (!verificationCode || verificationCode.length !== 6) {\n      toast({\n        title: \"Invalid Code\",\n        description: \"Please enter a valid 6-digit code\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setVerifyingCode(true);\n    try {\n      const success = await verifyOtpCode(verificationCode);\n      \n      if (success) {\n        setPhoneVerified(true);\n        setPhoneError('');\n        if (errors.phoneNumber) {\n          setErrors(prev => ({ ...prev, phoneNumber: '' }));\n        }\n        toast({\n          title: \"Phone Verified!\",\n          description: \"Your phone number has been verified successfully\",\n        });\n      } else {\n        throw new Error('Invalid verification code');\n      }\n    } catch (error: any) {\n      toast({\n        title: \"Verification Failed\",\n        description: error.message || \"Invalid code. Please try again\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setVerifyingCode(false);\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!user?.uid) {\n      toast({\n        title: \"Authentication Error\",\n        description: \"User not authenticated\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Validate required fields\n    if (!validateRequiredFields()) {\n      toast({\n        title: \"Required Fields Missing\",\n        description: \"Please fill in all required fields marked with *\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setLoading(true);\n\n    try {\n      let updateData: any = {\n        userType,\n        hasBasicInfo: true,\n      };\n\n      if (userType === 'personal') {\n        updateData = {\n          ...updateData,\n          phoneNumber: personalData.phoneNumber || undefined,\n          phoneCountryCode: personalData.countryCode || undefined,\n          title: showOtherTitle && personalData.customTitle ? personalData.customTitle : personalData.title,\n          positionDesignation: personalData.positionDesignation,\n          gender: personalData.gender || undefined,\n          dateOfBirth: personalData.dateOfBirth,\n          city: personalData.city,\n          stateName: personalData.state.name,\n          stateCode: personalData.state.code,\n          countryName: personalData.country.name,\n          countryCode: personalData.country.code,\n          company: personalData.company,\n        };\n      } else {\n        // Business data\n        const address = businessData.addressLine2 \n          ? `${businessData.addressLine1}, ${businessData.addressLine2}`\n          : businessData.addressLine1;\n\n        updateData = {\n          ...updateData,\n          companyName: businessData.companyName,\n          industry: showOtherIndustry && businessData.customIndustry ? businessData.customIndustry : businessData.industry,\n          companyType: businessData.companyType,\n          description: businessData.description,\n          address,\n          city: businessData.city,\n          stateName: businessData.state.name,\n          stateCode: businessData.state.code,\n          countryName: businessData.country.name,\n          countryCode: businessData.country.code,\n          pincode: businessData.pincode,\n          website: businessData.website,\n          registrationNumber: businessData.registrationNumber,\n          companySize: businessData.companySize,\n          phoneNumber: businessData.phoneNumber || undefined,\n          phoneCountryCode: businessData.countryCode || undefined,\n        };\n      }\n\n      // Add image files if they exist\n      if (profileImageFile) {\n        updateData.profilePic = profileImageFile;\n      }\n      if (coverImageFile) {\n        updateData.bannerPic = coverImageFile;\n      }\n\n      await userApiService.updateUser(user.uid, updateData);\n\n      toast({\n        title: \"Profile Updated!\",\n        description: \"Your information has been saved successfully.\",\n      });\n\n      // Redirect to home page after successful profile completion\n      setLocation('/');\n    } catch (error: any) {\n      console.error('Profile update error:', error);\n      toast({\n        title: \"Update Failed\",\n        description: error.message || \"Something went wrong. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const isSubmitEnabled = () => {\n    if (userType === 'personal') {\n      const hasRequiredFields = personalData.dateOfBirth && personalData.title && personalData.positionDesignation && \n                                personalData.company && personalData.country.name && personalData.state.name && personalData.city;\n      const phoneVerificationValid = !personalData.phoneNumber || phoneVerified;\n      return hasRequiredFields && phoneVerificationValid && !loading;\n    } else {\n      const hasRequiredFields = businessData.companyName && businessData.industry && businessData.companyType &&\n                                businessData.description && businessData.addressLine1 && businessData.city &&\n                                businessData.state.name && businessData.country.name && businessData.pincode &&\n                                businessData.website && businessData.registrationNumber && businessData.companySize &&\n                                businessData.phoneNumber;\n      const phoneVerificationValid = businessData.phoneNumber && phoneVerified;\n      return hasRequiredFields && phoneVerificationValid && !loading;\n    }\n  };\n\n  const currentPhoneNumber = userType === 'personal' ? personalData.phoneNumber : businessData.phoneNumber;\n  const currentCountryCode = userType === 'personal' ? personalData.countryCode : businessData.countryCode;\n\n  // Memoize country codes for better performance - show flag, code and country name\n  const countryCodeComboOptions = useMemo(() => \n    COUNTRY_CODES.map((item) => ({\n      value: item.code,\n      label: `${item.flag} ${item.code} ${item.name}`,\n      flag: item.flag,\n    })), []\n  );\n\n  // Memoize job titles for better performance\n  const jobTitleComboOptions = useMemo(() => \n    JOB_TITLES.map((title) => ({\n      value: title,\n      label: title,\n    })), []\n  );\n\n  // Memoize company sizes for better performance\n  const companySizeComboOptions = useMemo(() => \n    COMPANY_SIZES.map((size) => ({\n      value: size,\n      label: size,\n    })), []\n  );\n\n  // No longer need these memoized options since we're using Select components\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-4 md:py-8\">\n      <div className=\"max-w-5xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"mb-4 md:mb-6 text-center\">\n          <h1 className=\"text-lg font-bold text-gray-900 mb-2\">Complete Your Profile</h1>\n          <p className=\"text-gray-600\">Provide your information to get started</p>\n        </div>\n\n        <Card>\n          <CardHeader className=\"pb-4\">\n            <CardTitle className=\"flex items-center gap-2\">\n              <div className=\"w-8 h-8 bg-cmo-primary rounded-lg flex items-center justify-center\">\n                <div className=\"w-4 h-4 bg-white rounded-sm\"></div>\n              </div>\n              Complete Your Information\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              {/* User Type Selection */}\n              <div className=\"space-y-4\">\n                <Label className=\"text-sm font-semibold\">Select Profile Type *</Label>\n                <RadioGroup \n                  value={userType} \n                  onValueChange={(value: 'personal' | 'business') => {\n                    setSwitchingType(true);\n                    setUserType(value);\n                    // Reset form data when switching\n                    setPersonalData({\n                      dateOfBirth: '',\n                      title: '',\n                      customTitle: '',\n                      positionDesignation: '',\n                      company: '',\n                      gender: '',\n                      phoneNumber: '',\n                      countryCode: '+91',\n                      country: { name: '', code: '' },\n                      state: { name: '', code: '' },\n                      city: '',\n                      hidePhoneNumber: false,\n                    });\n                    setBusinessData({\n                      companyName: '',\n                      industry: '',\n                      customIndustry: '',\n                      companyType: '',\n                      description: '',\n                      addressLine1: '',\n                      addressLine2: '',\n                      city: '',\n                      state: { name: '', code: '' },\n                      country: { name: '', code: '' },\n                      pincode: '',\n                      website: '',\n                      registrationNumber: '',\n                      companySize: '',\n                      phoneNumber: '',\n                      countryCode: '+91',\n                    });\n                    // Reset verification states\n                    setPhoneCodeSent(false);\n                    setPhoneVerified(false);\n                    setVerificationCode('');\n                    setPhoneError('');\n                    // Clear form errors\n                    setErrors({});\n                    setTimeout(() => setSwitchingType(false), 100);\n                  }}\n                >\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"relative\">\n                      <Label htmlFor=\"personal\" className=\"block cursor-pointer\">\n                        <div className={`p-4 border-2 rounded-lg cursor-pointer transition-all ${\n                          userType === 'personal' \n                            ? 'border-blue-500 bg-blue-50' \n                            : 'border-gray-200 hover:border-gray-300'\n                        }`}>\n                          <div className=\"flex items-center space-x-3\">\n                            <RadioGroupItem value=\"personal\" id=\"personal\" />\n                            <div>\n                              <div className=\"text-sm font-medium cursor-pointer\">\n                                Personal Profile\n                              </div>\n                              <p className=\"text-sm text-gray-500 mt-1\">For individual professionals</p>\n                            </div>\n                          </div>\n                        </div>\n                      </Label>\n                    </div>\n                    <div className=\"relative\">\n                      <Label htmlFor=\"business\" className=\"block cursor-pointer\">\n                        <div className={`p-4 border-2 rounded-lg cursor-pointer transition-all ${\n                          userType === 'business' \n                            ? 'border-blue-500 bg-blue-50' \n                            : 'border-gray-200 hover:border-gray-300'\n                        }`}>\n                          <div className=\"flex items-center space-x-3\">\n                            <RadioGroupItem value=\"business\" id=\"business\" />\n                            <div>\n                              <div className=\"text-sm font-medium cursor-pointer\">\n                                Business Profile\n                              </div>\n                              <p className=\"text-sm text-gray-500 mt-1\">For companies and organizations</p>\n                            </div>\n                          </div>\n                        </div>\n                      </Label>\n                    </div>\n                  </div>\n                </RadioGroup>\n              </div>\n\n              {/* Profile & Cover Images Section */}\n              <div className=\"space-y-4\">\n                <h3 className=\"text-sm font-semibold text-gray-900\">\n                  {userType === 'business' ? 'Logo & Banner' : 'Profile Images'}\n                </h3>\n                \n                {/* Cover Image */}\n                <div className=\"relative\">\n                  <Label>{userType === 'business' ? 'Banner Image (Optional)' : 'Cover Image (Optional)'}</Label>\n                  <div \n                    className=\"relative w-full h-40 bg-gray-100 rounded-lg overflow-hidden cursor-pointer border-2 border-dashed border-gray-300 hover:border-gray-400 transition-colors\"\n                    onDragOver={handleDragOver}\n                    onDrop={(e) => handleDrop(e, 'cover')}\n                    onClick={() => coverFileRef.current?.click()}\n                  >\n                    {coverImagePreview ? (\n                      <div className=\"relative w-full h-full\">\n                        <img src={coverImagePreview} alt=\"Cover\" className=\"w-full h-full object-cover\" />\n                        <button\n                          type=\"button\"\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            setCoverImageFile(null);\n                            setCoverImagePreview('');\n                          }}\n                          className=\"absolute top-2 right-2 p-1 bg-red-500 text-white rounded-full hover:bg-red-600\"\n                        >\n                          <X className=\"w-4 h-4\" />\n                        </button>\n                      </div>\n                    ) : (\n                      <div className=\"flex items-center justify-center h-full\">\n                        <div className=\"text-center\">\n                          <Camera className=\"w-10 h-10 text-gray-400 mx-auto mb-2\" />\n                          <p className=\"text-sm text-gray-500\">Click to upload or drag and drop</p>\n                          <p className=\"text-xs text-gray-400\">PNG, JPG up to 5MB</p>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                  \n                  {/* Profile Picture/Logo Overlay */}\n                  <div className=\"absolute -bottom-6 left-6\">\n                    <div \n                      className=\"relative w-20 h-20 bg-white rounded-full border-4 border-white shadow-lg cursor-pointer overflow-hidden\"\n                      onDragOver={handleDragOver}\n                      onDrop={(e) => handleDrop(e, 'profile')}\n                      onClick={() => profileFileRef.current?.click()}\n                    >\n                      {profileImagePreview ? (\n                        <div className=\"relative w-full h-full\">\n                          <img src={profileImagePreview} alt=\"Profile\" className=\"w-full h-full object-cover\" />\n                          <button\n                            type=\"button\"\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              setProfileImageFile(null);\n                              setProfileImagePreview('');\n                            }}\n                            className=\"absolute -top-1 -right-1 p-1 bg-red-500 text-white rounded-full hover:bg-red-600 text-xs\"\n                          >\n                            <X className=\"w-3 h-3\" />\n                          </button>\n                        </div>\n                      ) : (\n                        <div className=\"flex items-center justify-center h-full bg-gray-100 border-2 border-dashed border-gray-300\">\n                          <Plus className=\"w-5 h-5 text-gray-400\" />\n                        </div>\n                      )}\n                    </div>\n                    <Label className=\"text-sm text-gray-600 mt-1 block text-center\">\n                      {userType === 'business' ? 'Logo' : 'Profile Picture'}\n                    </Label>\n                  </div>\n                </div>\n\n                {/* Hidden file inputs */}\n                <input\n                  ref={profileFileRef}\n                  type=\"file\"\n                  accept=\"image/*\"\n                  className=\"hidden\"\n                  onChange={(e) => handleFileInputChange(e, 'profile')}\n                />\n                <input\n                  ref={coverFileRef}\n                  type=\"file\"\n                  accept=\"image/*\"\n                  className=\"hidden\"\n                  onChange={(e) => handleFileInputChange(e, 'cover')}\n                />\n              </div>\n\n              {/* Dynamic Form Content Based on User Type */}\n              <div className=\"space-y-4 mt-10\">\n                {switchingType ? (\n                <div className=\"flex items-center justify-center py-8\">\n                  <Loader2 className=\"w-6 h-6 animate-spin\" />\n                  <span className=\"ml-2\">Loading...</span>\n                </div>\n              ) : userType === 'personal' ? (\n                  // Personal Profile Form\n                  <>\n                    <h3 className=\"text-lg font-semibold text-gray-900\">Personal Information</h3>\n                    \n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      {/* Gender */}\n                      <div className=\"space-y-2\">\n                        <Label>Gender (Optional)</Label>\n                        <Combobox\n                          options={[\n                            { value: 'Male', label: 'Male' },\n                            { value: 'Female', label: 'Female' },\n                            { value: 'Other', label: 'Other' },\n                            { value: 'Prefer not to say', label: 'Prefer not to say' }\n                          ]}\n                          value={personalData.gender}\n                          onValueChange={(value) => handlePersonalInputChange('gender', value)}\n                          placeholder=\"Select gender\"\n                          searchPlaceholder=\"Search gender...\"\n                        />\n                      </div>\n\n                      {/* Date of Birth */}\n                      <div className=\"space-y-2\">\n                        <Label>Date of Birth *</Label>\n                        <Popover>\n                          <PopoverTrigger asChild>\n                            <Button\n                              variant=\"outline\"\n                              className={cn(\n                                \"w-full justify-start text-left font-normal\",\n                                !selectedDate && \"text-muted-foreground\",\n                                errors.dateOfBirth && \"border-red-500\"\n                              )}\n                            >\n                              <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                              {selectedDate ? format(selectedDate, \"PPP\") : <span>Pick a date</span>}\n                            </Button>\n                          </PopoverTrigger>\n                          <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                            <Calendar\n                              mode=\"single\"\n                              selected={selectedDate}\n                              onSelect={handleDateSelect}\n                              initialFocus\n                              captionLayout=\"dropdown-buttons\"\n                              fromYear={1950}\n                              toYear={new Date().getFullYear()}\n                              defaultMonth={selectedDate || new Date(1990, 0)}\n                            />\n                          </PopoverContent>\n                        </Popover>\n                        {errors.dateOfBirth && <p className=\"text-sm text-red-500\">{errors.dateOfBirth}</p>}\n                      </div>\n\n                      {/* Job Title */}\n                      <div className=\"space-y-2\">\n                        <Label>Current Job Title *</Label>\n                        <Combobox\n                          options={jobTitleComboOptions}\n                          value={personalData.title}\n                          onValueChange={(value) => handlePersonalInputChange('title', value)}\n                          placeholder=\"Select job title\"\n                          searchPlaceholder=\"Search job titles...\"\n                          error={!!errors.title}\n                        />\n                        {errors.title && <p className=\"text-sm text-red-500\">{errors.title}</p>}\n                      </div>\n\n                      {/* Custom Title (when Other is selected) */}\n                      {showOtherTitle && (\n                        <div className=\"space-y-2\">\n                          <Label>Specify Job Title *</Label>\n                          <Input\n                            placeholder=\"Enter your job title\"\n                            value={personalData.customTitle}\n                            onChange={(e) => handlePersonalInputChange('customTitle', e.target.value)}\n                            className={errors.customTitle ? \"border-red-500\" : \"\"}\n                          />\n                          {errors.customTitle && <p className=\"text-sm text-red-500\">{errors.customTitle}</p>}\n                        </div>\n                      )}\n\n                      {/* Position/Designation */}\n                      <div className=\"space-y-2\">\n                        <Label>Position/Designation *</Label>\n                        <Input\n                          placeholder=\"e.g., Senior Engineer, Team Lead\"\n                          value={personalData.positionDesignation}\n                          onChange={(e) => handlePersonalInputChange('positionDesignation', e.target.value)}\n                          className={errors.positionDesignation ? \"border-red-500\" : \"\"}\n                        />\n                        {errors.positionDesignation && <p className=\"text-sm text-red-500\">{errors.positionDesignation}</p>}\n                      </div>\n\n                      {/* Company */}\n                      <div className=\"space-y-2\">\n                        <Label>Current Company *</Label>\n                        <Input\n                          placeholder=\"Enter company name\"\n                          value={personalData.company}\n                          onChange={(e) => handlePersonalInputChange('company', e.target.value)}\n                          className={errors.company ? \"border-red-500\" : \"\"}\n                        />\n                        {errors.company && <p className=\"text-sm text-red-500\">{errors.company}</p>}\n                      </div>\n                    </div>\n\n                    {/* Phone Number with Verification */}\n                    <div className=\"space-y-3\">\n                      <Label>Phone Number (Optional)</Label>\n                      <div className=\"flex gap-2\">\n                        {/* Country Code */}\n                        <CountryCodeSelector\n                          value={personalData.countryCode}\n                          onValueChange={(value) => handlePersonalInputChange('countryCode', value)}\n                          placeholder=\"Select code\"\n                          className=\"w-36\"\n                        />\n                        \n                        {/* Phone Number */}\n                        <Input\n                          type=\"tel\"\n                          placeholder=\"Enter phone number\"\n                          value={personalData.phoneNumber}\n                          onChange={(e) => {\n                            const value = e.target.value.replace(/\\D/g, ''); // Remove non-digits\n                            handlePersonalInputChange('phoneNumber', value);\n                          }}\n                          className={cn(\"flex-1\", (errors.phoneNumber || phoneError) && \"border-red-500\")}\n                        />\n                        \n                        {/* Verification Code Input (when code sent) */}\n                        {phoneCodeSent && !phoneVerified && (\n                          <Input\n                            type=\"text\"\n                            placeholder=\"Enter 6-digit code\"\n                            value={verificationCode}\n                            onChange={(e) => setVerificationCode(e.target.value)}\n                            maxLength={6}\n                            className=\"w-32\"\n                          />\n                        )}\n                        \n                        {/* Send/Verify Button */}\n                        {personalData.phoneNumber && !phoneVerified && (\n                          <Button\n                            type=\"button\"\n                            variant=\"outline\"\n                            onClick={phoneCodeSent ? handleVerifyCode : handleSendVerificationCode}\n                            disabled={sendingCode || verifyingCode || (phoneCodeSent && verificationCode.length !== 6) || !!phoneError}\n                            className=\"whitespace-nowrap\"\n                          >\n                            {(sendingCode || verifyingCode) && <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />}\n                            {phoneCodeSent ? 'Verify' : 'Send Code'}\n                          </Button>\n                        )}\n                        \n                        {/* Verified Indicator */}\n                        {phoneVerified && (\n                          <div className=\"flex items-center gap-2 px-3 py-2 bg-green-50 text-green-700 rounded-md\">\n                            <Check className=\"w-4 h-4\" />\n                            <span className=\"text-sm\">Verified</span>\n                          </div>\n                        )}\n                      </div>\n                      \n                      {/* Error Messages */}\n                      {(errors.phoneNumber || phoneError) && (\n                        <p className=\"text-sm text-red-500\">{errors.phoneNumber || phoneError}</p>\n                      )}\n                      \n                      {/* Hide Phone Number */}\n                      {personalData.phoneNumber && (\n                        <div className=\"flex items-center space-x-2\">\n                          <input\n                            type=\"checkbox\"\n                            id=\"hidePhonePersonal\"\n                            checked={personalData.hidePhoneNumber}\n                            onChange={(e) => handlePersonalInputChange('hidePhoneNumber', e.target.checked)}\n                            className=\"h-4 w-4 text-cmo-primary border-gray-300 rounded focus:ring-cmo-primary\"\n                          />\n                          <Label htmlFor=\"hidePhonePersonal\" className=\"text-sm\">\n                            Hide phone number from public profile\n                          </Label>\n                        </div>\n                      )}\n                    </div>\n\n                    {/* Location Information */}\n                    <div className=\"space-y-3\">\n                      <h4 className=\"font-medium text-gray-900\">Location Information</h4>\n                      \n                      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                        {/* Country */}\n                        <div className=\"space-y-2\">\n                          <Label>Country *</Label>\n                          <Select \n                            value={personalData.country.name} \n                            onValueChange={(value) => {\n                              const country = countries.find(c => c.name === value);\n                              if (country) {\n                                handlePersonalInputChange('country', { name: country.name, code: country.iso2 });\n                              }\n                            }}\n                            disabled={loadingLocations}\n                          >\n                            <SelectTrigger className={errors.country ? \"border-red-500\" : \"\"}>\n                              <SelectValue placeholder={loadingLocations ? \"Loading...\" : \"Select country\"} />\n                            </SelectTrigger>\n                            <SelectContent>\n                              {countries.map((country) => (\n                                <SelectItem key={country.iso2} value={country.name}>\n                                  {country.name}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          {errors.country && <p className=\"text-sm text-red-500\">{errors.country}</p>}\n                        </div>\n\n                        {/* State */}\n                        <div className=\"space-y-2\">\n                          <Label>State/Province *</Label>\n                          <Select \n                            value={personalData.state.name} \n                            onValueChange={(value) => {\n                              const state = states.find(s => s.name === value);\n                              if (state) {\n                                handlePersonalInputChange('state', { name: state.name, code: state.state_code });\n                              }\n                            }}\n                            disabled={!personalData.country.name || loadingLocations}\n                          >\n                            <SelectTrigger className={errors.state ? \"border-red-500\" : \"\"}>\n                              <SelectValue placeholder={!personalData.country.name ? \"Select country first\" : loadingLocations ? \"Loading...\" : \"Select state\"} />\n                            </SelectTrigger>\n                            <SelectContent>\n                              {states.map((state) => (\n                                <SelectItem key={state.state_code} value={state.name}>\n                                  {state.name}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          {errors.state && <p className=\"text-sm text-red-500\">{errors.state}</p>}\n                        </div>\n\n                        {/* City */}\n                        <div className=\"space-y-2\">\n                          <Label>City *</Label>\n                          <Select \n                            value={personalData.city} \n                            onValueChange={(value) => handlePersonalInputChange('city', value)}\n                            disabled={!personalData.state.name || loadingLocations}\n                          >\n                            <SelectTrigger className={errors.city ? \"border-red-500\" : \"\"}>\n                              <SelectValue placeholder={!personalData.state.name ? \"Select state first\" : loadingLocations ? \"Loading...\" : \"Select city\"} />\n                            </SelectTrigger>\n                            <SelectContent>\n                              {cities.map((city) => (\n                                <SelectItem key={city.name} value={city.name}>\n                                  {city.name}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          {errors.city && <p className=\"text-sm text-red-500\">{errors.city}</p>}\n                        </div>\n                      </div>\n                    </div>\n                  </>\n                ) : (\n                  // Business Profile Form\n                  <>\n                    <h3 className=\"text-lg font-semibold text-gray-900\">Business Information</h3>\n                    \n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      {/* Company Name */}\n                      <div className=\"space-y-2\">\n                        <Label>Company Name *</Label>\n                        <Input\n                          placeholder=\"Enter company name\"\n                          value={businessData.companyName}\n                          onChange={(e) => handleBusinessInputChange('companyName', e.target.value)}\n                          className={errors.companyName ? \"border-red-500\" : \"\"}\n                        />\n                        {errors.companyName && <p className=\"text-sm text-red-500\">{errors.companyName}</p>}\n                      </div>\n\n                      {/* Industry */}\n                      <div className=\"space-y-2\">\n                        <Label>Industry *</Label>\n                        <Combobox\n                          options={INDUSTRIES.map(industry => ({ value: industry, label: industry }))}\n                          value={businessData.industry}\n                          onValueChange={(value) => handleBusinessInputChange('industry', value)}\n                          placeholder=\"Select industry\"\n                          searchPlaceholder=\"Search industries...\"\n                          error={!!errors.industry}\n                        />\n                        {errors.industry && <p className=\"text-sm text-red-500\">{errors.industry}</p>}\n                      </div>\n\n                      {/* Custom Industry (when Others is selected) */}\n                      {showOtherIndustry && (\n                        <div className=\"space-y-2\">\n                          <Label>Specify Industry *</Label>\n                          <Input\n                            placeholder=\"Enter your industry\"\n                            value={businessData.customIndustry}\n                            onChange={(e) => handleBusinessInputChange('customIndustry', e.target.value)}\n                            className={errors.customIndustry ? \"border-red-500\" : \"\"}\n                          />\n                          {errors.customIndustry && <p className=\"text-sm text-red-500\">{errors.customIndustry}</p>}\n                        </div>\n                      )}\n\n                      {/* Company Type */}\n                      <div className=\"space-y-2\">\n                        <Label>Company Type *</Label>\n                        <Select value={businessData.companyType} onValueChange={(value) => handleBusinessInputChange('companyType', value)}>\n                          <SelectTrigger className={errors.companyType ? \"border-red-500\" : \"\"}>\n                            <SelectValue placeholder=\"Select company type\" />\n                          </SelectTrigger>\n                          <SelectContent className=\"max-h-60\">\n                            {COMPANY_TYPES.map((type) => (\n                              <SelectItem key={type} value={type}>\n                                {type}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        {errors.companyType && <p className=\"text-sm text-red-500\">{errors.companyType}</p>}\n                      </div>\n\n                      {/* Company Size */}\n                      <div className=\"space-y-2\">\n                        <Label>Company Size *</Label>\n                        <Select value={businessData.companySize} onValueChange={(value) => handleBusinessInputChange('companySize', value)}>\n                          <SelectTrigger className={errors.companySize ? \"border-red-500\" : \"\"}>\n                            <SelectValue placeholder=\"Select company size\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {COMPANY_SIZES.map((size) => (\n                              <SelectItem key={size} value={size}>\n                                {size} employees\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        {errors.companySize && <p className=\"text-sm text-red-500\">{errors.companySize}</p>}\n                      </div>\n\n                      {/* Registration Number */}\n                      <div className=\"space-y-2\">\n                        <Label>GST/Registration Number *</Label>\n                        <Input\n                          placeholder=\"Enter GST or registration number\"\n                          value={businessData.registrationNumber}\n                          onChange={(e) => handleBusinessInputChange('registrationNumber', e.target.value)}\n                          className={errors.registrationNumber ? \"border-red-500\" : \"\"}\n                        />\n                        {errors.registrationNumber && <p className=\"text-sm text-red-500\">{errors.registrationNumber}</p>}\n                      </div>\n\n                      {/* Website */}\n                      <div className=\"space-y-2\">\n                        <Label>Website *</Label>\n                        <Input\n                          placeholder=\"https://example.com\"\n                          value={businessData.website}\n                          onChange={(e) => handleBusinessInputChange('website', e.target.value)}\n                          className={errors.website ? \"border-red-500\" : \"\"}\n                        />\n                        {errors.website && <p className=\"text-sm text-red-500\">{errors.website}</p>}\n                      </div>\n                    </div>\n\n                    {/* Description */}\n                    <div className=\"space-y-2\">\n                      <Label>Company Description *</Label>\n                      <Textarea\n                        placeholder=\"Describe your company and services\"\n                        value={businessData.description}\n                        onChange={(e) => handleBusinessInputChange('description', e.target.value)}\n                        className={errors.description ? \"border-red-500\" : \"\"}\n                        rows={3}\n                      />\n                      {errors.description && <p className=\"text-sm text-red-500\">{errors.description}</p>}\n                    </div>\n\n                    {/* Address */}\n                    <div className=\"space-y-3\">\n                      <h4 className=\"font-medium text-gray-900\">Company Address</h4>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <div className=\"space-y-2\">\n                          <Label>Address Line 1 *</Label>\n                          <Input\n                            placeholder=\"Street address\"\n                            value={businessData.addressLine1}\n                            onChange={(e) => handleBusinessInputChange('addressLine1', e.target.value)}\n                            className={errors.addressLine1 ? \"border-red-500\" : \"\"}\n                          />\n                          {errors.addressLine1 && <p className=\"text-sm text-red-500\">{errors.addressLine1}</p>}\n                        </div>\n\n                        <div className=\"space-y-2\">\n                          <Label>Address Line 2 (Optional)</Label>\n                          <Input\n                            placeholder=\"Apartment, suite, etc.\"\n                            value={businessData.addressLine2}\n                            onChange={(e) => handleBusinessInputChange('addressLine2', e.target.value)}\n                          />\n                        </div>\n                      </div>\n\n                      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                        {/* Country */}\n                        <div className=\"space-y-2\">\n                          <Label>Country *</Label>\n                          <Select \n                            value={businessData.country.name} \n                            onValueChange={(value) => {\n                              const country = countries.find(c => c.name === value);\n                              if (country) {\n                                handleBusinessInputChange('country', { name: country.name, code: country.iso2 });\n                              }\n                            }}\n                            disabled={loadingLocations}\n                          >\n                            <SelectTrigger className={errors.country ? \"border-red-500\" : \"\"}>\n                              <SelectValue placeholder={loadingLocations ? \"Loading...\" : \"Select country\"} />\n                            </SelectTrigger>\n                            <SelectContent>\n                              {countries.map((country) => (\n                                <SelectItem key={country.iso2} value={country.name}>\n                                  {country.name}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          {errors.country && <p className=\"text-sm text-red-500\">{errors.country}</p>}\n                        </div>\n\n                        {/* State */}\n                        <div className=\"space-y-2\">\n                          <Label>State *</Label>\n                          <Select \n                            value={businessData.state.name} \n                            onValueChange={(value) => {\n                              const state = states.find(s => s.name === value);\n                              if (state) {\n                                handleBusinessInputChange('state', { name: state.name, code: state.state_code });\n                              }\n                            }}\n                            disabled={!businessData.country.name || loadingLocations}\n                          >\n                            <SelectTrigger className={errors.state ? \"border-red-500\" : \"\"}>\n                              <SelectValue placeholder={loadingLocations ? \"Loading...\" : \"Select state\"} />\n                            </SelectTrigger>\n                            <SelectContent>\n                              {states.map((state) => (\n                                <SelectItem key={state.state_code} value={state.name}>\n                                  {state.name}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          {errors.state && <p className=\"text-sm text-red-500\">{errors.state}</p>}\n                        </div>\n\n                        {/* City */}\n                        <div className=\"space-y-2\">\n                          <Label>City *</Label>\n                          <Select \n                            value={businessData.city} \n                            onValueChange={(value) => handleBusinessInputChange('city', value)}\n                            disabled={!businessData.state.name || loadingLocations}\n                          >\n                            <SelectTrigger className={errors.city ? \"border-red-500\" : \"\"}>\n                              <SelectValue placeholder={loadingLocations ? \"Loading...\" : \"Select city\"} />\n                            </SelectTrigger>\n                            <SelectContent>\n                              {cities.map((city) => (\n                                <SelectItem key={city.name} value={city.name}>\n                                  {city.name}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          {errors.city && <p className=\"text-sm text-red-500\">{errors.city}</p>}\n                        </div>\n\n                        {/* Pincode */}\n                        <div className=\"space-y-2\">\n                          <Label>Pincode *</Label>\n                          <Input\n                            placeholder=\"Enter pincode\"\n                            value={businessData.pincode}\n                            onChange={(e) => handleBusinessInputChange('pincode', e.target.value)}\n                            className={errors.pincode ? \"border-red-500\" : \"\"}\n                          />\n                          {errors.pincode && <p className=\"text-sm text-red-500\">{errors.pincode}</p>}\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Phone Number with Verification */}\n                    <div className=\"space-y-3\">\n                      <Label>Phone Number *</Label>\n                      <div className=\"flex gap-2\">\n                        {/* Country Code */}\n                        <CountryCodeSelector\n                          value={businessData.countryCode}\n                          onValueChange={(value) => handleBusinessInputChange('countryCode', value)}\n                          placeholder=\"Select code\"\n                          className=\"w-36\"\n                        />\n                        \n                        {/* Phone Number */}\n                        <Input\n                          type=\"tel\"\n                          placeholder=\"Enter phone number\"\n                          value={businessData.phoneNumber}\n                          onChange={(e) => {\n                            const value = e.target.value.replace(/\\D/g, ''); // Remove non-digits\n                            handleBusinessInputChange('phoneNumber', value);\n                          }}\n                          className={cn(\"flex-1\", (errors.phoneNumber || phoneError) && \"border-red-500\")}\n                        />\n                        \n                        {/* Verification Code Input (when code sent) */}\n                        {phoneCodeSent && !phoneVerified && (\n                          <Input\n                            type=\"text\"\n                            placeholder=\"Enter 6-digit code\"\n                            value={verificationCode}\n                            onChange={(e) => setVerificationCode(e.target.value)}\n                            maxLength={6}\n                            className=\"w-32\"\n                          />\n                        )}\n                        \n                        {/* Send/Verify Button */}\n                        {businessData.phoneNumber && !phoneVerified && (\n                          <Button\n                            type=\"button\"\n                            variant=\"outline\"\n                            onClick={phoneCodeSent ? handleVerifyCode : handleSendVerificationCode}\n                            disabled={sendingCode || verifyingCode || (phoneCodeSent && verificationCode.length !== 6) || !!phoneError}\n                            className=\"whitespace-nowrap\"\n                          >\n                            {(sendingCode || verifyingCode) && <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />}\n                            {phoneCodeSent ? 'Verify' : 'Send Code'}\n                          </Button>\n                        )}\n                        \n                        {/* Verified Indicator */}\n                        {phoneVerified && (\n                          <div className=\"flex items-center gap-2 px-3 py-2 bg-green-50 text-green-700 rounded-md\">\n                            <Check className=\"w-4 h-4\" />\n                            <span className=\"text-sm\">Verified</span>\n                          </div>\n                        )}\n                      </div>\n                      \n                      {/* Error Messages */}\n                      {(errors.phoneNumber || phoneError) && (\n                        <p className=\"text-sm text-red-500\">{errors.phoneNumber || phoneError}</p>\n                      )}\n                      \n\n                    </div>\n                  </>\n                )}\n              </div>\n\n              {/* Submit Button */}\n              <div className=\"flex justify-end pt-4 border-t\">\n                <Button \n                  type=\"submit\" \n                  disabled={!isSubmitEnabled()} \n                  className=\"min-w-[180px]\"\n                >\n                  {loading && <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />}\n                  Complete Profile\n                </Button>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n        \n        {/* reCAPTCHA container for Firebase Phone Auth */}\n        <div id=\"recaptcha-container\"></div>\n      </div>\n    </div>\n  );\n}","size_bytes":82902},"client/src/pages/chat.tsx":{"content":"import React, { useEffect, useState } from 'react';\nimport { useRoute } from 'wouter';\nimport { doc, getDoc } from 'firebase/firestore';\nimport { firestore, auth } from '../lib/firebase';\nimport { useChat, useBlockingStatus } from '../hooks/useChat';\nimport { ChatHeader } from '../components/chat/ChatHeader';\nimport { MessageList } from '../components/chat/MessageList';\nimport { MessageInput } from '../components/chat/MessageInput';\nimport { Conversation } from '../types/chat';\nimport { userApiService, UserProfile } from '../lib/userApi';\nimport Header from '../components/layout/header';\nimport MobileNavigation from '../components/mobile-navigation';\nimport { useIsMobile } from '../hooks/use-mobile';\n\nexport const ChatPage: React.FC = () => {\n  const [match, params] = useRoute('/chat/:conversationId');\n  const conversationId = params?.conversationId;\n  const [conversation, setConversation] = useState<Conversation | null>(null);\n  const [otherUser, setOtherUser] = useState<{ displayName: string; photoURL?: string; username?: string; isOnline?: boolean } | null>(null);\n  const [otherUserProfile, setOtherUserProfile] = useState<UserProfile | null>(null);\n  const [otherUserId, setOtherUserId] = useState<string | null>(null);\n  const [loading, setLoading] = useState(true);\n  const isMobile = useIsMobile();\n  const { isBlockedByMe, isBlockedByThem } = useBlockingStatus(otherUserId || undefined);\n\n  const {\n    messages,\n    loading: messagesLoading,\n    hasMore,\n    sendMessage,\n    sendMediaMessage,\n    loadMoreMessages\n  } = useChat(conversationId);\n\n  // Load conversation and other user info\n  useEffect(() => {\n    const loadConversation = async () => {\n      if (!conversationId || !auth.currentUser) return;\n\n      try {\n        const conversationRef = doc(firestore, 'conversations', conversationId);\n        const conversationSnap = await getDoc(conversationRef);\n        \n        if (!conversationSnap.exists()) {\n          setLoading(false);\n          return;\n        }\n\n        const conversationData = {\n          id: conversationSnap.id,\n          ...conversationSnap.data(),\n          lastMessageTime: conversationSnap.data()?.lastMessageTime?.toDate() || new Date(),\n        } as Conversation;\n\n        setConversation(conversationData);\n\n        // Find the other user\n        const foundOtherUserId = conversationData.participants.find(\n          uid => uid !== auth.currentUser?.uid\n        );\n\n        if (foundOtherUserId) {\n          setOtherUserId(foundOtherUserId);\n          try {\n            // Fetch real user chat info\n            console.log('Fetching chat user info for:', otherUserId);\n            const chatUserInfo = await userApiService.getChatUserInfo(foundOtherUserId);\n            console.log('Fetched chat user info:', chatUserInfo);\n            \n            setOtherUser({\n              displayName: `${chatUserInfo.firstName} ${chatUserInfo.lastName}`.trim(),\n              photoURL: chatUserInfo.photoUrl,\n              username: chatUserInfo.username,\n              isOnline: false // We'll set this based on actual activity later\n            });\n          } catch (error) {\n            console.error('Error fetching chat user info:', error);\n            \n            // Fallback to placeholder only if API completely fails\n            setOtherUser({\n              displayName: `User ${foundOtherUserId.slice(0, 8)}`,\n              photoURL: undefined,\n              username: undefined,\n              isOnline: false\n            });\n          }\n        }\n      } catch (error) {\n        console.error('Error loading conversation:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadConversation();\n  }, [conversationId]);\n\n  if (!match || !conversationId) {\n    return (\n      <div className=\"min-h-screen bg-cmo-bg-main\">\n        <Header />\n        <div className=\"flex items-center justify-center h-96\">\n          <p className=\"text-cmo-text-secondary\">Conversation not found</p>\n        </div>\n        {isMobile && <MobileNavigation />}\n      </div>\n    );\n  }\n\n  if (loading || !otherUser) {\n    return (\n      <div className=\"min-h-screen bg-cmo-bg-main\">\n        <Header />\n        <div className=\"flex items-center justify-center h-96\">\n          <p className=\"text-cmo-text-secondary\">Loading conversation...</p>\n        </div>\n        {isMobile && <MobileNavigation />}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-cmo-bg-main\">\n      <Header />\n      \n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"flex flex-col h-[calc(100vh-4rem)] bg-white dark:bg-gray-900 border border-cmo-border rounded-lg m-4\">\n          <ChatHeader otherUser={otherUser} otherUserId={otherUserId || undefined} />\n          \n          <MessageList\n            messages={messages}\n            loading={messagesLoading}\n            hasMore={hasMore}\n            otherUser={otherUser}\n            onLoadMore={loadMoreMessages}\n          />\n          \n          <MessageInput\n            onSendMessage={sendMessage}\n            onSendMedia={sendMediaMessage}\n            isBlocked={isBlockedByMe || isBlockedByThem}\n            blockMessage={\n              isBlockedByMe \n                ? \"You blocked this user\" \n                : isBlockedByThem \n                ? \"You are blocked by this user\" \n                : undefined\n            }\n          />\n        </div>\n      </div>\n      \n      {isMobile && <MobileNavigation />}\n    </div>\n  );\n};","size_bytes":5465},"client/src/pages/check-email-reset.tsx":{"content":"import React, { useState } from 'react';\nimport { Link } from 'wouter';\nimport { Button } from '../components/ui/button';\nimport { Mail, ArrowLeft, Loader2 } from 'lucide-react';\nimport { sendPasswordReset } from '../lib/firebase';\nimport { useToast } from '../hooks/use-toast';\n\nexport function CheckEmailResetPage() {\n  const [resending, setResending] = useState(false);\n  const { toast } = useToast();\n\n  const handleResendEmail = async () => {\n    setResending(true);\n    try {\n      // Get email from localStorage or URL params if available\n      const email = localStorage.getItem('resetEmail') || '';\n      if (!email) {\n        toast({\n          title: \"Email not found\",\n          description: \"Please go back to the forgot password page and try again.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      await sendPasswordReset(email);\n      \n      toast({\n        title: \"Email resent!\",\n        description: \"Please check your email for the new reset link.\",\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Failed to resend email\",\n        description: error.message || \"Something went wrong. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setResending(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col lg:flex-row\">\n      {/* Left Side - Hero Section */}\n      <div className=\"flex-1 bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-100 relative overflow-hidden lg:flex hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-cmo-primary/10 to-purple-600/20\"></div>\n        \n        {/* Geometric Background Pattern */}\n        <div className=\"absolute inset-0 opacity-20\">\n          <svg className=\"w-full h-full\" viewBox=\"0 0 400 400\" fill=\"none\">\n            <defs>\n              <pattern id=\"hexagons\" x=\"0\" y=\"0\" width=\"50\" height=\"43.4\" patternUnits=\"userSpaceOnUse\">\n                <path d=\"M25 0L50 14.4V35.6L25 50L0 35.6V14.4L25 0Z\" stroke=\"currentColor\" strokeWidth=\"1\" fill=\"none\"/>\n              </pattern>\n            </defs>\n            <rect width=\"100%\" height=\"100%\" fill=\"url(#hexagons)\" className=\"text-cmo-primary/30\"/>\n          </svg>\n        </div>\n\n        <div className=\"relative z-10 flex items-center justify-center w-full p-12\">\n          <div className=\"text-center max-w-md\">\n            <h1 className=\"text-4xl font-bold text-gray-800 mb-6\">\n              Professional network for construction industry\n            </h1>\n            <p className=\"text-lg text-gray-600 leading-relaxed\">\n              Connect with construction professionals, engineers, and project managers.\n              Build your professional network in the construction sector.\n            </p>\n          </div>\n        </div>\n\n        {/* Navigation Dots */}\n        <div className=\"absolute bottom-8 left-1/2 transform -translate-x-1/2 flex space-x-2\">\n          <div className=\"w-2 h-2 bg-cmo-primary rounded-full\"></div>\n          <div className=\"w-2 h-2 bg-gray-300 rounded-full\"></div>\n          <div className=\"w-2 h-2 bg-gray-300 rounded-full\"></div>\n        </div>\n      </div>\n\n      {/* Right Side - Check Email Content */}\n      <div className=\"flex-1 flex items-center justify-center p-4 sm:p-8 bg-white min-h-screen lg:min-h-auto\">\n        <div className=\"w-full max-w-sm text-center\">\n          {/* Logo */}\n          <div className=\"flex items-center justify-center mb-8\">\n            <div className=\"w-8 h-8 bg-cmo-primary rounded-lg flex items-center justify-center mr-3\">\n              <div className=\"w-4 h-4 bg-white rounded-sm\"></div>\n            </div>\n            <span className=\"text-lg font-bold text-cmo-text-primary\">CP</span>\n          </div>\n\n          {/* Email Icon */}\n          <div className=\"w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-6\">\n            <Mail className=\"w-8 h-8 text-blue-600\" />\n          </div>\n\n          {/* Content */}\n          <div className=\"mb-8\">\n            <h2 className=\"text-lg font-bold text-cmo-text-primary mb-4\">Check your email</h2>\n            <p className=\"text-cmo-text-secondary leading-relaxed\">\n              We've sent a password reset link to your email address. Please check your email and click the link to reset your password.\n            </p>\n          </div>\n\n          {/* Actions */}\n          <div className=\"space-y-4\">\n            <Link href=\"/login\">\n              <Button variant=\"outline\" className=\"w-full h-11\">\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back to login\n              </Button>\n            </Link>\n            \n            <p className=\"text-sm text-cmo-text-secondary\">\n              Didn't receive the email? Check your spam folder or{' '}\n              <Button \n                variant=\"link\" \n                className=\"p-0 h-auto text-sm text-cmo-primary hover:text-cmo-primary/80\"\n                onClick={handleResendEmail}\n                disabled={resending}\n              >\n                {resending ? (\n                  <>\n                    <Loader2 className=\"w-3 h-3 mr-1 animate-spin\" />\n                    resending...\n                  </>\n                ) : (\n                  'resend reset email'\n                )}\n              </Button>\n            </p>\n          </div>\n\n          {/* Footer */}\n          <div className=\"mt-8 text-center\">\n            <p className=\"text-sm text-gray-500 mb-4\">© 2024 CP Inc. All rights reserved.</p>\n            <div className=\"flex justify-center space-x-6 text-sm text-gray-500\">\n              <Link href=\"/privacy-policy\">\n                <Button variant=\"link\" className=\"p-0 h-auto text-sm text-gray-500 hover:text-gray-700\">\n                  Privacy Policy\n                </Button>\n              </Link>\n              <Link href=\"/terms-conditions\">\n                <Button variant=\"link\" className=\"p-0 h-auto text-sm text-gray-500 hover:text-gray-700\">\n                  Terms & Conditions\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":6117},"client/src/pages/check-email.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Link } from 'wouter';\nimport { Button } from '../components/ui/button';\nimport { Mail, ArrowLeft, Loader2 } from 'lucide-react';\nimport { auth } from '../lib/firebase';\nimport { sendEmailVerification } from 'firebase/auth';\nimport { useToast } from '../hooks/use-toast';\n\nexport function CheckEmailPage() {\n  const [resendLoading, setResendLoading] = useState(false);\n  const [timer, setTimer] = useState(0);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    if (timer > 0) {\n      const interval = setInterval(() => {\n        setTimer(prev => prev - 1);\n      }, 1000);\n      return () => clearInterval(interval);\n    }\n  }, [timer]);\n\n  const handleResendEmail = async () => {\n    if (timer > 0 || resendLoading) return;\n    \n    const user = auth.currentUser;\n    if (!user) {\n      toast({\n        title: \"Authentication Error\",\n        description: \"Please log in again to resend verification email.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setResendLoading(true);\n    try {\n      await sendEmailVerification(user);\n      setTimer(60); // Start 60-second timer\n      toast({\n        title: \"Verification Email Sent\",\n        description: \"Please check your email for the verification link.\",\n      });\n    } catch (error: any) {\n      console.error('Error sending verification email:', error);\n      toast({\n        title: \"Failed to Send Email\",\n        description: \"Something went wrong. Please try again later.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setResendLoading(false);\n    }\n  };\n  return (\n    <div className=\"min-h-screen flex flex-col lg:flex-row\">\n      {/* Left Side - Hero Section */}\n      <div className=\"flex-1 bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-100 relative overflow-hidden lg:flex hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-cmo-primary/10 to-purple-600/20\"></div>\n        \n        {/* Geometric Background Pattern */}\n        <div className=\"absolute inset-0 opacity-20\">\n          <svg className=\"w-full h-full\" viewBox=\"0 0 400 400\" fill=\"none\">\n            <defs>\n              <pattern id=\"hexagons\" x=\"0\" y=\"0\" width=\"50\" height=\"43.4\" patternUnits=\"userSpaceOnUse\">\n                <path d=\"M25 0L50 14.4V35.6L25 50L0 35.6V14.4L25 0Z\" stroke=\"currentColor\" strokeWidth=\"1\" fill=\"none\"/>\n              </pattern>\n            </defs>\n            <rect width=\"100%\" height=\"100%\" fill=\"url(#hexagons)\" className=\"text-cmo-primary/30\"/>\n          </svg>\n        </div>\n\n        <div className=\"relative z-10 flex items-center justify-center w-full p-12\">\n          <div className=\"text-center max-w-md\">\n            <h1 className=\"text-4xl font-bold text-gray-800 mb-6\">\n              World-class network of Construction Professionals\n            </h1>\n            <p className=\"text-lg text-gray-600 leading-relaxed\">\n              Only for construction and civil engineering professionals.\n              Every member is carefully vetted.\n            </p>\n          </div>\n        </div>\n\n        {/* Navigation Dots */}\n        <div className=\"absolute bottom-8 left-1/2 transform -translate-x-1/2 flex space-x-2\">\n          <div className=\"w-2 h-2 bg-cmo-primary rounded-full\"></div>\n          <div className=\"w-2 h-2 bg-gray-300 rounded-full\"></div>\n          <div className=\"w-2 h-2 bg-gray-300 rounded-full\"></div>\n        </div>\n      </div>\n\n      {/* Right Side - Check Email Content */}\n      <div className=\"flex-1 flex items-center justify-center p-4 sm:p-8 bg-white min-h-screen lg:min-h-auto\">\n        <div className=\"w-full max-w-sm text-center\">\n          {/* Logo */}\n          <div className=\"flex items-center justify-center mb-8\">\n            <div className=\"w-8 h-8 bg-cmo-primary rounded-lg flex items-center justify-center mr-3\">\n              <div className=\"w-4 h-4 bg-white rounded-sm\"></div>\n            </div>\n            <span className=\"text-lg font-bold text-cmo-text-primary\">CP</span>\n          </div>\n\n          {/* Email Icon */}\n          <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-6\">\n            <Mail className=\"w-8 h-8 text-green-600\" />\n          </div>\n\n          {/* Content */}\n          <div className=\"mb-8\">\n            <h2 className=\"text-lg font-bold text-cmo-text-primary mb-4\">Check your email</h2>\n            <p className=\"text-cmo-text-secondary leading-relaxed\">\n              We've sent a verification link to your email address. Please check your email and click the link to verify your account.\n            </p>\n          </div>\n\n          {/* Actions */}\n          <div className=\"space-y-4\">\n            <Link href=\"/login\">\n              <Button variant=\"outline\" className=\"w-full h-11\">\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back to login\n              </Button>\n            </Link>\n            \n            <p className=\"text-sm text-cmo-text-secondary\">\n              Didn't receive the email? Check your spam folder or{' '}\n              <Button \n                variant=\"link\" \n                className=\"p-0 h-auto text-sm text-cmo-primary hover:text-cmo-primary/80 disabled:opacity-50\"\n                onClick={handleResendEmail}\n                disabled={timer > 0 || resendLoading}\n              >\n                {resendLoading && <Loader2 className=\"w-3 h-3 mr-1 animate-spin\" />}\n                {timer > 0 \n                  ? `resend verification email (${timer}s)` \n                  : 'resend verification email'\n                }\n              </Button>\n            </p>\n          </div>\n\n          {/* Footer */}\n          <div className=\"mt-8 text-center\">\n            <p className=\"text-sm text-gray-500 mb-4\">© 2024 CP Inc. All rights reserved.</p>\n            <div className=\"flex justify-center space-x-6 text-sm text-gray-500\">\n              <Link href=\"/privacy-policy\">\n                <Button variant=\"link\" className=\"p-0 h-auto text-sm text-gray-500 hover:text-gray-700\">\n                  Privacy Policy\n                </Button>\n              </Link>\n              <Link href=\"/terms-conditions\">\n                <Button variant=\"link\" className=\"p-0 h-auto text-sm text-gray-500 hover:text-gray-700\">\n                  Terms & Conditions\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":6449},"client/src/pages/forgot-password.tsx":{"content":"import React, { useState } from 'react';\nimport { Link, useLocation } from 'wouter';\nimport { Button } from '../components/ui/button';\nimport { Input } from '../components/ui/input';\nimport { Label } from '../components/ui/label';\nimport { ArrowLeft, Key, Loader2 } from 'lucide-react';\nimport { sendPasswordReset } from '../lib/firebase';\nimport { useToast } from '../hooks/use-toast';\n\nexport function ForgotPasswordPage() {\n  const [email, setEmail] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!email) {\n      toast({\n        title: \"Email required\",\n        description: \"Please enter your email address.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setLoading(true);\n\n    try {\n      await sendPasswordReset(email);\n      \n      // Store email for resending functionality\n      localStorage.setItem('resetEmail', email);\n      \n      toast({\n        title: \"Reset email sent!\",\n        description: \"Please check your email for password reset instructions.\",\n      });\n\n      // Navigate to check email reset page\n      setLocation(\"/check-email-reset\");\n    } catch (error: any) {\n      console.error(\"Password reset error:\", error);\n      \n      let errorMessage = \"Something went wrong. Please try again.\";\n      if (error.code === 'auth/user-not-found') {\n        errorMessage = \"No account found with this email address.\";\n      } else if (error.code === 'auth/invalid-email') {\n        errorMessage = \"Please enter a valid email address.\";\n      }\n      \n      toast({\n        title: \"Password reset failed\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col lg:flex-row\">\n      {/* Left Side - Hero Section */}\n      <div className=\"flex-1 bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-100 relative overflow-hidden lg:flex hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-cmo-primary/10 to-purple-600/20\"></div>\n        \n        {/* Geometric Background Pattern */}\n        <div className=\"absolute inset-0 opacity-20\">\n          <svg className=\"w-full h-full\" viewBox=\"0 0 400 400\" fill=\"none\">\n            <defs>\n              <pattern id=\"hexagons\" x=\"0\" y=\"0\" width=\"50\" height=\"43.4\" patternUnits=\"userSpaceOnUse\">\n                <path d=\"M25 0L50 14.4V35.6L25 50L0 35.6V14.4L25 0Z\" stroke=\"currentColor\" strokeWidth=\"1\" fill=\"none\"/>\n              </pattern>\n            </defs>\n            <rect width=\"100%\" height=\"100%\" fill=\"url(#hexagons)\" className=\"text-cmo-primary/30\"/>\n          </svg>\n        </div>\n\n        <div className=\"relative z-10 flex items-center justify-center w-full p-8\">\n          <div className=\"text-center max-w-md\">\n            <h1 className=\"text-2xl sm:text-3xl font-bold text-gray-800 mb-4\">\n              Professional network for construction industry\n            </h1>\n            <p className=\"text-sm sm:text-base text-gray-600 leading-relaxed\">\n              Connect with construction professionals, engineers, and project managers.\n              Build your professional network in the construction sector.\n            </p>\n          </div>\n        </div>\n\n        {/* Navigation Dots */}\n        <div className=\"absolute bottom-8 left-1/2 transform -translate-x-1/2 flex space-x-2\">\n          <div className=\"w-2 h-2 bg-cmo-primary rounded-full\"></div>\n          <div className=\"w-2 h-2 bg-gray-300 rounded-full\"></div>\n          <div className=\"w-2 h-2 bg-gray-300 rounded-full\"></div>\n        </div>\n      </div>\n\n      {/* Right Side - Forgot Password Form */}\n      <div className=\"flex-1 flex items-center justify-center p-3 sm:p-6 bg-white min-h-screen lg:min-h-auto\">\n        <div className=\"w-full max-w-sm\">\n          {/* Logo */}\n          <div className=\"flex items-center mb-6\">\n            <div className=\"w-8 h-8 bg-cmo-primary rounded-lg flex items-center justify-center mr-3\">\n              <div className=\"w-4 h-4 bg-white rounded-sm\"></div>\n            </div>\n            <span className=\"text-xl font-bold text-cmo-text-primary\">CP</span>\n          </div>\n\n          {/* Key Icon */}\n          <div className=\"w-10 h-10 bg-gray-100 rounded-full flex items-center justify-center mb-4\">\n            <Key className=\"w-6 h-6 text-gray-600\" />\n          </div>\n\n          {/* Form Header */}\n          <div className=\"mb-8\">\n            <h2 className=\"text-2xl font-bold text-cmo-text-primary mb-2\">Forgot password?</h2>\n            <p className=\"text-cmo-text-secondary\">No worries, we'll send you reset instructions.</p>\n          </div>\n\n          {/* Reset Form */}\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            {/* Email Field */}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"Enter your email\"\n                className=\"h-11 border-gray-300 focus:border-gray-500\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                disabled={loading}\n                required\n              />\n            </div>\n\n            {/* Reset Button */}\n            <Button \n              type=\"submit\" \n              className=\"w-full h-11 bg-cmo-primary hover:bg-cmo-primary/90\"\n              disabled={loading}\n            >\n              {loading ? (\n                <>\n                  <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                  Sending...\n                </>\n              ) : (\n                'Reset password'\n              )}\n            </Button>\n\n            {/* Back to Login */}\n            <div className=\"text-center\">\n              <Link href=\"/login\">\n                <Button variant=\"link\" className=\"p-0 h-auto text-sm text-gray-600 hover:text-gray-800\">\n                  <ArrowLeft className=\"w-4 h-4 mr-1\" />\n                  Back to log in\n                </Button>\n              </Link>\n            </div>\n          </form>\n\n          {/* Footer */}\n          <div className=\"mt-8 text-center\">\n            <p className=\"text-sm text-gray-500 mb-4\">© 2024 CP Inc. All rights reserved.</p>\n            <div className=\"flex justify-center space-x-6 text-sm text-gray-500\">\n              <Link href=\"/privacy-policy\">\n                <Button variant=\"link\" className=\"p-0 h-auto text-sm text-gray-500 hover:text-gray-700\">\n                  Privacy Policy\n                </Button>\n              </Link>\n              <Link href=\"/terms-conditions\">\n                <Button variant=\"link\" className=\"p-0 h-auto text-sm text-gray-500 hover:text-gray-700\">\n                  Terms & Conditions\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":7035},"client/src/pages/home.tsx":{"content":"import React from \"react\";\nimport Header from \"../components/layout/header\";\nimport SidebarLeft from \"../components/layout/sidebar-left\";\nimport SidebarRight from \"../components/layout/sidebar-right\";\nimport QuestionCard from \"../components/question-card\";\nimport AnswerCard from \"../components/answer-card\";\nimport MobileNavigation from \"../components/mobile-navigation\";\nimport { Button } from \"../components/ui/button\";\nimport { Input } from \"../components/ui/input\";\nimport { Link } from \"wouter\";\nimport { Shield } from \"lucide-react\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"../components/ui/avatar\";\nimport { mockQuestions, mockUsers } from \"../lib/mock-data\";\nimport { useIsMobile } from \"../hooks/use-mobile\";\n\nexport default function Home() {\n  const isMobile = useIsMobile();\n\n  return (\n    <div className=\"min-h-screen bg-cmo-bg-main\">\n      <Header />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n        <div className=\"lg:grid lg:grid-cols-12 lg:gap-4\">\n          \n          {/* Left Sidebar - Desktop Only */}\n          {!isMobile && (\n            <div className=\"hidden lg:block lg:col-span-3\">\n              <SidebarLeft />\n            </div>\n          )}\n\n          {/* Main Content Area */}\n          <div className=\"lg:col-span-6\">\n            {/* Security Dashboard Link */}\n            <div className=\"mb-4\">\n              <div className=\"bg-gradient-to-r from-blue-50 to-indigo-50 border border-blue-200 rounded-lg p-3\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"bg-blue-600 rounded-lg p-2\">\n                      <Shield className=\"w-5 h-5 text-white\" />\n                    </div>\n                    <div>\n                      <h3 className=\"font-medium text-sm text-gray-900\">AI Security Recommendations</h3>\n                      <p className=\"text-xs text-gray-600\">Get personalized security insights for your company</p>\n                    </div>\n                  </div>\n                  <Link href=\"/security\">\n                    <Button variant=\"outline\" size=\"sm\">\n                      View Dashboard\n                    </Button>\n                  </Link>\n                </div>\n              </div>\n            </div>\n\n            {/* Mobile Category Filters */}\n            {isMobile && (\n              <div className=\"lg:hidden mb-4\">\n                <div className=\"flex space-x-2 overflow-x-auto pb-2\">\n                  <Button variant=\"default\" size=\"sm\" className=\"flex-shrink-0 rounded-full bg-cmo-primary text-white\">\n                    All (20)\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\" className=\"flex-shrink-0 rounded-full\">\n                    My Peers (18)\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\" className=\"flex-shrink-0 rounded-full\">\n                    My Experts\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\" className=\"flex-shrink-0 rounded-full\">\n                    Modern Marketing (5)\n                  </Button>\n                </div>\n              </div>\n            )}\n\n            {/* Question Input */}\n            <div className=\"bg-cmo-card rounded-lg border border-cmo-border p-3 mb-4\">\n              <div className=\"flex items-center space-x-3\">\n                <Avatar className=\"w-10 h-10\">\n                  <AvatarImage src=\"https://images.unsplash.com/photo-1560250097-0b93528c311a?ixlib=rb-4.0.3&auto=format&fit=crop&w=100&h=100\" />\n                  <AvatarFallback>U</AvatarFallback>\n                </Avatar>\n                <Input \n                  placeholder=\"Ask a question\" \n                  className=\"flex-1 rounded-full bg-gray-50 border-0 focus:ring-2 focus:ring-cmo-primary\"\n                />\n              </div>\n            </div>\n\n            {/* Questions and Answers */}\n            <div className=\"space-y-4\">\n              {mockQuestions.map((question, index) => {\n                const author = mockUsers.find(user => user.id === question.authorId);\n                if (!author) return null;\n\n                return (\n                  <div key={question.id}>\n                    <QuestionCard question={question} author={author} />\n                    \n                    {/* Show answer for first question */}\n                    {index === 0 && (\n                      <div className=\"ml-6 mt-4\">\n                        <AnswerCard \n                          answer={{\n                            id: \"1\",\n                            content: \"We are a series A B2B startup with a custom solution today. We are using @Mixpanel and working with @Division of Labor to rebuild our pages. @Jennifer Smith, Would love your thoughts as well.\",\n                            questionId: question.id,\n                            authorId: \"2\",\n                            author: mockUsers[1],\n                            createdAt: new Date(),\n                            updatedAt: new Date(),\n                            upvotes: 3,\n                            downvotes: 0\n                          }}\n                          author={mockUsers[1]}\n                        />\n                      </div>\n                    )}\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n\n          {/* Right Sidebar - Desktop Only */}\n          {!isMobile && (\n            <div className=\"hidden lg:block lg:col-span-3\">\n              <SidebarRight />\n            </div>\n          )}\n          \n        </div>\n      </div>\n\n      {/* Mobile Bottom Navigation */}\n      {isMobile && <MobileNavigation />}\n    </div>\n  );\n}\n","size_bytes":5755},"client/src/pages/login.tsx":{"content":"import React, { useState } from 'react';\nimport { Link, useLocation } from 'wouter';\nimport { Button } from '../components/ui/button';\nimport { Input } from '../components/ui/input';\nimport { Label } from '../components/ui/label';\nimport { Checkbox } from '../components/ui/checkbox';\nimport { Card, CardContent } from '../components/ui/card';\nimport { Eye, EyeOff, Loader2 } from 'lucide-react';\nimport { signInWithGoogle, signInWithEmail } from '../lib/firebase';\nimport { useToast } from '../hooks/use-toast';\n\nexport function LoginPage() {\n  const [showPassword, setShowPassword] = useState(false);\n  const [rememberMe, setRememberMe] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [googleLoading, setGoogleLoading] = useState(false);\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [formData, setFormData] = useState({\n    email: \"\",\n    password: \"\",\n  });\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n\n    try {\n      await signInWithEmail(formData.email, formData.password);\n      \n      // Handle remember me functionality\n      if (rememberMe) {\n        localStorage.setItem('rememberMe', 'true');\n      } else {\n        localStorage.removeItem('rememberMe');\n      }\n\n      toast({\n        title: \"Welcome back!\",\n        description: \"Successfully signed in to your account.\",\n      });\n\n      // Redirect to home page\n      setLocation(\"/\");\n    } catch (error: any) {\n      console.error(\"Login error:\", error);\n      toast({\n        title: \"Login failed\",\n        description: error.message || \"Invalid email or password. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleGoogleSignin = async () => {\n    setGoogleLoading(true);\n\n    try {\n      await signInWithGoogle();\n      \n      toast({\n        title: \"Welcome!\",\n        description: \"Successfully signed in with Google.\",\n      });\n\n      // Redirect to home page\n      setLocation(\"/\");\n    } catch (error: any) {\n      console.error(\"Google signin error:\", error);\n      toast({\n        title: \"Google signin failed\",\n        description: error.message || \"Something went wrong. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setGoogleLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col lg:flex-row\">\n      {/* Left Side - Hero Section */}\n      <div className=\"flex-1 bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-100 relative overflow-hidden lg:flex hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-cmo-primary/10 to-purple-600/20\"></div>\n        \n        {/* Geometric Background Pattern */}\n        <div className=\"absolute inset-0 opacity-20\">\n          <svg className=\"w-full h-full\" viewBox=\"0 0 400 400\" fill=\"none\">\n            <defs>\n              <pattern id=\"hexagons\" x=\"0\" y=\"0\" width=\"50\" height=\"43.4\" patternUnits=\"userSpaceOnUse\">\n                <path d=\"M25 0L50 14.4V35.6L25 50L0 35.6V14.4L25 0Z\" stroke=\"currentColor\" strokeWidth=\"1\" fill=\"none\"/>\n              </pattern>\n            </defs>\n            <rect width=\"100%\" height=\"100%\" fill=\"url(#hexagons)\" className=\"text-cmo-primary/30\"/>\n          </svg>\n        </div>\n\n        <div className=\"relative z-10 flex items-center justify-center w-full p-8\">\n          <div className=\"text-center max-w-md\">\n            <h1 className=\"text-lg font-bold text-gray-800 mb-4\">\n              Professional network for construction industry\n            </h1>\n            <p className=\"text-sm sm:text-base text-gray-600 leading-relaxed\">\n              Connect with construction professionals, engineers, and project managers.\n              Build your professional network in the construction sector.\n            </p>\n          </div>\n        </div>\n\n        {/* Navigation Dots */}\n        <div className=\"absolute bottom-8 left-1/2 transform -translate-x-1/2 flex space-x-2\">\n          <div className=\"w-2 h-2 bg-cmo-primary rounded-full\"></div>\n          <div className=\"w-2 h-2 bg-gray-300 rounded-full\"></div>\n          <div className=\"w-2 h-2 bg-gray-300 rounded-full\"></div>\n        </div>\n      </div>\n\n      {/* Right Side - Login Form */}\n      <div className=\"flex-1 flex items-center justify-center p-3 sm:p-6 bg-white min-h-screen lg:min-h-auto relative\">\n        <div className=\"w-full max-w-sm\">\n          {/* Mobile Header - Only visible on mobile */}\n          <div className=\"lg:hidden text-center mb-6\">\n            <h1 className=\"text-sm font-bold text-gray-800 mb-2\">\n              Welcome to CP\n            </h1>\n            <p className=\"text-sm text-gray-600\">\n              Professional network for construction industry\n            </p>\n          </div>\n\n          {/* Logo */}\n          <div className=\"flex items-center mb-6\">\n            <div className=\"w-8 h-8 bg-cmo-primary rounded-lg flex items-center justify-center mr-3\">\n              <div className=\"w-4 h-4 bg-white rounded-sm\"></div>\n            </div>\n            <span className=\"text-sm font-bold text-cmo-text-primary\">CP</span>\n          </div>\n\n          {/* Form Header */}\n          <div className=\"mb-6\">\n            <h2 className=\"text-lg font-bold text-cmo-text-primary mb-2\">Sign in</h2>\n            <p className=\"text-cmo-text-secondary\">Welcome back! Please enter your details.</p>\n          </div>\n\n          {/* Login Form */}\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            {/* Email Field */}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                name=\"email\"\n                type=\"email\"\n                placeholder=\"Enter your email\"\n                className=\"h-11\"\n                value={formData.email}\n                onChange={handleInputChange}\n                required\n              />\n            </div>\n\n            {/* Password Field */}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"password\"\n                  name=\"password\"\n                  type={showPassword ? \"text\" : \"password\"}\n                  placeholder=\"Enter your password\"\n                  className=\"h-11 pr-10\"\n                  value={formData.password}\n                  onChange={handleInputChange}\n                  required\n                />\n                <button\n                  type=\"button\"\n                  onClick={() => setShowPassword(!showPassword)}\n                  className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n                >\n                  {showPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                </button>\n              </div>\n            </div>\n\n            {/* Remember Me & Forgot Password */}\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id=\"remember\"\n                  checked={rememberMe}\n                  onCheckedChange={(checked) => setRememberMe(checked === true)}\n                />\n                <Label htmlFor=\"remember\" className=\"text-sm\">Remember for 30 days</Label>\n              </div>\n              <Link href=\"/forgot-password\">\n                <Button variant=\"link\" className=\"p-0 h-auto text-sm text-red-500 hover:text-red-600\">\n                  Forgot password\n                </Button>\n              </Link>\n            </div>\n\n            {/* Sign In Button */}\n            <Button \n              type=\"submit\" \n              className=\"w-full h-11 bg-cmo-primary hover:bg-cmo-primary/90\"\n              disabled={loading}\n            >\n              {loading ? (\n                <>\n                  <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                  Signing in...\n                </>\n              ) : (\n                \"Sign in\"\n              )}\n            </Button>\n\n            {/* Social Login */}\n            <div className=\"space-y-3\">\n              <div className=\"relative\">\n                <div className=\"absolute inset-0 flex items-center\">\n                  <span className=\"w-full border-t border-gray-200\" />\n                </div>\n                <div className=\"relative flex justify-center text-xs uppercase\">\n                  <span className=\"bg-white px-2 text-gray-500\">OR SIGN IN WITH</span>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-3\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  className=\"h-10 text-gray-700 border-gray-200 hover:bg-gray-50 justify-center\"\n                  onClick={handleGoogleSignin}\n                  disabled={googleLoading}\n                >\n                  {googleLoading ? (\n                    <Loader2 className=\"w-5 h-5 mr-2 animate-spin\" />\n                  ) : (\n                    <svg className=\"w-5 h-5 mr-2\" viewBox=\"0 0 24 24\">\n                      <path fill=\"#4285F4\" d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"/>\n                      <path fill=\"#34A853\" d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"/>\n                      <path fill=\"#FBBC05\" d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"/>\n                      <path fill=\"#EA4335\" d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"/>\n                    </svg>\n                  )}\n                  Google\n                </Button>\n\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  className=\"h-10 text-gray-700 border-gray-200 hover:bg-gray-50 justify-center\"\n                >\n                  <svg className=\"w-5 h-5 mr-2\" fill=\"#1877F2\" viewBox=\"0 0 24 24\">\n                    <path d=\"M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z\"/>\n                  </svg>\n                  Facebook\n                </Button>\n              </div>\n            </div>\n\n            {/* Sign Up Link */}\n            <div className=\"text-center\">\n              <span className=\"text-sm text-gray-500\">Create an account? </span>\n              <Link href=\"/signup\">\n                <Button variant=\"link\" className=\"p-0 h-auto text-sm font-semibold\">\n                  SignUp\n                </Button>\n              </Link>\n            </div>\n          </form>\n        </div>\n        \n        {/* Footer - Outside form container, at bottom of page */}\n        <div className=\"absolute bottom-6 left-4 right-4\">\n          <div className=\"flex justify-between items-center text-xs text-gray-500\">\n            <span>© 2024 CP Inc. All rights reserved.</span>\n            <div className=\"flex space-x-4\">\n              <Link href=\"/privacy-policy\" className=\"hover:text-gray-700\">\n                Privacy Policy\n              </Link>\n              <Link href=\"/terms-conditions\" className=\"hover:text-gray-700\">\n                Terms & Conditions\n              </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":12001},"client/src/pages/messages.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Link, useLocation } from 'wouter';\nimport Header from '../components/layout/header';\nimport MobileNavigation from '../components/mobile-navigation';\nimport { useIsMobile } from '../hooks/use-mobile';\nimport { MessageSquare, Plus, Search, ArrowLeft } from 'lucide-react';\nimport { format } from 'date-fns';\nimport { useConversations, useCreateConversation, useChatUsers, useChat, useBlockingStatus } from '../hooks/useChat';\nimport { Avatar, AvatarFallback, AvatarImage } from '../components/ui/avatar';\nimport { Button } from '../components/ui/button';\nimport { Input } from '../components/ui/input';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '../components/ui/dialog';\nimport { auth } from '../lib/firebase';\nimport { userApiService, UserProfile } from '../lib/userApi';\nimport { ChatHeader } from '../components/chat/ChatHeader';\nimport { MessageList } from '../components/chat/MessageList';\nimport { MessageInput } from '../components/chat/MessageInput';\nimport { Conversation } from '../types/chat';\n\nexport const MessagesPage: React.FC = () => {\n  const { conversations, loading } = useConversations();\n  const { createConversation } = useCreateConversation();\n  const { users: chatUsers } = useChatUsers();\n  const [, setLocation] = useLocation();\n  const isMobile = useIsMobile();\n  const [userProfiles, setUserProfiles] = useState<{ [uid: string]: UserProfile }>({});\n  const [selectedConversation, setSelectedConversation] = useState<Conversation | null>(null);\n  const [selectedUser, setSelectedUser] = useState<{ displayName: string; photoURL?: string; username?: string; isOnline?: boolean } | null>(null);\n  const [selectedUserId, setSelectedUserId] = useState<string | null>(null);\n  const [showChat, setShowChat] = useState(false); // For mobile view\n\n  // Chat hook for the selected conversation\n  const {\n    messages,\n    loading: messagesLoading,\n    hasMore,\n    sendMessage,\n    sendMediaMessage,\n    loadMoreMessages\n  } = useChat(selectedConversation?.id);\n\n  // Blocking status for selected user\n  const { isBlockedByMe, isBlockedByThem } = useBlockingStatus(selectedUserId || undefined);\n\n\n  // Fetch user profiles for all conversation participants\n  useEffect(() => {\n    const fetchUserProfiles = async () => {\n      const userIds = new Set<string>();\n      \n      conversations.forEach(conversation => {\n        conversation.participants.forEach(uid => {\n          if (uid !== auth.currentUser?.uid) {\n            userIds.add(uid);\n          }\n        });\n      });\n\n      const profiles: { [uid: string]: UserProfile } = {};\n      \n      for (const uid of Array.from(userIds)) {\n        try {\n          const chatInfo = await userApiService.getChatUserInfo(uid);\n          // Convert chat info to UserProfile format for compatibility\n          profiles[uid] = {\n            uid: chatInfo.uid,\n            firstName: chatInfo.firstName,\n            lastName: chatInfo.lastName,\n            photoUrl: chatInfo.photoUrl,\n            username: chatInfo.username,\n            email: '', // Not needed for chat display\n            hasBasicInfo: true,\n            isActive: false\n          } as UserProfile;\n        } catch (error) {\n          console.error(`Error fetching chat info for user ${uid}:`, error);\n        }\n      }\n      \n      setUserProfiles(profiles);\n    };\n\n    if (conversations.length > 0) {\n      fetchUserProfiles();\n    }\n  }, [conversations]);\n\n  const handleStartChat = async (otherUserId: string) => {\n    try {\n      const conversationId = await createConversation(otherUserId);\n      // Find the conversation and select it\n      const conversation = conversations.find(c => c.id === conversationId);\n      if (conversation) {\n        handleSelectConversation(conversation);\n      }\n    } catch (error) {\n      console.error('Error creating conversation:', error);\n    }\n  };\n\n  const handleSelectConversation = async (conversation: Conversation) => {\n    setSelectedConversation(conversation);\n    \n    // Find the other user and fetch their profile\n    const otherUserId = conversation.participants.find(\n      uid => uid !== auth.currentUser?.uid\n    );\n    \n    if (otherUserId) {\n      setSelectedUserId(otherUserId);\n      try {\n        const chatUserInfo = await userApiService.getChatUserInfo(otherUserId);\n        setSelectedUser({\n          displayName: `${chatUserInfo.firstName} ${chatUserInfo.lastName}`.trim(),\n          photoURL: chatUserInfo.photoUrl,\n          username: chatUserInfo.username,\n          isOnline: false\n        });\n      } catch (error) {\n        console.error('Error fetching selected user info:', error);\n        setSelectedUser({\n          displayName: `User ${otherUserId.slice(0, 8)}`,\n          photoURL: undefined,\n          username: undefined,\n          isOnline: false\n        });\n      }\n    }\n    \n    if (isMobile) {\n      setShowChat(true);\n    }\n  };\n\n  if (isMobile && showChat && selectedConversation && selectedUser) {\n    return (\n      <div className=\"min-h-screen bg-cmo-bg-main\">\n        <Header />\n        \n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"flex flex-col h-[calc(100vh-6rem)] bg-white dark:bg-gray-900 border border-cmo-border rounded-lg m-2 sm:m-4\">\n            {/* Mobile chat header with back button */}\n            <div className=\"flex items-center justify-between p-3 border-b border-cmo-border bg-white dark:bg-gray-900\">\n              <div className=\"flex items-center space-x-2\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setShowChat(false)}\n                >\n                  <ArrowLeft className=\"w-4 h-4\" />\n                </Button>\n                \n                <Avatar className=\"w-10 h-10\">\n                  <AvatarImage src={selectedUser.photoURL} />\n                  <AvatarFallback>\n                    {selectedUser.displayName.split(' ').map(n => n[0]).join('')}\n                  </AvatarFallback>\n                </Avatar>\n                \n                <div>\n                  <h3 className=\"font-medium text-sm text-cmo-text-primary\">{selectedUser.displayName}</h3>\n                  {selectedUser.isOnline && (\n                    <p className=\"text-sm text-green-500\">Online</p>\n                  )}\n                  {!selectedUser.isOnline && (\n                    <p className=\"text-sm text-cmo-text-secondary\">Last seen recently</p>\n                  )}\n                </div>\n              </div>\n            </div>\n            \n            <MessageList\n              messages={messages}\n              loading={messagesLoading}\n              hasMore={hasMore}\n              otherUser={selectedUser}\n              onLoadMore={loadMoreMessages}\n            />\n            \n            <MessageInput\n              onSendMessage={sendMessage}\n              onSendMedia={sendMediaMessage}\n              isBlocked={isBlockedByMe || isBlockedByThem}\n              blockMessage={\n                isBlockedByMe \n                  ? \"You blocked this user\" \n                  : isBlockedByThem \n                  ? \"You are blocked by this user\" \n                  : undefined\n              }\n            />\n          </div>\n        </div>\n        \n        <MobileNavigation />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-cmo-bg-main\">\n      <Header />\n      \n      <div className=\"max-w-7xl mx-auto p-4\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <div className=\"flex items-center space-x-2\">\n            <MessageSquare className=\"w-6 h-6 text-cmo-primary\" />\n            <h1 className=\"text-lg font-bold text-cmo-text-primary\">Messages</h1>\n          </div>\n          \n          <Dialog>\n            <DialogTrigger asChild>\n              <Button className=\"flex items-center space-x-2\">\n                <Plus className=\"w-4 h-4\" />\n                <span>New Chat</span>\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>Start New Conversation</DialogTitle>\n              </DialogHeader>\n              <div className=\"space-y-4\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-cmo-text-secondary w-4 h-4\" />\n                  <Input\n                    placeholder=\"Search users...\"\n                    className=\"pl-10\"\n                  />\n                </div>\n                \n                <div className=\"space-y-2 max-h-60 overflow-y-auto\">\n                  {chatUsers.map((user) => (\n                    <div\n                      key={user.uid}\n                      className=\"flex items-center space-x-3 p-2 hover:bg-gray-50 rounded-lg cursor-pointer\"\n                      onClick={() => handleStartChat(user.uid)}\n                    >\n                      <Avatar className=\"w-10 h-10\">\n                        <AvatarImage src={user.photoURL} />\n                        <AvatarFallback>\n                          {user.displayName.split(' ').map(n => n[0]).join('')}\n                        </AvatarFallback>\n                      </Avatar>\n                      <div>\n                        <p className=\"font-medium text-cmo-text-primary\">{user.displayName}</p>\n                      </div>\n                    </div>\n                  ))}\n                  \n                  {chatUsers.length === 0 && (\n                    <p className=\"text-center text-cmo-text-secondary py-4\">\n                      No users available to chat with\n                    </p>\n                  )}\n                </div>\n              </div>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {/* Split screen layout - Desktop and Tablet only */}\n        <div className=\"hidden md:flex bg-white dark:bg-gray-900 rounded-lg border border-cmo-border h-[calc(100vh-12rem)]\">\n          {/* Left side - Conversations list */}\n          <div className=\"w-1/3 border-r border-cmo-border flex flex-col\">\n            <div className=\"p-4 border-b border-cmo-border\">\n              <h2 className=\"font-semibold text-cmo-text-primary\">Conversations</h2>\n            </div>\n            \n            <div className=\"flex-1 overflow-y-auto\">\n              {loading ? (\n                <div className=\"p-8 text-center\">\n                  <p className=\"text-cmo-text-secondary\">Loading conversations...</p>\n                </div>\n              ) : conversations.length === 0 ? (\n                <div className=\"p-8 text-center\">\n                  <MessageSquare className=\"w-12 h-12 text-cmo-text-secondary mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-medium text-cmo-text-primary mb-2\">No conversations yet</h3>\n                  <p className=\"text-cmo-text-secondary mb-4\">\n                    Start your first conversation by clicking \"New Chat\"\n                  </p>\n                </div>\n              ) : (\n                <div className=\"divide-y divide-cmo-border\">\n                  {conversations.map((conversation) => {\n                    const otherUserId = conversation.participants.find(\n                      uid => uid !== auth.currentUser?.uid\n                    );\n                    \n                    const otherUserProfile = otherUserId ? userProfiles[otherUserId] : null;\n                    const displayName = otherUserProfile \n                      ? `${otherUserProfile.firstName} ${otherUserProfile.lastName}`\n                      : `User ${otherUserId?.slice(0, 8)}`;\n                    const avatarUrl = otherUserProfile?.photoUrl || otherUserProfile?.profilePic;\n                    \n                    const isSelected = selectedConversation?.id === conversation.id;\n                    \n                    return (\n                      <div\n                        key={conversation.id}\n                        className={`flex items-center space-x-4 p-4 hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors cursor-pointer ${\n                          isSelected ? 'bg-blue-50 dark:bg-blue-900/20' : ''\n                        }`}\n                        onClick={() => handleSelectConversation(conversation)}\n                      >\n                        <Avatar className=\"w-12 h-12\">\n                          <AvatarImage src={avatarUrl || \"\"} />\n                          <AvatarFallback>\n                            {otherUserProfile \n                              ? `${otherUserProfile.firstName?.[0] || ''}${otherUserProfile.lastName?.[0] || ''}`\n                              : (otherUserId ? otherUserId.slice(0, 2).toUpperCase() : 'U')\n                            }\n                          </AvatarFallback>\n                        </Avatar>\n                        \n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"flex items-center justify-between mb-1\">\n                            <h3 className=\"font-medium text-cmo-text-primary truncate\">\n                              {displayName}\n                            </h3>\n                            <span className=\"text-sm text-cmo-text-secondary\">\n                              {format(conversation.lastMessageTime, 'MMM d')}\n                            </span>\n                          </div>\n                          \n                          <p className=\"text-sm text-cmo-text-secondary truncate\">\n                            {conversation.lastMessage || 'No messages yet'}\n                          </p>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Right side - Chat messages */}\n          <div className=\"flex-1 flex flex-col\">\n            {selectedConversation && selectedUser ? (\n              <>\n                <ChatHeader otherUser={selectedUser} otherUserId={selectedUserId || undefined} />\n                \n                <MessageList\n                  messages={messages}\n                  loading={messagesLoading}\n                  hasMore={hasMore}\n                  otherUser={selectedUser}\n                  onLoadMore={loadMoreMessages}\n                />\n                \n                <MessageInput\n                  onSendMessage={sendMessage}\n                  onSendMedia={sendMediaMessage}\n                  isBlocked={isBlockedByMe || isBlockedByThem}\n                  blockMessage={\n                    isBlockedByMe \n                      ? \"You blocked this user\" \n                      : isBlockedByThem \n                      ? \"You are blocked by this user\" \n                      : undefined\n                  }\n                />\n              </>\n            ) : (\n              <div className=\"flex-1 flex items-center justify-center\">\n                <div className=\"text-center\">\n                  <MessageSquare className=\"w-16 h-16 text-cmo-text-secondary mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-medium text-cmo-text-primary mb-2\">Select a conversation</h3>\n                  <p className=\"text-cmo-text-secondary\">\n                    Choose a conversation from the left to start messaging\n                  </p>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n      \n        {/* Mobile single screen design */}\n        <div className=\"md:hidden\">\n          {!showChat ? (\n            /* Mobile conversations list */\n            <div className=\"bg-white dark:bg-gray-900 rounded-lg border border-cmo-border mx-4 mb-4\">\n              <div className=\"p-4 border-b border-cmo-border\">\n                <h2 className=\"font-semibold text-cmo-text-primary\">Conversations</h2>\n              </div>\n              \n              <div className=\"max-h-96 overflow-y-auto\">\n                {loading ? (\n                  <div className=\"p-8 text-center\">\n                    <p className=\"text-cmo-text-secondary\">Loading conversations...</p>\n                  </div>\n                ) : conversations.length === 0 ? (\n                  <div className=\"p-8 text-center\">\n                    <MessageSquare className=\"w-12 h-12 text-cmo-text-secondary mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-medium text-cmo-text-primary mb-2\">No conversations yet</h3>\n                    <p className=\"text-cmo-text-secondary mb-4\">\n                      Start your first conversation by clicking \"New Chat\"\n                    </p>\n                  </div>\n                ) : (\n                  <div className=\"divide-y divide-cmo-border\">\n                    {conversations.map((conversation) => {\n                      const otherUserId = conversation.participants.find(\n                        uid => uid !== auth.currentUser?.uid\n                      );\n                      \n                      const otherUserProfile = otherUserId ? userProfiles[otherUserId] : null;\n                      const displayName = otherUserProfile \n                        ? `${otherUserProfile.firstName} ${otherUserProfile.lastName}`\n                        : `User ${otherUserId?.slice(0, 8)}`;\n                      const avatarUrl = otherUserProfile?.photoUrl || otherUserProfile?.profilePic;\n                      \n                      return (\n                        <div\n                          key={conversation.id}\n                          className=\"flex items-center space-x-4 p-4 hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors cursor-pointer\"\n                          onClick={() => handleSelectConversation(conversation)}\n                        >\n                          <Avatar className=\"w-12 h-12\">\n                            <AvatarImage src={avatarUrl || \"\"} />\n                            <AvatarFallback>\n                              {otherUserProfile \n                                ? `${otherUserProfile.firstName?.[0] || ''}${otherUserProfile.lastName?.[0] || ''}`\n                                : (otherUserId ? otherUserId.slice(0, 2).toUpperCase() : 'U')\n                              }\n                            </AvatarFallback>\n                          </Avatar>\n                          \n                          <div className=\"flex-1 min-w-0\">\n                            <div className=\"flex items-center justify-between mb-1\">\n                              <h3 className=\"font-medium text-cmo-text-primary truncate\">\n                                {displayName}\n                              </h3>\n                              <span className=\"text-sm text-cmo-text-secondary\">\n                                {format(conversation.lastMessageTime, 'MMM d')}\n                              </span>\n                            </div>\n                            \n                            <p className=\"text-sm text-cmo-text-secondary truncate\">\n                              {conversation.lastMessage || 'No messages yet'}\n                            </p>\n                          </div>\n                        </div>\n                      );\n                    })}\n                  </div>\n                )}\n              </div>\n            </div>\n          ) : null}\n        </div>\n\n      {isMobile && <MobileNavigation />}\n    </div>\n  );\n};","size_bytes":19368},"client/src/pages/not-found.tsx":{"content":"import React from \"react\";\nimport { AlertCircle, Home } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { Button } from \"../components/ui/button\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <div className=\"w-full max-w-md mx-4 p-6 bg-white rounded-lg border border-gray-200\">\n        <div className=\"flex mb-4 gap-2\">\n          <AlertCircle className=\"h-8 w-8 text-red-500\" />\n          <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n        </div>\n        <p className=\"mt-4 text-sm text-gray-600 mb-6\">\n          The page you're looking for doesn't exist.\n        </p>\n        <Link href=\"/login\">\n          <Button className=\"w-full\">\n            <Home className=\"w-4 h-4 mr-2\" />\n            Go to Login\n          </Button>\n        </Link>\n      </div>\n    </div>\n  );\n}\n","size_bytes":910},"client/src/pages/password-reset-success.tsx":{"content":"import React from 'react';\nimport { Link } from 'wouter';\nimport { Button } from '../components/ui/button';\nimport { CheckCircle, ArrowLeft } from 'lucide-react';\n\nexport function PasswordResetSuccessPage() {\n  return (\n    <div className=\"min-h-screen flex flex-col lg:flex-row\">\n      {/* Left Side - Hero Section */}\n      <div className=\"flex-1 bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-100 relative overflow-hidden lg:flex hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-cmo-primary/10 to-purple-600/20\"></div>\n        \n        {/* Geometric Background Pattern */}\n        <div className=\"absolute inset-0 opacity-20\">\n          <svg className=\"w-full h-full\" viewBox=\"0 0 400 400\" fill=\"none\">\n            <defs>\n              <pattern id=\"hexagons\" x=\"0\" y=\"0\" width=\"50\" height=\"43.4\" patternUnits=\"userSpaceOnUse\">\n                <path d=\"M25 0L50 14.4V35.6L25 50L0 35.6V14.4L25 0Z\" stroke=\"currentColor\" strokeWidth=\"1\" fill=\"none\"/>\n              </pattern>\n            </defs>\n            <rect width=\"100%\" height=\"100%\" fill=\"url(#hexagons)\" className=\"text-cmo-primary/30\"/>\n          </svg>\n        </div>\n\n        <div className=\"relative z-10 flex items-center justify-center w-full p-12\">\n          <div className=\"text-center max-w-md\">\n            <h1 className=\"text-4xl font-bold text-gray-800 mb-6\">\n              Professional network for construction industry\n            </h1>\n            <p className=\"text-lg text-gray-600 leading-relaxed\">\n              Connect with construction professionals, engineers, and project managers.\n              Build your professional network in the construction sector.\n            </p>\n          </div>\n        </div>\n\n        {/* Navigation Dots */}\n        <div className=\"absolute bottom-8 left-1/2 transform -translate-x-1/2 flex space-x-2\">\n          <div className=\"w-2 h-2 bg-cmo-primary rounded-full\"></div>\n          <div className=\"w-2 h-2 bg-gray-300 rounded-full\"></div>\n          <div className=\"w-2 h-2 bg-gray-300 rounded-full\"></div>\n        </div>\n      </div>\n\n      {/* Right Side - Success Content */}\n      <div className=\"flex-1 flex items-center justify-center p-4 sm:p-8 bg-white min-h-screen lg:min-h-auto\">\n        <div className=\"w-full max-w-sm text-center\">\n          {/* Logo */}\n          <div className=\"flex items-center justify-center mb-8\">\n            <div className=\"w-8 h-8 bg-cmo-primary rounded-lg flex items-center justify-center mr-3\">\n              <div className=\"w-4 h-4 bg-white rounded-sm\"></div>\n            </div>\n            <span className=\"text-lg font-bold text-cmo-text-primary\">CP</span>\n          </div>\n\n          {/* Success Icon */}\n          <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-6\">\n            <CheckCircle className=\"w-8 h-8 text-green-600\" />\n          </div>\n\n          {/* Content */}\n          <div className=\"mb-8\">\n            <h2 className=\"text-lg font-bold text-cmo-text-primary mb-4\">Password reset successful!</h2>\n            <p className=\"text-cmo-text-secondary leading-relaxed\">\n              Your password has been successfully reset. You can now use your new password to log in to your account.\n            </p>\n          </div>\n\n          {/* Actions */}\n          <div className=\"space-y-4\">\n            <Link href=\"/login\">\n              <Button className=\"w-full h-11 bg-cmo-primary hover:bg-cmo-primary/90\">\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back to login\n              </Button>\n            </Link>\n          </div>\n\n          {/* Footer */}\n          <div className=\"mt-8 text-center\">\n            <p className=\"text-sm text-gray-500 mb-4\">© 2024 CP Inc. All rights reserved.</p>\n            <div className=\"flex justify-center space-x-6 text-sm text-gray-500\">\n              <Link href=\"/privacy-policy\">\n                <Button variant=\"link\" className=\"p-0 h-auto text-sm text-gray-500 hover:text-gray-700\">\n                  Privacy Policy\n                </Button>\n              </Link>\n              <Link href=\"/terms-conditions\">\n                <Button variant=\"link\" className=\"p-0 h-auto text-sm text-gray-500 hover:text-gray-700\">\n                  Terms & Conditions\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":4393},"client/src/pages/profile.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"../components/ui/button\";\nimport { Badge } from \"../components/ui/badge\";\nimport { Card, CardContent } from \"../components/ui/card\";\nimport { Separator } from \"../components/ui/separator\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"../components/ui/avatar\";\nimport { Textarea } from \"../components/ui/textarea\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"../components/ui/dropdown-menu\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"../components/ui/dialog\";\nimport { Input } from \"../components/ui/input\";\nimport { Label } from \"../components/ui/label\";\nimport {\n  Select as SelectUI,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"../components/ui/select\";\nimport { Combobox } from \"../components/ui/combobox\";\nimport { RadioGroup, RadioGroupItem } from \"../components/ui/radio-group\";\nimport Header from \"../components/layout/header\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport {\n  userApiService,\n  UserProfile,\n  Education,\n  Experience,\n  Project,\n} from \"../lib/userApi\";\n// Direct geo API calls\nconst GEO_API_BASE_URL = 'https://geo-api-230500065838.asia-south1.run.app';\nimport { useCreateConversation } from \"../hooks/useChat\";\nimport { useLocation } from \"wouter\";\nimport { useToast } from \"../hooks/use-toast\";\nimport { Loader2 } from \"lucide-react\";\nimport Select from \"react-select\";\nimport {\n  MapPin,\n  Mail,\n  Phone,\n  Globe,\n  Building,\n  Users,\n  MessageSquare,\n  ThumbsUp,\n  Star,\n  Plus,\n  MoreHorizontal,\n  Filter,\n  ChevronDown,\n  Bookmark,\n  Share,\n  Edit,\n  Flag,\n  Send,\n  Calendar,\n  GraduationCap,\n  Briefcase,\n  User,\n  FileText,\n  Trash2,\n  X,\n} from \"lucide-react\";\n\n// Constants from basic-info\nconst JOB_TITLES = [\n  'Architect',\n  'Urban Planner',\n  'Interior Designer/Architect',\n  'Landscape Architect/Designer',\n  'Sustainability Consultant',\n  'Draughtsman',\n  'Cad/BIM technician',\n  'Civil Engineer',\n  'Structural Engineer/Designer',\n  'Project Director',\n  'Construction Manager',\n  'Contracts Manager',\n  'MEP Engineer',\n  'Quality Control Engineer',\n  'Planning Engineer',\n  'Tendering Engineer',\n  'Project Engineer',\n  'Supervisor',\n  'Foreman',\n  'Site Engineer',\n  'Site Manager',\n  'Electrical Engineer',\n  'Geotechnical Engineer',\n  'Project Manager',\n  'Document Controller',\n  'Purchase Manager/Officer',\n  'Procurement Manager/Officer',\n  'Operations Manager',\n  'Trainee',\n  'Student',\n  'Intern',\n  'Project Coordinator',\n  'Projects Head',\n  'Supplier',\n  'Manufacturer',\n  'Builder',\n  'Contractor',\n  'Dealer',\n  'Agent',\n  'Surveyor',\n  'Valuer',\n  'Arbitrator',\n  'Lecturer',\n  'Professor',\n  'Other (Specify)',\n];\n\nconst COMPANY_TYPES = [\n  'Construction Contractor',\n  'Design & Engineering Services',\n  'Project Management & Consultancy',\n  'Cost & Quantity Services',\n  'Construction Material Suppliers',\n  'Construction Equipment & Machinery',\n  'Infrastructure & Utilities',\n  'Prefabrication & Modular Construction',\n  'Green & Sustainable Construction',\n  'Safety & Compliance',\n  'Technology & Software',\n  'Logistics & Support Services',\n  'Testing & Laboratory Services',\n];\n\nconst INDUSTRIES = [\n  'Construction',\n  'Real Estate',\n  'Infrastructure',\n  'Others',\n];\n\nconst COMPANY_SIZES = [\n  '1-10',\n  '10-50',\n  '50-100',\n  '100-500',\n  '500-1000',\n  '1000+',\n];\n\nconst mockActivities = [\n  {\n    id: \"1\",\n    type: \"question\",\n    title:\n      \"Do you have any experience with deploying @Hubspot for a SaaS business with both a direct and self-serve model?\",\n    content:\n      \"We have a $2M ARR B2B startup with a custom solution today. We are using @Mixpanel and working with @Division of Labor to rebuild our pages. @Jennifer Smith... See more\",\n    timestamp: \"Nov 19\",\n    category: \"Questions & Answers\",\n    engagement: { comments: 1, thanks: 5, insightful: 2 },\n  },\n  {\n    id: \"2\",\n    type: \"article\",\n    title: \"Looking for a new landing page optimization vendor\",\n    content:\n      \"We are looking for a landing page tool that they are missing a minimal with a custom solution that no... See more\",\n    timestamp: \"Nov 12\",\n    category: \"#Inbound #SaaS\",\n    engagement: { comments: 1, thanks: 15, insightful: 6 },\n  },\n];\n\nexport default function ProfilePage() {\n  const [activeFilter, setActiveFilter] = useState(\"All\");\n  const [expandedComments, setExpandedComments] = useState<{\n    [key: string]: boolean;\n  }>({});\n  const [commentText, setCommentText] = useState<{ [key: string]: string }>({});\n  const [profileData, setProfileData] = useState<UserProfile | null>(null);\n  const [loading, setLoading] = useState(true);\n  const { user, userProfile } = useAuth();\n  const { createConversation } = useCreateConversation();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  // Edit Profile Modal State\n  const [showEditProfileModal, setShowEditProfileModal] = useState(false);\n  const [editFormLoading, setEditFormLoading] = useState(false);\n  const [editFormData, setEditFormData] = useState({\n    // Personal fields\n    firstName: \"\",\n    lastName: \"\",\n    title: \"\",\n    positionDesignation: \"\",\n    currentCompany: \"\",\n    about: \"\",\n    gender: \"\",\n    dateOfBirth: \"\",\n    city: \"\",\n    stateName: \"\",\n    country: \"\",\n    // Business fields\n    companyName: \"\",\n    industry: \"\",\n    companyType: \"\",\n    description: \"\",\n    addressLine1: \"\",\n    addressLine2: \"\",\n    pincode: \"\",\n    website: \"\",\n    registrationNumber: \"\",\n    companySize: \"\",\n  });\n\n  // Location data state\n  const [countries, setCountries] = useState<{name: string, code: string}[]>([]);\n  const [states, setStates] = useState<{name: string, code: string}[]>([]);\n  const [cities, setCities] = useState<string[]>([]);\n  const [loadingLocations, setLoadingLocations] = useState(false);\n\n  // Education, Experience, Projects State\n  const [education, setEducation] = useState<Education[]>([]);\n  const [experience, setExperience] = useState<Experience[]>([]);\n  const [projects, setProjects] = useState<Project[]>([]);\n  const [educationLoading, setEducationLoading] = useState(false);\n  const [experienceLoading, setExperienceLoading] = useState(false);\n  const [projectsLoading, setProjectsLoading] = useState(false);\n\n  // Skills State\n  const [userSkills, setUserSkills] = useState<string[]>([]);\n  const [allSkills, setAllSkills] = useState<{ id: string; name: string }[]>(\n    [],\n  );\n  const [skillsLoading, setSkillsLoading] = useState(false);\n  const [skillsModalOpen, setSkillsModalOpen] = useState(false);\n  const [selectedSkills, setSelectedSkills] = useState<\n    { value: string; label: string }[]\n  >([]);\n  const [skillsSaving, setSkillsSaving] = useState(false);\n\n  // Suggestions State\n  const [suggestions, setSuggestions] = useState<UserProfile[]>([]);\n  const [suggestionsLoading, setSuggestionsLoading] = useState(false);\n  const [followingStatus, setFollowingStatus] = useState<{[key: string]: boolean}>({});\n  const [followLoading, setFollowLoading] = useState<{[key: string]: boolean}>({});\n  \n  // Contact Info State\n  const [showContactInfo, setShowContactInfo] = useState(false);\n\n  // Modal States for Education, Experience, Projects\n  const [showEducationModal, setShowEducationModal] = useState(false);\n  const [showExperienceModal, setShowExperienceModal] = useState(false);\n  const [showProjectModal, setShowProjectModal] = useState(false);\n  const [editingEducation, setEditingEducation] = useState<Education | null>(\n    null,\n  );\n  const [editingExperience, setEditingExperience] = useState<Experience | null>(\n    null,\n  );\n  const [editingProject, setEditingProject] = useState<Project | null>(null);\n  const [educationFormData, setEducationFormData] = useState<\n    Omit<Education, \"id\">\n  >({\n    degree: \"\",\n    fieldOfStudy: \"\",\n    schoolOrCollege: \"\",\n    startDate: \"\",\n    endDate: \"\",\n    grade: \"\",\n  });\n  const [experienceFormData, setExperienceFormData] = useState<\n    Omit<Experience, \"id\">\n  >({\n    companyName: \"\",\n    title: \"\",\n    employmentType: \"\",\n    location: \"\",\n    startDate: \"\",\n    endDate: \"\",\n    isCurrent: false,\n    description: \"\",\n  });\n  const [projectFormData, setProjectFormData] = useState<\n    Omit<Project, \"id\" | \"imageURLs\" | \"createdAt\" | \"updatedAt\">\n  >({\n    title: \"\",\n    description: \"\",\n    location: \"\",\n    tags: [],\n  });\n  const [projectImages, setProjectImages] = useState<File[]>([]);\n\n  const filters = [\"All\", \"News\", \"Posts\", \"Articles\", \"Videos\", \"Jobs\"];\n\n  const handleSendMessage = async () => {\n    if (!profileData || !user) return;\n\n    // Don't allow messaging yourself\n    if (user.uid === profileData.uid) {\n      toast({\n        title: \"Cannot message yourself\",\n        description: \"You cannot send a message to yourself.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      const conversationId = await createConversation(profileData.uid);\n      setLocation(`/chat/${conversationId}`);\n    } catch (error) {\n      console.error(\"Error creating conversation:\", error);\n      toast({\n        title: \"Failed to start conversation\",\n        description: \"Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    const fetchProfileData = async () => {\n      if (!user) return;\n\n      setLoading(true);\n      try {\n        const data = await userApiService.getCurrentUser(true);\n        console.log('Fetched profile data:', data); // Debug log\n        setProfileData(data);\n        // Populate edit form data based on user type\n        const isBusinessUser = (data as any).userType === \"business\";\n        const location = (data as any).location || {};\n        const businessProfile = (data as any).businessProfile || {};\n        const businessLocation = businessProfile.location || {};\n\n        setEditFormData({\n          // Personal fields\n          firstName: data.firstName || \"\",\n          lastName: data.lastName || \"\",\n          title: (data as any).title || (data as any).jobTitle || \"\",\n          positionDesignation:\n            (data as any).positionDesignation || (data as any).position || \"\",\n          currentCompany:\n            (data as any).currentCompany || (data as any).company || \"\",\n          about:\n            (data as any).about ||\n            (data as any).description ||\n            (data as any).bio ||\n            \"\",\n          gender: (data as any).gender || \"\",\n          dateOfBirth: (data as any).dateOfBirth || (data as any).dob || \"\",\n          city:\n            location.city || (data as any).city || businessLocation.city || \"\",\n          stateName:\n            location.state?.name ||\n            location.stateName ||\n            (data as any).stateName ||\n            (data as any).state ||\n            businessLocation.state?.name ||\n            \"\",\n          country:\n            location.country?.name ||\n            location.country ||\n            (data as any).country ||\n            businessLocation.country ||\n            \"\",\n          // Business fields\n          companyName: isBusinessUser\n            ? businessProfile.companyName || (data as any).companyName || \"\"\n            : \"\",\n          industry: isBusinessUser\n            ? businessProfile.industry || (data as any).industry || \"\"\n            : \"\",\n          companyType: isBusinessUser\n            ? businessProfile.companyType || (data as any).companyType || \"\"\n            : \"\",\n          description: isBusinessUser\n            ? businessProfile.description || (data as any).description || \"\"\n            : \"\",\n          addressLine1: isBusinessUser\n            ? businessProfile.addressLine1 ||\n              businessLocation.addressLine1 ||\n              \"\"\n            : \"\",\n          addressLine2: isBusinessUser\n            ? businessProfile.addressLine2 ||\n              businessLocation.addressLine2 ||\n              \"\"\n            : \"\",\n          pincode: isBusinessUser\n            ? businessProfile.pincode || businessLocation.pincode || \"\"\n            : \"\",\n          website: isBusinessUser\n            ? businessProfile.website || (data as any).website || \"\"\n            : \"\",\n          registrationNumber: isBusinessUser\n            ? businessProfile.registrationNumber ||\n              (data as any).registrationNumber ||\n              \"\"\n            : \"\",\n          companySize: isBusinessUser\n            ? businessProfile.companySize || (data as any).companySize || \"\"\n            : \"\",\n        });\n      } catch (error) {\n        console.error(\"Error fetching profile data:\", error);\n        // Fallback to context data if API fails\n        if (userProfile) {\n          setProfileData(userProfile);\n          const isBusinessUser = (userProfile as any).userType === \"business\";\n          const location = (userProfile as any).location || {};\n          const businessProfile = (userProfile as any).businessProfile || {};\n          const businessLocation = businessProfile.location || {};\n\n          setEditFormData({\n            // Personal fields\n            firstName: userProfile.firstName || \"\",\n            lastName: userProfile.lastName || \"\",\n            title:\n              (userProfile as any).title || (userProfile as any).jobTitle || \"\",\n            positionDesignation:\n              (userProfile as any).positionDesignation ||\n              (userProfile as any).position ||\n              \"\",\n            currentCompany:\n              (userProfile as any).currentCompany ||\n              (userProfile as any).company ||\n              \"\",\n            about:\n              (userProfile as any).about ||\n              (userProfile as any).description ||\n              (userProfile as any).bio ||\n              \"\",\n            gender: (userProfile as any).gender || \"\",\n            dateOfBirth:\n              (userProfile as any).dateOfBirth ||\n              (userProfile as any).dob ||\n              \"\",\n            city:\n              location.city ||\n              (userProfile as any).city ||\n              businessLocation.city ||\n              \"\",\n            stateName:\n              location.state?.name ||\n              location.stateName ||\n              (userProfile as any).stateName ||\n              (userProfile as any).state ||\n              businessLocation.state?.name ||\n              \"\",\n            country:\n              location.country?.name ||\n              location.country ||\n              (userProfile as any).country ||\n              businessLocation.country ||\n              \"\",\n            // Business fields\n            companyName: isBusinessUser\n              ? businessProfile.companyName ||\n                (userProfile as any).companyName ||\n                \"\"\n              : \"\",\n            industry: isBusinessUser\n              ? businessProfile.industry || (userProfile as any).industry || \"\"\n              : \"\",\n            companyType: isBusinessUser\n              ? businessProfile.companyType ||\n                (userProfile as any).companyType ||\n                \"\"\n              : \"\",\n            description: isBusinessUser\n              ? businessProfile.description ||\n                (userProfile as any).description ||\n                \"\"\n              : \"\",\n            addressLine1: isBusinessUser\n              ? businessProfile.addressLine1 ||\n                businessLocation.addressLine1 ||\n                \"\"\n              : \"\",\n            addressLine2: isBusinessUser\n              ? businessProfile.addressLine2 ||\n                businessLocation.addressLine2 ||\n                \"\"\n              : \"\",\n            pincode: isBusinessUser\n              ? businessProfile.pincode || businessLocation.pincode || \"\"\n              : \"\",\n            website: isBusinessUser\n              ? businessProfile.website || (userProfile as any).website || \"\"\n              : \"\",\n            registrationNumber: isBusinessUser\n              ? businessProfile.registrationNumber ||\n                (userProfile as any).registrationNumber ||\n                \"\"\n              : \"\",\n            companySize: isBusinessUser\n              ? businessProfile.companySize ||\n                (userProfile as any).companySize ||\n                \"\"\n              : \"\",\n          });\n        }\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchProfileData();\n  }, [user, userProfile]);\n\n  // Load Education, Experience, Projects\n  const loadEducation = async () => {\n    if (!profileData?.uid) return;\n    setEducationLoading(true);\n    try {\n      const educationData = await userApiService.getUserEducation(\n        profileData.uid,\n      );\n      setEducation(educationData || []);\n    } catch (error) {\n      console.error(\"Error loading education:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load education data\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setEducationLoading(false);\n    }\n  };\n\n  const loadExperience = async () => {\n    if (!profileData?.uid) return;\n    setExperienceLoading(true);\n    try {\n      const experienceData = await userApiService.getUserExperience(\n        profileData.uid,\n      );\n      setExperience(experienceData || []);\n    } catch (error) {\n      console.error(\"Error loading experience:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load experience data\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setExperienceLoading(false);\n    }\n  };\n\n  const loadProjects = async () => {\n    if (!profileData?.uid) return;\n    setProjectsLoading(true);\n    try {\n      const projectsData = await userApiService.getUserProjects(\n        profileData.uid,\n      );\n      setProjects(projectsData || []);\n    } catch (error) {\n      console.error(\"Error loading projects:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load projects data\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setProjectsLoading(false);\n    }\n  };\n\n  const loadSkills = async () => {\n    if (!profileData?.uid) return;\n    setSkillsLoading(true);\n    try {\n      // Load all skills and user skills in parallel\n      const [allSkillsData, userSkillsData] = await Promise.all([\n        userApiService.getAllSkills(),\n        userApiService.getUserSkills(profileData.uid),\n      ]);\n\n      // Ensure data is arrays\n      const skillsArray = Array.isArray(allSkillsData) ? allSkillsData : [];\n      \n      setAllSkills(skillsArray);\n      \n      // Update to handle the new API format\n      if (userSkillsData && userSkillsData.skills) {\n        // Store the skill names for display\n        setUserSkills(userSkillsData.skills.map(skill => skill.name));\n        \n        // Set selected skills for the modal using all skills data\n        const selectedSkillOptions = userSkillsData.skills\n          .map((userSkill) => {\n            const skill = skillsArray.find((s) => s.id === userSkill.skillId);\n            return { value: userSkill.skillId, label: userSkill.name };\n          })\n          .filter(Boolean);\n\n        setSelectedSkills(selectedSkillOptions);\n      } else {\n        setUserSkills([]);\n        setSelectedSkills([]);\n      }\n    } catch (error) {\n      console.error(\"Error loading skills:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load skills data\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setSkillsLoading(false);\n    }\n  };\n\n  const handleSkillsModalOpen = () => {\n    setSkillsModalOpen(true);\n    if (allSkills.length === 0) {\n      loadSkills();\n    }\n  };\n\n  const handleSkillsSave = async () => {\n    if (!profileData?.uid) return;\n\n    setSkillsSaving(true);\n    try {\n      const skillIds = selectedSkills.map((skill) => skill.value);\n      await userApiService.updateUserSkills(profileData.uid, skillIds);\n\n      // Update local state with skill names, not IDs\n      const skillNames = selectedSkills.map((skill) => skill.label);\n      setUserSkills(skillNames);\n      setSkillsModalOpen(false);\n\n      toast({\n        title: \"Skills updated\",\n        description: \"Your skills have been successfully updated.\",\n      });\n    } catch (error) {\n      console.error(\"Error updating skills:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to update skills\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setSkillsSaving(false);\n    }\n  };\n\n  useEffect(() => {\n    if (profileData?.uid) {\n      if ((profileData as any).userType !== \"business\") {\n        loadEducation();\n        loadExperience();\n        loadSkills();\n      }\n      loadProjects();\n      loadSuggestions();\n    }\n  }, [profileData?.uid, (profileData as any)?.userType]);\n\n  // Load countries on component mount\n  useEffect(() => {\n    loadCountries();\n  }, []);\n\n  const loadSuggestions = async () => {\n    setSuggestionsLoading(true);\n    try {\n      const suggestionsData = await userApiService.getUserSuggestions();\n      setSuggestions(suggestionsData || []);\n    } catch (error) {\n      console.error(\"Error loading suggestions:\", error);\n      // Fallback to empty array on error\n      setSuggestions([]);\n    } finally {\n      setSuggestionsLoading(false);\n    }\n  };\n\n  // Education Handlers\n  const handleAddEducation = () => {\n    setEditingEducation(null);\n    setEducationFormData({\n      degree: \"\",\n      fieldOfStudy: \"\",\n      schoolOrCollege: \"\",\n      startDate: \"\",\n      endDate: \"\",\n      grade: \"\",\n    });\n    setShowEducationModal(true);\n  };\n\n  const handleEditEducation = (edu: Education) => {\n    setEditingEducation(edu);\n    setEducationFormData({\n      degree: edu.degree,\n      fieldOfStudy: edu.fieldOfStudy,\n      schoolOrCollege: edu.schoolOrCollege,\n      startDate: edu.startDate,\n      endDate: edu.endDate,\n      grade: edu.grade,\n    });\n    setShowEducationModal(true);\n  };\n\n  const handleSaveEducation = async () => {\n    if (!profileData?.uid) return;\n    setEditFormLoading(true);\n    try {\n      if (editingEducation?.id) {\n        await userApiService.updateEducation(\n          profileData.uid,\n          editingEducation.id,\n          educationFormData,\n        );\n        toast({\n          title: \"Success\",\n          description: \"Education updated successfully\",\n        });\n      } else {\n        await userApiService.addEducation(profileData.uid, educationFormData);\n        toast({\n          title: \"Success\",\n          description: \"Education added successfully\",\n        });\n      }\n      setShowEducationModal(false);\n      loadEducation();\n    } catch (error) {\n      console.error(\"Error saving education:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to save education\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setEditFormLoading(false);\n    }\n  };\n\n  const handleDeleteEducation = async (educationId: string) => {\n    if (!profileData?.uid) return;\n    try {\n      await userApiService.deleteEducation(profileData.uid, educationId);\n      toast({\n        title: \"Success\",\n        description: \"Education deleted successfully\",\n      });\n      loadEducation();\n    } catch (error) {\n      console.error(\"Error deleting education:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete education\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Experience Handlers\n  const handleAddExperience = () => {\n    setEditingExperience(null);\n    setExperienceFormData({\n      companyName: \"\",\n      title: \"\",\n      employmentType: \"\",\n      location: \"\",\n      startDate: \"\",\n      endDate: \"\",\n      isCurrent: false,\n      description: \"\",\n    });\n    setShowExperienceModal(true);\n  };\n\n  const handleEditExperience = (exp: Experience) => {\n    setEditingExperience(exp);\n    setExperienceFormData({\n      companyName: exp.companyName,\n      title: exp.title,\n      employmentType: exp.employmentType,\n      location: exp.location,\n      startDate: exp.startDate,\n      endDate: exp.endDate,\n      isCurrent: exp.isCurrent,\n      description: exp.description,\n    });\n    setShowExperienceModal(true);\n  };\n\n  const handleSaveExperience = async () => {\n    if (!profileData?.uid) return;\n    setEditFormLoading(true);\n    try {\n      if (editingExperience?.id) {\n        await userApiService.updateExperience(\n          profileData.uid,\n          editingExperience.id,\n          experienceFormData,\n        );\n        toast({\n          title: \"Success\",\n          description: \"Experience updated successfully\",\n        });\n      } else {\n        await userApiService.addExperience(profileData.uid, experienceFormData);\n        toast({\n          title: \"Success\",\n          description: \"Experience added successfully\",\n        });\n      }\n      setShowExperienceModal(false);\n      loadExperience();\n    } catch (error) {\n      console.error(\"Error saving experience:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to save experience\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setEditFormLoading(false);\n    }\n  };\n\n  const handleDeleteExperience = async (experienceId: string) => {\n    if (!profileData?.uid) return;\n    try {\n      await userApiService.deleteExperience(profileData.uid, experienceId);\n      toast({\n        title: \"Success\",\n        description: \"Experience deleted successfully\",\n      });\n      loadExperience();\n    } catch (error) {\n      console.error(\"Error deleting experience:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete experience\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Projects Handlers\n  const handleAddProject = () => {\n    setEditingProject(null);\n    setProjectFormData({\n      title: \"\",\n      description: \"\",\n      location: \"\",\n      tags: [],\n    });\n    setProjectImages([]);\n    setShowProjectModal(true);\n  };\n\n  const handleEditProject = (project: Project) => {\n    setEditingProject(project);\n    setProjectFormData({\n      title: project.title,\n      description: project.description,\n      location: project.location || \"\",\n      tags: project.tags || [],\n    });\n    setProjectImages([]);\n    setShowProjectModal(true);\n  };\n\n  const handleSaveProject = async () => {\n    if (!profileData?.uid) return;\n    setEditFormLoading(true);\n    try {\n      if (editingProject?.id) {\n        await userApiService.updateProject(\n          profileData.uid,\n          editingProject.id,\n          projectFormData,\n        );\n        toast({\n          title: \"Success\",\n          description: \"Project updated successfully\",\n        });\n      } else {\n        await userApiService.addProject(\n          profileData.uid,\n          projectFormData,\n          projectImages,\n        );\n        toast({\n          title: \"Success\",\n          description: \"Project added successfully\",\n        });\n      }\n      setShowProjectModal(false);\n      loadProjects();\n    } catch (error) {\n      console.error(\"Error saving project:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to save project\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setEditFormLoading(false);\n    }\n  };\n\n  const handleDeleteProject = async (projectId: string) => {\n    if (!profileData?.uid) return;\n    try {\n      await userApiService.deleteProject(profileData.uid, projectId);\n      toast({\n        title: \"Success\",\n        description: \"Project deleted successfully\",\n      });\n      loadProjects();\n    } catch (error) {\n      console.error(\"Error deleting project:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete project\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const toggleComments = (postId: string) => {\n    setExpandedComments((prev) => ({\n      ...prev,\n      [postId]: !prev[postId],\n    }));\n  };\n\n  const handleCommentChange = (postId: string, text: string) => {\n    setCommentText((prev) => ({\n      ...prev,\n      [postId]: text,\n    }));\n  };\n\n  const handleSubmitComment = (postId: string) => {\n    console.log(`Comment for post ${postId}:`, commentText[postId]);\n    setCommentText((prev) => ({\n      ...prev,\n      [postId]: \"\",\n    }));\n  };\n\n  // Edit Profile Handlers\n  const handleEditFormSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!profileData || !user) return;\n\n    setEditFormLoading(true);\n\n    try {\n      const isBusinessUser = (profileData as any).userType === \"business\";\n      let updateData: any = {};\n\n      if (isBusinessUser) {\n        // Business profile update\n        updateData = {\n          businessProfile: {\n            companyName: editFormData.companyName,\n            industry: editFormData.industry,\n            companyType: editFormData.companyType,\n            description: editFormData.description,\n            addressLine1: editFormData.addressLine1,\n            addressLine2: editFormData.addressLine2,\n            pincode: editFormData.pincode,\n            website: editFormData.website,\n            registrationNumber: editFormData.registrationNumber,\n            companySize: editFormData.companySize,\n            location: {\n              city: editFormData.city,\n              state: { name: editFormData.stateName },\n              country: editFormData.country,\n            },\n          },\n        };\n      } else {\n        // Personal profile update\n        updateData = {\n          firstName: editFormData.firstName,\n          lastName: editFormData.lastName,\n          title: editFormData.title,\n          positionDesignation: editFormData.positionDesignation,\n          company: editFormData.currentCompany,\n          description: editFormData.about,\n          gender: editFormData.gender,\n          dateOfBirth: editFormData.dateOfBirth,\n          city: editFormData.city,\n          stateName: editFormData.stateName,\n          country: editFormData.country,\n        };\n      }\n\n      // Remove empty fields\n      const removeEmptyFields = (obj: any): any => {\n        if (obj === null || typeof obj !== \"object\") return obj;\n\n        if (Array.isArray(obj))\n          return obj\n            .map(removeEmptyFields)\n            .filter((v) => v !== null && v !== undefined && v !== \"\");\n\n        return Object.keys(obj).reduce((acc, key) => {\n          const value = obj[key];\n          if (value !== null && value !== undefined && value !== \"\") {\n            if (typeof value === \"object\") {\n              const cleaned = removeEmptyFields(value);\n              if (Object.keys(cleaned).length > 0) {\n                acc[key] = cleaned;\n              }\n            } else {\n              acc[key] = value;\n            }\n          }\n          return acc;\n        }, {} as any);\n      };\n\n      updateData = removeEmptyFields(updateData);\n\n      const updatedUser = await userApiService.updateUser(\n        profileData.uid,\n        updateData,\n      );\n      setProfileData(updatedUser);\n      setShowEditProfileModal(false);\n\n      toast({\n        title: \"Profile updated\",\n        description: \"Your profile has been successfully updated.\",\n      });\n    } catch (error: any) {\n      console.error(\"Error updating profile:\", error);\n      toast({\n        title: \"Failed to update profile\",\n        description: \"Please try again later.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setEditFormLoading(false);\n    }\n  };\n\n  const handleEditFormChange = (field: string, value: string) => {\n    setEditFormData((prev) => ({\n      ...prev,\n      [field]: value,\n    }));\n  };\n\n  // Location loading functions\n  const loadCountries = async () => {\n    try {\n      setLoadingLocations(true);\n      const response = await fetch(`${GEO_API_BASE_URL}/countries`);\n      \n      if (response.ok) {\n        const data = await response.json();\n        setCountries(data);\n      } else {\n        throw new Error('Failed to load countries');\n      }\n    } catch (error) {\n      console.error('Error loading countries:', error);\n      toast({\n        title: \"Error Loading Countries\",\n        description: \"Failed to load country data. Please refresh the page.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoadingLocations(false);\n    }\n  };\n\n  const loadStates = async (countryCode: string) => {\n    try {\n      setLoadingLocations(true);\n      const response = await fetch(`${GEO_API_BASE_URL}/states?country_code=${countryCode}`);\n      \n      if (response.ok) {\n        const data = await response.json();\n        setStates(data);\n      } else {\n        throw new Error('Failed to load states');\n      }\n    } catch (error) {\n      console.error('Error loading states:', error);\n      toast({\n        title: \"Error Loading States\",\n        description: \"Failed to load state data. Please try again.\",\n        variant: \"destructive\",\n      });\n      setStates([]);\n    } finally {\n      setLoadingLocations(false);\n    }\n  };\n\n  const loadCities = async (countryCode: string, stateCode: string) => {\n    try {\n      setLoadingLocations(true);\n      const response = await fetch(`${GEO_API_BASE_URL}/cities?country_code=${countryCode}&state_code=${stateCode}`);\n      \n      if (response.ok) {\n        const data = await response.json();\n        const citiesArray = Array.isArray(data) ? data : (data.data || []);\n        setCities(citiesArray);\n      } else {\n        throw new Error('Failed to load cities');\n      }\n    } catch (error) {\n      console.error('Error loading cities:', error);\n      toast({\n        title: \"Error Loading Cities\",\n        description: \"Failed to load city data. Please try again.\",\n        variant: \"destructive\",\n      });\n      setCities([]);\n    } finally {\n      setLoadingLocations(false);\n    }\n  };\n\n  // Function to populate edit form with existing data\n  const handleEditProfileClick = () => {\n    if (!profileData) return;\n    \n    // Debug: Log the profile data to see what fields are available\n    console.log('Profile data for edit:', profileData);\n    \n    const isBusinessUser = (profileData as any).userType === \"business\";\n    let newFormData;\n    \n    if (isBusinessUser) {\n      newFormData = {\n        // Business fields - check for nested businessProfile object\n        companyName: (profileData as any).businessProfile?.companyName || (profileData as any).companyName || \"\",\n        industry: (profileData as any).businessProfile?.industry || (profileData as any).industry || \"\",\n        companyType: (profileData as any).businessProfile?.companyType || (profileData as any).companyType || \"\",\n        description: (profileData as any).businessProfile?.description || (profileData as any).description || \"\",\n        addressLine1: (profileData as any).businessProfile?.addressLine1 || (profileData as any).addressLine1 || \"\",\n        addressLine2: (profileData as any).businessProfile?.addressLine2 || (profileData as any).addressLine2 || \"\",\n        pincode: (profileData as any).businessProfile?.pincode || (profileData as any).pincode || \"\",\n        website: (profileData as any).businessProfile?.website || (profileData as any).website || \"\",\n        registrationNumber: (profileData as any).businessProfile?.registrationNumber || (profileData as any).registrationNumber || \"\",\n        companySize: (profileData as any).businessProfile?.companySize || (profileData as any).companySize || \"\",\n        city: (profileData as any).businessProfile?.location?.city || (profileData as any).city || \"\",\n        stateName: (profileData as any).businessProfile?.location?.state?.name || (profileData as any).stateName || \"\",\n        country: (profileData as any).businessProfile?.location?.country || (profileData as any).country || (profileData as any).countryName || \"\",\n        // Personal fields (empty for business)\n        firstName: \"\",\n        lastName: \"\",\n        title: \"\",\n        positionDesignation: \"\",\n        currentCompany: \"\",\n        about: \"\",\n        gender: \"\",\n        dateOfBirth: \"\",\n      };\n    } else {\n      newFormData = {\n        // Personal fields\n        firstName: (profileData as any).firstName || \"\",\n        lastName: (profileData as any).lastName || \"\",\n        title: (profileData as any).title || \"\",\n        positionDesignation: (profileData as any).positionDesignation || \"\",\n        currentCompany: (profileData as any).company || \"\",\n        about: (profileData as any).description || \"\",\n        gender: (profileData as any).gender || \"\",\n        dateOfBirth: (profileData as any).dateOfBirth || \"\",\n        city: (profileData as any).city || \"\",\n        stateName: (profileData as any).stateName || \"\",\n        country: (profileData as any).country || (profileData as any).countryName || \"\",\n        // Business fields (empty for personal)\n        companyName: \"\",\n        industry: \"\",\n        companyType: \"\",\n        description: \"\",\n        addressLine1: \"\",\n        addressLine2: \"\",\n        pincode: \"\",\n        website: \"\",\n        registrationNumber: \"\",\n        companySize: \"\",\n      };\n    }\n    \n    console.log('New form data:', newFormData);\n    setEditFormData(newFormData);\n    \n    // Load countries when modal opens\n    if (countries.length === 0) {\n      loadCountries();\n    }\n    \n    // Load states and cities based on existing data after a brief delay\n    setTimeout(() => {\n      if (newFormData.country && countries.length > 0) {\n        const selectedCountry = countries.find(c => c.name === newFormData.country);\n        if (selectedCountry) {\n          loadStates(selectedCountry.code);\n          \n          // Load cities if state is also available\n          if (newFormData.stateName) {\n            setTimeout(() => {\n              const selectedState = states.find(s => s.name === newFormData.stateName);\n              if (selectedState) {\n                loadCities(selectedCountry.code, selectedState.code);\n              }\n            }, 500);\n          }\n        }\n      }\n    }, 500);\n    \n    setShowEditProfileModal(true);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-cmo-bg\">\n        <Header />\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n          <div className=\"flex items-center justify-center h-32\">\n            <Loader2 className=\"w-8 h-8 animate-spin text-cmo-primary\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!profileData) {\n    return (\n      <div className=\"min-h-screen bg-cmo-bg\">\n        <Header />\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n          <div className=\"text-center\">\n            <p className=\"text-cmo-text-secondary\">\n              Unable to load profile data.\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-cmo-bg\">\n      <Header />\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-4\">\n          {/* Mobile-First: Intro Card visible at top on mobile */}\n          <div className=\"lg:hidden mb-4\">\n            <Card className=\"mb-4\">\n              <CardContent className=\"p-4\">\n                <h3 className=\"font-semibold mb-4\">Intro</h3>\n                <div className=\"space-y-3\">\n                  {(profileData as any).userType === \"business\" ? (\n                    <>\n                      {/* Business Profile Info */}\n                      {(profileData as any).businessProfile?.companyName && (\n                        <div className=\"flex items-center gap-3\">\n                          <Building className=\"w-5 h-5 text-cmo-primary\" />\n                          <span className=\"text-sm\">\n                            {(profileData as any).businessProfile.companyName}\n                          </span>\n                        </div>\n                      )}\n                      {(profileData as any).businessProfile?.industry && (\n                        <div className=\"flex items-center gap-3\">\n                          <Briefcase className=\"w-5 h-5 text-cmo-primary\" />\n                          <span className=\"text-sm\">\n                            {(profileData as any).businessProfile.industry}\n                          </span>\n                        </div>\n                      )}\n                      {(profileData as any).businessProfile?.companySize && (\n                        <div className=\"flex items-center gap-3\">\n                          <Users className=\"w-5 h-5 text-cmo-primary\" />\n                          <span className=\"text-sm\">\n                            {(profileData as any).businessProfile.companySize}{\" \"}\n                            employees\n                          </span>\n                        </div>\n                      )}\n                      {(profileData as any).businessProfile?.registrationNumber && (\n                        <div className=\"flex items-center gap-3\">\n                          <FileText className=\"w-5 h-5 text-cmo-primary\" />\n                          <span className=\"text-sm\">\n                            Reg:{\" \"}\n                            {(profileData as any).businessProfile.registrationNumber}\n                          </span>\n                        </div>\n                      )}\n                      {(profileData as any).businessProfile?.website && (\n                        <div className=\"flex items-center gap-3\">\n                          <Globe className=\"w-5 h-5 text-cmo-primary\" />\n                          <a\n                            href={(profileData as any).businessProfile.website}\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                            className=\"text-sm text-cmo-primary hover:underline\"\n                          >\n                            Website\n                          </a>\n                        </div>\n                      )}\n                    </>\n                  ) : (\n                    <>\n                      {/* Personal Profile Info */}\n                      {((profileData as any).title ||\n                        (profileData as any).positionDesignation) && (\n                        <div className=\"flex items-center gap-3\">\n                          <Briefcase className=\"w-5 h-5 text-cmo-primary\" />\n                          <span className=\"text-sm\">\n                            {(profileData as any).title ||\n                              (profileData as any).positionDesignation}\n                          </span>\n                        </div>\n                      )}\n                      {((profileData as any).company || (profileData as any).currentCompany) && (\n                        <div className=\"flex items-center gap-3\">\n                          <Building className=\"w-5 h-5 text-cmo-primary\" />\n                          <span className=\"text-sm\">\n                            {(profileData as any).company || (profileData as any).currentCompany}\n                          </span>\n                        </div>\n                      )}\n                    </>\n                  )}\n\n                  {/* Common Info */}\n                  <div className=\"flex items-center gap-3\">\n                    <Calendar className=\"w-5 h-5 text-cmo-primary\" />\n                    <span className=\"text-sm\">\n                      Joined{\" \"}\n                      {(profileData as any).createdTime\n                        ? new Date(\n                            (profileData as any).createdTime,\n                          ).getFullYear()\n                        : new Date().getFullYear()}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center gap-3\">\n                    <Mail className=\"w-5 h-5 text-cmo-primary\" />\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"h-auto p-0 font-medium hover:text-cmo-primary text-sm\"\n                      onClick={() => setShowContactInfo(!showContactInfo)}\n                    >\n                      {showContactInfo\n                        ? profileData.email\n                        : \"••••••••@gmail.com\"}\n                    </Button>\n                  </div>\n                  {(profileData as any).phoneNumber && (\n                    <div className=\"flex items-center gap-3\">\n                      <Phone className=\"w-5 h-5 text-cmo-primary\" />\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"h-auto p-0 font-medium hover:text-cmo-primary text-sm\"\n                        onClick={() => setShowContactInfo(!showContactInfo)}\n                      >\n                        {showContactInfo\n                          ? (profileData as any).phoneNumber\n                          : \"••••••••••\"}\n                      </Button>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Main Content */}\n          <div className=\"lg:col-span-3\">\n            {/* Banner and Profile Section */}\n            <Card className=\"mb-4 overflow-hidden\">\n              <div\n                className=\"h-32 sm:h-40 bg-gradient-to-r from-blue-500 to-purple-600\"\n                style={{\n                  backgroundImage: (profileData as any).bannerUrl\n                    ? `url(${(profileData as any).bannerUrl})`\n                    : undefined,\n                  backgroundSize: \"cover\",\n                  backgroundPosition: \"center\",\n                }}\n              />\n\n              <CardContent className=\"relative p-3 sm:p-4\">\n                {/* Profile Info Section - Fixed Overlap */}\n                <div className=\"flex flex-col sm:flex-row gap-4 pt-2\">\n                  {/* Avatar */}\n                  <div className=\"flex-shrink-0\">\n                    <Avatar className=\"w-16 h-16 sm:w-20 sm:h-20 -mt-10 sm:-mt-12 border-4 border-white shadow-lg\">\n                      <AvatarImage\n                        src={\n                          (profileData as any).photoUrl ||\n                          (profileData as any).profilePic ||\n                          \"\"\n                        }\n                      />\n                      <AvatarFallback className=\"text-sm\">\n                        {profileData.firstName?.charAt(0) || \"U\"}\n                        {profileData.lastName?.charAt(0) || \"\"}\n                      </AvatarFallback>\n                    </Avatar>\n                  </div>\n\n                  {/* Profile Details */}\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex flex-col sm:flex-row sm:items-start sm:justify-between gap-3\">\n                      <div className=\"flex-1 min-w-0\">\n                        <h1 className=\"text-lg font-semibold text-cmo-text-primary truncate\">\n                          {profileData.firstName || \"\"}{\" \"}\n                          {profileData.lastName || \"\"}\n                        </h1>\n                        <p className=\"text-sm sm:text-base text-cmo-text-secondary mb-1\">\n                          {(profileData as any).userType === \"business\"\n                            ? (profileData as any).businessProfile?.companyName\n                            : (profileData as any).title ||\n                              (profileData as any).positionDesignation ||\n                              \"Professional\"}\n                        </p>\n                        {((profileData as any).city ||\n                          (profileData as any).stateName) && (\n                          <div className=\"flex items-center gap-1 text-xs sm:text-sm text-cmo-text-secondary mb-1\">\n                            <MapPin className=\"w-4 h-4\" />\n                            <span>\n                              {(profileData as any).city || \"\"}\n                              {(profileData as any).stateName\n                                ? `, ${(profileData as any).stateName}`\n                                : \"\"}\n                              {(profileData as any).country\n                                ? `, ${typeof (profileData as any).country === \"string\" ? (profileData as any).country : (profileData as any).country.name}`\n                                : \"\"}\n                            </span>\n                          </div>\n                        )}\n                        <div className=\"flex items-center gap-3 text-xs sm:text-sm text-cmo-text-secondary\">\n                          <button className=\"flex items-center gap-1 hover:text-cmo-primary transition-colors\">\n                            <Users className=\"w-4 h-4\" />\n                            {(profileData as any).followersCount || 0} followers\n                          </button>\n                          <button className=\"hover:text-cmo-primary transition-colors\">\n                            {(profileData as any).followingCount || 0} following\n                          </button>\n                        </div>\n                      </div>\n\n\n                      {user?.uid === profileData?.uid ? (\n                        // Own profile - Show Edit Profile and Share buttons\n                        <div className=\"flex items-center gap-2 flex-shrink-0\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={handleEditProfileClick}\n                            data-testid=\"button-edit-profile\"\n                          >\n                            <Edit className=\"w-4 h-4 mr-2\" />\n                            Edit Profile\n                          </Button>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => {\n                              if (navigator.share) {\n                                navigator.share({\n                                  title: `${profileData.firstName} ${profileData.lastName}'s Profile`,\n                                  url: window.location.href,\n                                });\n                              } else {\n                                navigator.clipboard.writeText(\n                                  window.location.href,\n                                );\n                                toast({\n                                  title: \"Link copied\",\n                                  description:\n                                    \"Profile link copied to clipboard\",\n                                });\n                              }\n                            }}\n                            data-testid=\"button-share-profile\"\n                          >\n                            <Share className=\"w-4 h-4 mr-2\" />\n                            Share\n                          </Button>\n                        </div>\n                      ) : (\n                        // Other user's profile - Show Message and Follow buttons\n                        <div className=\"flex items-center gap-2 flex-shrink-0\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={handleSendMessage}\n                          >\n                            <MessageSquare className=\"w-4 h-4 mr-2\" />\n                            Message\n                          </Button>\n                          <Button className=\"bg-cmo-primary hover:bg-cmo-primary/90\">\n                            <Plus className=\"w-4 h-4 mr-2\" />\n                            Follow\n                          </Button>\n\n                          {/* Three Dots Menu */}\n                          <DropdownMenu>\n                            <DropdownMenuTrigger asChild>\n                              <Button variant=\"outline\" size=\"icon\">\n                                <MoreHorizontal className=\"w-4 h-4\" />\n                              </Button>\n                            </DropdownMenuTrigger>\n                            <DropdownMenuContent align=\"end\">\n                              <DropdownMenuItem>\n                                <Flag className=\"mr-2 h-4 w-4\" />\n                                <span>Report</span>\n                              </DropdownMenuItem>\n                              <DropdownMenuItem>\n                                <Share className=\"mr-2 h-4 w-4\" />\n                                <span>Share</span>\n                              </DropdownMenuItem>\n                            </DropdownMenuContent>\n                          </DropdownMenu>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n\n                {/* About Section */}\n                <div className=\"mt-4\">\n                  <h3 className=\"text-sm font-semibold mb-2\">About</h3>\n                  <p className=\"text-sm text-cmo-text-secondary leading-relaxed\">\n                    {(profileData as any).about ||\n                      \"Professional with expertise in the construction and civil engineering industry.\"}\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Projects Section - Show for all users */}\n            <Card className=\"mb-4\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n                    <Building className=\"w-5 h-5 text-cmo-primary\" />\n                    Projects\n                  </h3>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    onClick={handleAddProject}\n                    data-testid=\"button-add-project\"\n                  >\n                    <Plus className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n                <div className=\"space-y-4\">\n                  {projectsLoading ? (\n                    <div className=\"flex justify-center py-8\">\n                      <Loader2 className=\"w-6 h-6 animate-spin\" />\n                    </div>\n                  ) : projects && projects.length > 0 ? (\n                    projects.map((project) => (\n                      <div key={project.id} className=\"flex gap-3 group\">\n                        <div className=\"w-10 h-10 bg-gray-100 rounded-lg flex items-center justify-center flex-shrink-0\">\n                          <Building className=\"w-4 h-4 text-cmo-primary\" />\n                        </div>\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-start justify-between\">\n                            <div className=\"flex-1\">\n                              <h4 className=\"font-medium text-sm\">\n                                {project.title}\n                              </h4>\n                              {project.location && (\n                                <p className=\"text-cmo-text-secondary flex items-center gap-1 text-xs\">\n                                  <MapPin className=\"w-3 h-3\" />\n                                  {project.location}\n                                </p>\n                              )}\n                              <p className=\"text-xs text-cmo-text-secondary mt-2\">\n                                {project.description}\n                              </p>\n                              {project.tags && project.tags.length > 0 && (\n                                <div className=\"flex flex-wrap gap-2 mt-2\">\n                                  {project.tags.map((tag, idx) => (\n                                    <Badge\n                                      key={idx}\n                                      variant=\"secondary\"\n                                      className=\"text-xs px-2 py-0.5\"\n                                    >\n                                      {tag}\n                                    </Badge>\n                                  ))}\n                                </div>\n                              )}\n                            </div>\n                            <div className=\"flex gap-2 opacity-0 group-hover:opacity-100 transition-opacity\">\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => handleEditProject(project)}\n                                data-testid={`button-edit-project-${project.id}`}\n                              >\n                                <Edit className=\"w-4 h-4\" />\n                              </Button>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() =>\n                                  project.id && handleDeleteProject(project.id)\n                                }\n                                data-testid={`button-delete-project-${project.id}`}\n                              >\n                                <Trash2 className=\"w-4 h-4\" />\n                              </Button>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    ))\n                  ) : (\n                    <p className=\"text-cmo-text-secondary text-center py-8\">\n                      No projects added yet\n                    </p>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Education and Experience - Only for Personal Users */}\n            {(profileData as any).userType !== \"business\" && (\n              <>\n                {/* Education Section */}\n                <Card className=\"mb-4\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n                        <GraduationCap className=\"w-6 h-6 text-cmo-primary\" />\n                        Education\n                      </h3>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        onClick={handleAddEducation}\n                        data-testid=\"button-add-education\"\n                      >\n                        <Plus className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                    <div className=\"space-y-4\">\n                      {educationLoading ? (\n                        <div className=\"flex justify-center py-8\">\n                          <Loader2 className=\"w-6 h-6 animate-spin\" />\n                        </div>\n                      ) : education && education.length > 0 ? (\n                        education.map((edu) => (\n                          <div key={edu.id} className=\"flex gap-3 group\">\n                            <div className=\"w-10 h-10 bg-gray-100 rounded-lg flex items-center justify-center flex-shrink-0\">\n                              <GraduationCap className=\"w-4 h-4 text-cmo-primary\" />\n                            </div>\n                            <div className=\"flex-1\">\n                              <div className=\"flex items-start justify-between\">\n                                <div className=\"flex-1\">\n                                  <h4 className=\"font-medium text-sm\">\n                                    {edu.degree}\n                                  </h4>\n                                  <p className=\"text-cmo-primary font-medium text-sm\">\n                                    {edu.fieldOfStudy}\n                                  </p>\n                                  <p className=\"text-cmo-text-secondary text-xs\">\n                                    {edu.schoolOrCollege}\n                                  </p>\n                                  <p className=\"text-xs text-cmo-text-secondary mt-1\">\n                                    {new Date(edu.startDate).getFullYear()} -{\" \"}\n                                    {new Date(edu.endDate).getFullYear()}\n                                    {edu.grade && ` • ${edu.grade}`}\n                                  </p>\n                                </div>\n                                <div className=\"flex gap-2 opacity-0 group-hover:opacity-100 transition-opacity\">\n                                  <Button\n                                    variant=\"ghost\"\n                                    size=\"sm\"\n                                    onClick={() => handleEditEducation(edu)}\n                                    data-testid={`button-edit-education-${edu.id}`}\n                                  >\n                                    <Edit className=\"w-4 h-4\" />\n                                  </Button>\n                                  <Button\n                                    variant=\"ghost\"\n                                    size=\"sm\"\n                                    onClick={() =>\n                                      edu.id && handleDeleteEducation(edu.id)\n                                    }\n                                    data-testid={`button-delete-education-${edu.id}`}\n                                  >\n                                    <Trash2 className=\"w-4 h-4\" />\n                                  </Button>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                        ))\n                      ) : (\n                        <p className=\"text-cmo-text-secondary text-center py-8\">\n                          No education added yet\n                        </p>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Experience Section */}\n                <Card className=\"mb-4\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n                        <Briefcase className=\"w-6 h-6 text-cmo-primary\" />\n                        Experience\n                      </h3>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        onClick={handleAddExperience}\n                        data-testid=\"button-add-experience\"\n                      >\n                        <Plus className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                    <div className=\"space-y-4\">\n                      {experienceLoading ? (\n                        <div className=\"flex justify-center py-8\">\n                          <Loader2 className=\"w-6 h-6 animate-spin\" />\n                        </div>\n                      ) : experience && experience.length > 0 ? (\n                        experience.map((exp) => (\n                          <div key={exp.id} className=\"flex gap-3 group\">\n                            <div className=\"w-10 h-10 bg-gray-100 rounded-lg flex items-center justify-center flex-shrink-0\">\n                              <Briefcase className=\"w-4 h-4 text-cmo-primary\" />\n                            </div>\n                            <div className=\"flex-1\">\n                              <div className=\"flex items-start justify-between\">\n                                <div className=\"flex-1\">\n                                  <h4 className=\"font-medium text-sm\">\n                                    {exp.title}\n                                  </h4>\n                                  <p className=\"text-cmo-primary font-medium text-sm\">\n                                    {exp.companyName}\n                                  </p>\n                                  <p className=\"text-cmo-text-secondary flex items-center gap-1 text-xs\">\n                                    <MapPin className=\"w-3 h-3\" />\n                                    {exp.location}\n                                  </p>\n                                  <p className=\"text-xs text-cmo-text-secondary mt-1\">\n                                    {new Date(exp.startDate).getFullYear()} -{\" \"}\n                                    {exp.isCurrent\n                                      ? \"Present\"\n                                      : new Date(exp.endDate).getFullYear()}\n                                    {exp.employmentType &&\n                                      ` • ${exp.employmentType}`}\n                                  </p>\n                                  <p className=\"text-xs text-cmo-text-secondary mt-2\">\n                                    {exp.description}\n                                  </p>\n                                </div>\n                                <div className=\"flex gap-2 opacity-0 group-hover:opacity-100 transition-opacity\">\n                                  <Button\n                                    variant=\"ghost\"\n                                    size=\"sm\"\n                                    onClick={() => handleEditExperience(exp)}\n                                    data-testid={`button-edit-experience-${exp.id}`}\n                                  >\n                                    <Edit className=\"w-4 h-4\" />\n                                  </Button>\n                                  <Button\n                                    variant=\"ghost\"\n                                    size=\"sm\"\n                                    onClick={() =>\n                                      exp.id && handleDeleteExperience(exp.id)\n                                    }\n                                    data-testid={`button-delete-experience-${exp.id}`}\n                                  >\n                                    <Trash2 className=\"w-4 h-4\" />\n                                  </Button>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                        ))\n                      ) : (\n                        <p className=\"text-cmo-text-secondary text-center py-8\">\n                          No experience added yet\n                        </p>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              </>\n            )}\n\n            {/* User Activities */}\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-6\">\n                  <h3 className=\"text-xl font-semibold\">Activities</h3>\n                  <div className=\"flex items-center gap-2\">\n                    <Button variant=\"outline\" size=\"sm\">\n                      <Filter className=\"w-4 h-4 mr-2\" />\n                      Filter\n                    </Button>\n                  </div>\n                </div>\n\n                {/* Activity Filters */}\n                <div className=\"flex flex-wrap gap-2 mb-6\">\n                  {filters.map((filter) => (\n                    <Button\n                      key={filter}\n                      variant={activeFilter === filter ? \"default\" : \"outline\"}\n                      size=\"sm\"\n                      onClick={() => setActiveFilter(filter)}\n                      className={\n                        activeFilter === filter ? \"bg-cmo-primary\" : \"\"\n                      }\n                    >\n                      {filter}\n                    </Button>\n                  ))}\n                </div>\n\n                {/* Activity Feed */}\n                <div className=\"space-y-6\">\n                  {mockActivities.map((activity) => (\n                    <div\n                      key={activity.id}\n                      className=\"border-b border-cmo-border pb-6 last:border-b-0\"\n                    >\n                      <div className=\"flex gap-3\">\n                        <Avatar className=\"w-12 h-12\">\n                          <AvatarImage\n                            src={\n                              (profileData as any).photoUrl ||\n                              (profileData as any).profilePic ||\n                              \"\"\n                            }\n                          />\n                          <AvatarFallback>\n                            {profileData.firstName?.charAt(0) || \"U\"}\n                            {profileData.lastName?.charAt(0) || \"\"}\n                          </AvatarFallback>\n                        </Avatar>\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-start justify-between\">\n                            <div>\n                              <h4 className=\"font-medium text-cmo-text-primary\">\n                                {activity.title}\n                              </h4>\n                              <div className=\"flex items-center gap-2 text-sm text-cmo-text-secondary mt-1\">\n                                <span>\n                                  {profileData.firstName || \"\"}{\" \"}\n                                  {profileData.lastName || \"\"}\n                                </span>\n                                <span>•</span>\n                                <span>{activity.timestamp}</span>\n                                <Badge variant=\"secondary\" className=\"text-xs\">\n                                  {activity.category}\n                                </Badge>\n                              </div>\n                            </div>\n                            <DropdownMenu>\n                              <DropdownMenuTrigger asChild>\n                                <Button variant=\"ghost\" size=\"icon\">\n                                  <MoreHorizontal className=\"w-4 h-4\" />\n                                </Button>\n                              </DropdownMenuTrigger>\n                              <DropdownMenuContent align=\"end\">\n                                <DropdownMenuItem>\n                                  <Edit className=\"mr-2 h-4 w-4\" />\n                                  <span>Edit</span>\n                                </DropdownMenuItem>\n                                <DropdownMenuItem>\n                                  <Flag className=\"mr-2 h-4 w-4\" />\n                                  <span>Report</span>\n                                </DropdownMenuItem>\n                                <DropdownMenuItem>\n                                  <Share className=\"mr-2 h-4 w-4\" />\n                                  <span>Share</span>\n                                </DropdownMenuItem>\n                              </DropdownMenuContent>\n                            </DropdownMenu>\n                          </div>\n                          <p className=\"text-cmo-text-secondary mt-3\">\n                            {activity.content}\n                          </p>\n\n                          {/* Engagement Actions - Updated with Share button */}\n                          <div className=\"flex items-center gap-6 mt-4\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => toggleComments(activity.id)}\n                              className=\"text-cmo-text-secondary hover:text-cmo-primary\"\n                            >\n                              <MessageSquare className=\"w-4 h-4 mr-1\" />\n                              Comment ({activity.engagement.comments})\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              className=\"text-cmo-text-secondary hover:text-cmo-primary\"\n                            >\n                              <ThumbsUp className=\"w-4 h-4 mr-1\" />\n                              Thanks ({activity.engagement.thanks})\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              className=\"text-cmo-text-secondary hover:text-cmo-primary\"\n                            >\n                              <Star className=\"w-4 h-4 mr-1\" />\n                              Insightful ({activity.engagement.insightful})\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              className=\"text-cmo-text-secondary hover:text-cmo-primary\"\n                            >\n                              <Share className=\"w-4 h-4 mr-1\" />\n                              Share\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              className=\"text-cmo-text-secondary hover:text-cmo-primary\"\n                            >\n                              <Bookmark className=\"w-4 h-4\" />\n                            </Button>\n                          </div>\n\n                          {/* Expandable Comment Section */}\n                          {expandedComments[activity.id] && (\n                            <div className=\"mt-4 pl-4 border-l-2 border-cmo-border\">\n                              <div className=\"flex gap-3\">\n                                <Avatar className=\"w-8 h-8\">\n                                  <AvatarImage\n                                    src={\n                                      (profileData as any).photoUrl ||\n                                      (profileData as any).profilePic ||\n                                      \"\"\n                                    }\n                                  />\n                                  <AvatarFallback className=\"text-xs\">\n                                    {profileData.firstName?.charAt(0) || \"U\"}\n                                    {profileData.lastName?.charAt(0) || \"\"}\n                                  </AvatarFallback>\n                                </Avatar>\n                                <div className=\"flex-1\">\n                                  <Textarea\n                                    placeholder=\"Write a comment...\"\n                                    value={commentText[activity.id] || \"\"}\n                                    onChange={(e) =>\n                                      handleCommentChange(\n                                        activity.id,\n                                        e.target.value,\n                                      )\n                                    }\n                                    className=\"min-h-[80px] mb-2\"\n                                  />\n                                  <div className=\"flex justify-end gap-2\">\n                                    <Button\n                                      variant=\"outline\"\n                                      size=\"sm\"\n                                      onClick={() =>\n                                        toggleComments(activity.id)\n                                      }\n                                    >\n                                      Cancel\n                                    </Button>\n                                    <Button\n                                      size=\"sm\"\n                                      onClick={() =>\n                                        handleSubmitComment(activity.id)\n                                      }\n                                      disabled={\n                                        !commentText[activity.id]?.trim()\n                                      }\n                                      className=\"bg-cmo-primary hover:bg-cmo-primary/90\"\n                                    >\n                                      <Send className=\"w-4 h-4 mr-1\" />\n                                      Comment\n                                    </Button>\n                                  </div>\n                                </div>\n                              </div>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Right Sidebar */}\n          <div className=\"lg:col-span-1\">\n            {/* Intro Card - Hidden on mobile since we show it at top */}\n            <Card className=\"mb-6 hidden lg:block\">\n              <CardContent className=\"p-6\">\n                <h3 className=\"font-semibold mb-4\">Intro</h3>\n                <div className=\"space-y-3\">\n                  {(profileData as any).userType === \"business\" ? (\n                    <>\n                      {/* Business Profile Info */}\n                      {(profileData as any).businessProfile?.companyName && (\n                        <div className=\"flex items-center gap-3\">\n                          <Building className=\"w-5 h-5 text-cmo-primary\" />\n                          <span className=\"text-sm\">\n                            {(profileData as any).businessProfile.companyName}\n                          </span>\n                        </div>\n                      )}\n                      {(profileData as any).businessProfile?.industry && (\n                        <div className=\"flex items-center gap-3\">\n                          <Briefcase className=\"w-5 h-5 text-cmo-primary\" />\n                          <span className=\"text-sm\">\n                            {(profileData as any).businessProfile.industry}\n                          </span>\n                        </div>\n                      )}\n                      {(profileData as any).businessProfile?.companySize && (\n                        <div className=\"flex items-center gap-3\">\n                          <Users className=\"w-5 h-5 text-cmo-primary\" />\n                          <span className=\"text-sm\">\n                            {(profileData as any).businessProfile.companySize}{\" \"}\n                            employees\n                          </span>\n                        </div>\n                      )}\n                      {(profileData as any).businessProfile\n                        ?.registrationNumber && (\n                        <div className=\"flex items-center gap-3\">\n                          <FileText className=\"w-5 h-5 text-cmo-primary\" />\n                          <span className=\"text-sm\">\n                            Reg:{\" \"}\n                            {\n                              (profileData as any).businessProfile\n                                .registrationNumber\n                            }\n                          </span>\n                        </div>\n                      )}\n                      {(profileData as any).businessProfile?.website && (\n                        <div className=\"flex items-center gap-3\">\n                          <Globe className=\"w-5 h-5 text-cmo-primary\" />\n                          <a\n                            href={(profileData as any).businessProfile.website}\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                            className=\"text-sm text-cmo-primary hover:underline\"\n                          >\n                            Website\n                          </a>\n                        </div>\n                      )}\n                    </>\n                  ) : (\n                    <>\n                      {/* Personal Profile Info */}\n                      {((profileData as any).title ||\n                        (profileData as any).positionDesignation) && (\n                        <div className=\"flex items-center gap-3\">\n                          <Briefcase className=\"w-5 h-5 text-cmo-primary\" />\n                          <span className=\"text-sm\">\n                            {(profileData as any).title ||\n                              (profileData as any).positionDesignation}\n                          </span>\n                        </div>\n                      )}\n                      {(profileData as any).company && (\n                        <div className=\"flex items-center gap-3\">\n                          <Building className=\"w-5 h-5 text-cmo-primary\" />\n                          <span className=\"text-sm\">\n                            {(profileData as any).company}\n                          </span>\n                        </div>\n                      )}\n                    </>\n                  )}\n\n                  {/* Common Info */}\n                  <div className=\"flex items-center gap-3\">\n                    <Calendar className=\"w-5 h-5 text-cmo-primary\" />\n                    <span className=\"text-sm\">\n                      Joined{\" \"}\n                      {(profileData as any).createdTime\n                        ? new Date(\n                            (profileData as any).createdTime,\n                          ).getFullYear()\n                        : new Date().getFullYear()}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center gap-3\">\n                    <Mail className=\"w-5 h-5 text-cmo-primary\" />\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"h-auto p-0 font-medium hover:text-cmo-primary text-sm\"\n                      onClick={() => setShowContactInfo(!showContactInfo)}\n                    >\n                      {showContactInfo\n                        ? profileData.email\n                        : \"••••••••@gmail.com\"}\n                    </Button>\n                  </div>\n                  {(profileData as any).phoneNumber && (\n                    <div className=\"flex items-center gap-3\">\n                      <Phone className=\"w-5 h-5 text-cmo-primary\" />\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"h-auto p-0 font-medium hover:text-cmo-primary text-sm\"\n                        onClick={() => setShowContactInfo(!showContactInfo)}\n                      >\n                        {showContactInfo\n                          ? (profileData as any).phoneNumber\n                          : \"••••••••••\"}\n                      </Button>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Skills Expertise - Only for Personal Profiles */}\n            {(profileData as any).userType !== \"business\" && (\n              <Card className=\"mb-6\">\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <h3 className=\"font-semibold\">Skills Expertise</h3>\n                    {/* Show Edit button if no skills, + button if has skills - only on own profile */}\n                    {profileData?.uid === user?.uid && (\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={handleSkillsModalOpen}\n                        disabled={skillsLoading}\n                        data-testid={\n                          userSkills.length === 0\n                            ? \"button-add-skills\"\n                            : \"button-edit-skills\"\n                        }\n                        className=\"text-cmo-primary hover:text-cmo-primary/80\"\n                      >\n                        {skillsLoading ? (\n                          <Loader2 className=\"w-4 h-4 animate-spin\" />\n                        ) : userSkills.length === 0 ? (\n                          <>\n                            <Plus className=\"w-4 h-4 mr-1\" />\n                          </>\n                        ) : (\n                          <>\n                            <Edit className=\"w-4 h-4 mr-1\" />\n                            Edit\n                          </>\n                        )}\n                      </Button>\n                    )}\n                  </div>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {userSkills.length > 0 ? (\n                      userSkills.map((skillName: string, index: number) => (\n                        <Badge\n                          key={index}\n                          variant=\"secondary\"\n                          className=\"bg-cmo-primary/10 text-cmo-primary\"\n                        >\n                          {skillName}\n                        </Badge>\n                      ))\n                    ) : (\n                      <p className=\"text-cmo-text-secondary text-sm\">\n                        No skills added yet\n                      </p>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Languages Known */}\n            <Card className=\"mb-6\">\n              <CardContent className=\"p-6\">\n                <h3 className=\"font-semibold mb-4\">Languages Known</h3>\n                <div className=\"flex flex-wrap gap-2\">\n                  {((profileData as any).languages || []).map(\n                    (lang: string) => (\n                      <Badge key={lang} variant=\"outline\">\n                        {lang}\n                      </Badge>\n                    ),\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Suggested for You */}\n            <Card className=\"mb-6\">\n              <CardContent className=\"p-4\">\n                <h3 className=\"font-semibold mb-4 text-sm\">\n                  Suggested for You\n                </h3>\n                <div className=\"space-y-3\">\n                  {suggestionsLoading ? (\n                    // Loading state\n                    <div className=\"flex items-center justify-center py-4\">\n                      <Loader2 className=\"w-4 h-4 animate-spin\" />\n                      <span className=\"text-sm text-cmo-text-secondary ml-2\">\n                        Loading suggestions...\n                      </span>\n                    </div>\n                  ) : suggestions.length > 0 ? (\n                    suggestions.map((person) => (\n                      <div key={person.uid} className=\"flex items-center gap-3\">\n                        <Avatar className=\"w-10 h-10\">\n                          <AvatarImage\n                            src={person.photoUrl || person.profilePic}\n                          />\n                          <AvatarFallback className=\"text-xs\">\n                            {(person.firstName?.[0] || \"\") +\n                              (person.lastName?.[0] || \"\")}\n                          </AvatarFallback>\n                        </Avatar>\n                        <div className=\"flex-1 min-w-0\">\n                          <p className=\"font-medium text-xs text-cmo-text-primary truncate\">\n                            {person.firstName} {person.lastName}\n                          </p>\n                          <p className=\"text-xs text-cmo-text-secondary truncate\">\n                            {person.title ||\n                              person.positionDesignation ||\n                              \"Professional\"}\n                          </p>\n                          <p className=\"text-xs text-cmo-text-secondary truncate\">\n                            {person.city || \"Location not specified\"}\n                          </p>\n                        </div>\n                        <Button\n                          size=\"sm\"\n                          className=\"text-xs px-3 py-1 h-6 bg-blue-600 hover:bg-blue-700 text-white\"\n                          data-testid=\"button-follow-suggestion\"\n                        >\n                          Follow\n                        </Button>\n                      </div>\n                    ))\n                  ) : (\n                    <p className=\"text-sm text-cmo-text-secondary text-center py-4\">\n                      No suggestions available\n                    </p>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Popular Filters */}\n            <Card>\n              <CardContent className=\"p-4\">\n                <h3 className=\"font-semibold mb-4 text-sm\">Popular Filters</h3>\n                <div className=\"space-y-2\">\n                  <Button\n                    variant=\"ghost\"\n                    className=\"w-full justify-start text-xs h-8\"\n                  >\n                    Questions & Answers\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    className=\"w-full justify-start text-xs h-8\"\n                  >\n                    Articles & Posts\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    className=\"w-full justify-start text-xs h-8\"\n                  >\n                    Industry Updates\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    className=\"w-full justify-start text-xs h-8\"\n                  >\n                    Job Opportunities\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      {/* Edit Profile Modal */}\n      <Dialog\n        open={showEditProfileModal}\n        onOpenChange={setShowEditProfileModal}\n      >\n        <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Edit Profile</DialogTitle>\n          </DialogHeader>\n          <form onSubmit={handleEditFormSubmit} className=\"space-y-4\">\n            {(profileData as any)?.userType === \"business\" ? (\n              // Business Profile Fields\n              <>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"companyName\">Company Name</Label>\n                  <Input\n                    id=\"companyName\"\n                    value={editFormData.companyName}\n                    onChange={(e) =>\n                      handleEditFormChange(\"companyName\", e.target.value)\n                    }\n                    placeholder=\"Enter company name\"\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"industry\">Industry</Label>\n                    <Combobox\n                      options={INDUSTRIES.map((industry) => ({\n                        value: industry,\n                        label: industry,\n                      }))}\n                      value={editFormData.industry}\n                      onValueChange={(value: string) => handleEditFormChange(\"industry\", value)}\n                      placeholder=\"Select industry\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"companyType\">Company Type</Label>\n                    <Combobox\n                      options={COMPANY_TYPES.map((type) => ({\n                        value: type,\n                        label: type,\n                      }))}\n                      value={editFormData.companyType}\n                      onValueChange={(value: string) => handleEditFormChange(\"companyType\", value)}\n                      placeholder=\"Select company type\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"description\">Company Description</Label>\n                  <Textarea\n                    id=\"description\"\n                    value={editFormData.description}\n                    onChange={(e) =>\n                      handleEditFormChange(\"description\", e.target.value)\n                    }\n                    placeholder=\"Describe your company and services\"\n                    rows={3}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"addressLine1\">Address Line 1</Label>\n                    <Input\n                      id=\"addressLine1\"\n                      value={editFormData.addressLine1}\n                      onChange={(e) =>\n                        handleEditFormChange(\"addressLine1\", e.target.value)\n                      }\n                      placeholder=\"Street address\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"addressLine2\">\n                      Address Line 2 (Optional)\n                    </Label>\n                    <Input\n                      id=\"addressLine2\"\n                      value={editFormData.addressLine2}\n                      onChange={(e) =>\n                        handleEditFormChange(\"addressLine2\", e.target.value)\n                      }\n                      placeholder=\"Apartment, suite, etc.\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"country\">Country</Label>\n                    <Combobox\n                      options={countries.map((country) => ({\n                        value: country.name,\n                        label: country.name,\n                      }))}\n                      value={editFormData.country}\n                      onValueChange={(value: string) => {\n                        handleEditFormChange(\"country\", value);\n                        const selectedCountry = countries.find(c => c.name === value);\n                        if (selectedCountry) {\n                          loadStates(selectedCountry.code);\n                          handleEditFormChange(\"stateName\", \"\");\n                          handleEditFormChange(\"city\", \"\");\n                        }\n                      }}\n                      placeholder=\"Select country\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"stateName\">State</Label>\n                    <Combobox\n                      options={states.map((state) => ({\n                        value: state.name,\n                        label: state.name,\n                      }))}\n                      value={editFormData.stateName}\n                      onValueChange={(value: string) => {\n                        handleEditFormChange(\"stateName\", value);\n                        const selectedCountry = countries.find(c => c.name === editFormData.country);\n                        const selectedState = states.find(s => s.name === value);\n                        if (selectedCountry && selectedState) {\n                          loadCities(selectedCountry.code, selectedState.code);\n                          handleEditFormChange(\"city\", \"\");\n                        }\n                      }}\n                      placeholder=\"Select state\"\n                      disabled={!editFormData.country}\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"city\">City</Label>\n                    <Combobox\n                      options={cities.map((city) => ({\n                        value: city,\n                        label: city,\n                      }))}\n                      value={editFormData.city}\n                      onValueChange={(value: string) => handleEditFormChange(\"city\", value)}\n                      placeholder=\"Select city\"\n                      disabled={!editFormData.stateName}\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"pincode\">Pincode</Label>\n                    <Input\n                      id=\"pincode\"\n                      value={editFormData.pincode}\n                      onChange={(e) =>\n                        handleEditFormChange(\"pincode\", e.target.value)\n                      }\n                      placeholder=\"Enter pincode\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"website\">Website</Label>\n                    <Input\n                      id=\"website\"\n                      value={editFormData.website}\n                      onChange={(e) =>\n                        handleEditFormChange(\"website\", e.target.value)\n                      }\n                      placeholder=\"https://example.com\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"registrationNumber\">\n                      Registration Number\n                    </Label>\n                    <Input\n                      id=\"registrationNumber\"\n                      value={editFormData.registrationNumber}\n                      onChange={(e) =>\n                        handleEditFormChange(\n                          \"registrationNumber\",\n                          e.target.value,\n                        )\n                      }\n                      placeholder=\"Enter registration number\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"companySize\">Company Size</Label>\n                  <SelectUI\n                    value={editFormData.companySize}\n                    onValueChange={(value) =>\n                      handleEditFormChange(\"companySize\", value)\n                    }\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select company size\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"1-10\">1-10 employees</SelectItem>\n                      <SelectItem value=\"11-50\">11-50 employees</SelectItem>\n                      <SelectItem value=\"51-200\">51-200 employees</SelectItem>\n                      <SelectItem value=\"201-500\">201-500 employees</SelectItem>\n                      <SelectItem value=\"501-1000\">\n                        501-1000 employees\n                      </SelectItem>\n                      <SelectItem value=\"1000+\">1000+ employees</SelectItem>\n                    </SelectContent>\n                  </SelectUI>\n                </div>\n              </>\n            ) : (\n              // Personal Profile Fields\n              <>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"firstName\">First Name</Label>\n                    <Input\n                      id=\"firstName\"\n                      value={editFormData.firstName}\n                      onChange={(e) =>\n                        handleEditFormChange(\"firstName\", e.target.value)\n                      }\n                      placeholder=\"Enter first name\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"lastName\">Last Name</Label>\n                    <Input\n                      id=\"lastName\"\n                      value={editFormData.lastName}\n                      onChange={(e) =>\n                        handleEditFormChange(\"lastName\", e.target.value)\n                      }\n                      placeholder=\"Enter last name\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"title\">Job Title</Label>\n                  <Combobox\n                    options={JOB_TITLES.map((title) => ({\n                      value: title,\n                      label: title,\n                    }))}\n                    value={editFormData.title}\n                    onValueChange={(value: string) => handleEditFormChange(\"title\", value)}\n                    placeholder=\"Select your job title\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"positionDesignation\">\n                    Position/Designation\n                  </Label>\n                  <Input\n                    id=\"positionDesignation\"\n                    value={editFormData.positionDesignation}\n                    onChange={(e) =>\n                      handleEditFormChange(\n                        \"positionDesignation\",\n                        e.target.value,\n                      )\n                    }\n                    placeholder=\"Enter your position or designation\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"currentCompany\">Current Company</Label>\n                  <Input\n                    id=\"currentCompany\"\n                    value={editFormData.currentCompany}\n                    onChange={(e) =>\n                      handleEditFormChange(\"currentCompany\", e.target.value)\n                    }\n                    placeholder=\"Enter your current company\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"about\">About</Label>\n                  <Textarea\n                    id=\"about\"\n                    value={editFormData.about}\n                    onChange={(e) =>\n                      handleEditFormChange(\"about\", e.target.value)\n                    }\n                    placeholder=\"Tell us about yourself\"\n                    rows={3}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label>Gender</Label>\n                    <RadioGroup\n                      value={editFormData.gender}\n                      onValueChange={(value) => handleEditFormChange(\"gender\", value)}\n                    >\n                      <div className=\"flex items-center space-x-6\">\n                        <div className=\"flex items-center space-x-2\">\n                          <RadioGroupItem value=\"Male\" id=\"male\" />\n                          <Label htmlFor=\"male\">Male</Label>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <RadioGroupItem value=\"Female\" id=\"female\" />\n                          <Label htmlFor=\"female\">Female</Label>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <RadioGroupItem value=\"Other\" id=\"other\" />\n                          <Label htmlFor=\"other\">Other</Label>\n                        </div>\n                      </div>\n                    </RadioGroup>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"dateOfBirth\">Date of Birth</Label>\n                    <Input\n                      id=\"dateOfBirth\"\n                      type=\"date\"\n                      value={editFormData.dateOfBirth}\n                      onChange={(e) =>\n                        handleEditFormChange(\"dateOfBirth\", e.target.value)\n                      }\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"country\">Country</Label>\n                    <Combobox\n                      options={countries.map((country) => ({\n                        value: country.name,\n                        label: country.name,\n                      }))}\n                      value={editFormData.country}\n                      onValueChange={(value: string) => {\n                        handleEditFormChange(\"country\", value);\n                        const selectedCountry = countries.find(c => c.name === value);\n                        if (selectedCountry) {\n                          loadStates(selectedCountry.code);\n                          handleEditFormChange(\"stateName\", \"\");\n                          handleEditFormChange(\"city\", \"\");\n                        }\n                      }}\n                      placeholder=\"Select your country\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"stateName\">State</Label>\n                    <Combobox\n                      options={states.map((state) => ({\n                        value: state.name,\n                        label: state.name,\n                      }))}\n                      value={editFormData.stateName}\n                      onValueChange={(value: string) => {\n                        handleEditFormChange(\"stateName\", value);\n                        const selectedCountry = countries.find(c => c.name === editFormData.country);\n                        const selectedState = states.find(s => s.name === value);\n                        if (selectedCountry && selectedState) {\n                          loadCities(selectedCountry.code, selectedState.code);\n                          handleEditFormChange(\"city\", \"\");\n                        }\n                      }}\n                      placeholder=\"Select your state\"\n                      disabled={!editFormData.country}\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"city\">City</Label>\n                    <Combobox\n                      options={cities.map((city) => ({\n                        value: city,\n                        label: city,\n                      }))}\n                      value={editFormData.city}\n                      onValueChange={(value: string) => handleEditFormChange(\"city\", value)}\n                      placeholder=\"Select your city\"\n                      disabled={!editFormData.stateName}\n                    />\n                  </div>\n                </div>\n              </>\n            )}\n\n            <div className=\"flex justify-end gap-3 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setShowEditProfileModal(false)}\n              >\n                Cancel\n              </Button>\n              <Button type=\"submit\" disabled={editFormLoading}>\n                {editFormLoading && (\n                  <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                )}\n                Save Changes\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Education Modal */}\n      <Dialog open={showEducationModal} onOpenChange={setShowEducationModal}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>\n              {editingEducation ? \"Edit Education\" : \"Add Education\"}\n            </DialogTitle>\n          </DialogHeader>\n          <form\n            onSubmit={(e) => {\n              e.preventDefault();\n              handleSaveEducation();\n            }}\n            className=\"space-y-4\"\n          >\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"degree\">Degree</Label>\n                <Input\n                  id=\"degree\"\n                  value={educationFormData.degree}\n                  onChange={(e) =>\n                    setEducationFormData({\n                      ...educationFormData,\n                      degree: e.target.value,\n                    })\n                  }\n                  placeholder=\"e.g., Bachelor's, Master's, MBA\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"fieldOfStudy\">Field of Study</Label>\n                <Input\n                  id=\"fieldOfStudy\"\n                  value={educationFormData.fieldOfStudy}\n                  onChange={(e) =>\n                    setEducationFormData({\n                      ...educationFormData,\n                      fieldOfStudy: e.target.value,\n                    })\n                  }\n                  placeholder=\"e.g., Computer Science, Business\"\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"schoolOrCollege\">School/College</Label>\n              <Input\n                id=\"schoolOrCollege\"\n                value={educationFormData.schoolOrCollege}\n                onChange={(e) =>\n                  setEducationFormData({\n                    ...educationFormData,\n                    schoolOrCollege: e.target.value,\n                  })\n                }\n                placeholder=\"e.g., Harvard University\"\n              />\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"startDate\">Start Date</Label>\n                <Input\n                  id=\"startDate\"\n                  type=\"date\"\n                  value={educationFormData.startDate}\n                  onChange={(e) =>\n                    setEducationFormData({\n                      ...educationFormData,\n                      startDate: e.target.value,\n                    })\n                  }\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"endDate\">End Date</Label>\n                <Input\n                  id=\"endDate\"\n                  type=\"date\"\n                  value={educationFormData.endDate}\n                  onChange={(e) =>\n                    setEducationFormData({\n                      ...educationFormData,\n                      endDate: e.target.value,\n                    })\n                  }\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"grade\">Grade</Label>\n                <Input\n                  id=\"grade\"\n                  value={educationFormData.grade}\n                  onChange={(e) =>\n                    setEducationFormData({\n                      ...educationFormData,\n                      grade: e.target.value,\n                    })\n                  }\n                  placeholder=\"e.g., First Class, 3.8 GPA\"\n                />\n              </div>\n            </div>\n\n            <div className=\"flex justify-end gap-2 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setShowEducationModal(false)}\n              >\n                Cancel\n              </Button>\n              <Button type=\"submit\" disabled={editFormLoading}>\n                {editFormLoading && (\n                  <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                )}\n                {editingEducation ? \"Update\" : \"Add\"} Education\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Experience Modal */}\n      <Dialog open={showExperienceModal} onOpenChange={setShowExperienceModal}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>\n              {editingExperience ? \"Edit Experience\" : \"Add Experience\"}\n            </DialogTitle>\n          </DialogHeader>\n          <form\n            onSubmit={(e) => {\n              e.preventDefault();\n              handleSaveExperience();\n            }}\n            className=\"space-y-4\"\n          >\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"expCompanyName\">Company Name</Label>\n                <Input\n                  id=\"expCompanyName\"\n                  value={experienceFormData.companyName}\n                  onChange={(e) =>\n                    setExperienceFormData({\n                      ...experienceFormData,\n                      companyName: e.target.value,\n                    })\n                  }\n                  placeholder=\"e.g., Google, Microsoft\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"expTitle\">Job Title</Label>\n                <Input\n                  id=\"expTitle\"\n                  value={experienceFormData.title}\n                  onChange={(e) =>\n                    setExperienceFormData({\n                      ...experienceFormData,\n                      title: e.target.value,\n                    })\n                  }\n                  placeholder=\"e.g., Software Engineer, Manager\"\n                />\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"employmentType\">Employment Type</Label>\n                <SelectUI\n                  value={experienceFormData.employmentType}\n                  onValueChange={(value) =>\n                    setExperienceFormData({\n                      ...experienceFormData,\n                      employmentType: value,\n                    })\n                  }\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select employment type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"Full-time\">Full-time</SelectItem>\n                    <SelectItem value=\"Part-time\">Part-time</SelectItem>\n                    <SelectItem value=\"Contract\">Contract</SelectItem>\n                    <SelectItem value=\"Internship\">Internship</SelectItem>\n                    <SelectItem value=\"Freelance\">Freelance</SelectItem>\n                  </SelectContent>\n                </SelectUI>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"expLocation\">Location</Label>\n                <Input\n                  id=\"expLocation\"\n                  value={experienceFormData.location}\n                  onChange={(e) =>\n                    setExperienceFormData({\n                      ...experienceFormData,\n                      location: e.target.value,\n                    })\n                  }\n                  placeholder=\"e.g., San Francisco, CA\"\n                />\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"expStartDate\">Start Date</Label>\n                <Input\n                  id=\"expStartDate\"\n                  type=\"date\"\n                  value={experienceFormData.startDate}\n                  onChange={(e) =>\n                    setExperienceFormData({\n                      ...experienceFormData,\n                      startDate: e.target.value,\n                    })\n                  }\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"expEndDate\">End Date</Label>\n                <Input\n                  id=\"expEndDate\"\n                  type=\"date\"\n                  value={experienceFormData.endDate}\n                  onChange={(e) =>\n                    setExperienceFormData({\n                      ...experienceFormData,\n                      endDate: e.target.value,\n                      isCurrent: false,\n                    })\n                  }\n                  disabled={experienceFormData.isCurrent}\n                />\n              </div>\n            </div>\n\n            <div className=\"flex items-center space-x-2\">\n              <input\n                type=\"checkbox\"\n                id=\"isCurrent\"\n                checked={experienceFormData.isCurrent}\n                onChange={(e) =>\n                  setExperienceFormData({\n                    ...experienceFormData,\n                    isCurrent: e.target.checked,\n                    endDate: e.target.checked ? \"\" : experienceFormData.endDate,\n                  })\n                }\n              />\n              <Label htmlFor=\"isCurrent\">I currently work here</Label>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"expDescription\">Description</Label>\n              <Textarea\n                id=\"expDescription\"\n                value={experienceFormData.description}\n                onChange={(e) =>\n                  setExperienceFormData({\n                    ...experienceFormData,\n                    description: e.target.value,\n                  })\n                }\n                placeholder=\"Describe your responsibilities and achievements\"\n                rows={3}\n              />\n            </div>\n\n            <div className=\"flex justify-end gap-2 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setShowExperienceModal(false)}\n              >\n                Cancel\n              </Button>\n              <Button type=\"submit\" disabled={editFormLoading}>\n                {editFormLoading && (\n                  <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                )}\n                {editingExperience ? \"Update\" : \"Add\"} Experience\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Projects Modal */}\n      <Dialog open={showProjectModal} onOpenChange={setShowProjectModal}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>\n              {editingProject ? \"Edit Project\" : \"Add Project\"}\n            </DialogTitle>\n          </DialogHeader>\n          <form\n            onSubmit={(e) => {\n              e.preventDefault();\n              handleSaveProject();\n            }}\n            className=\"space-y-4\"\n          >\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"projectTitle\">Project Title</Label>\n              <Input\n                id=\"projectTitle\"\n                value={projectFormData.title}\n                onChange={(e) =>\n                  setProjectFormData({\n                    ...projectFormData,\n                    title: e.target.value,\n                  })\n                }\n                placeholder=\"e.g., E-commerce Website, Mobile App\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"projectDescription\">Description</Label>\n              <Textarea\n                id=\"projectDescription\"\n                value={projectFormData.description}\n                onChange={(e) =>\n                  setProjectFormData({\n                    ...projectFormData,\n                    description: e.target.value,\n                  })\n                }\n                placeholder=\"Describe the project, technologies used, and your role\"\n                rows={3}\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"projectLocation\">Location (Optional)</Label>\n              <Input\n                id=\"projectLocation\"\n                value={projectFormData.location || \"\"}\n                onChange={(e) =>\n                  setProjectFormData({\n                    ...projectFormData,\n                    location: e.target.value,\n                  })\n                }\n                placeholder=\"e.g., New York, NY\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"projectTags\">Tags (Optional)</Label>\n              <Input\n                id=\"projectTags\"\n                value={(projectFormData.tags || []).join(\", \")}\n                onChange={(e) =>\n                  setProjectFormData({\n                    ...projectFormData,\n                    tags: e.target.value\n                      ? e.target.value\n                          .split(\",\")\n                          .map((tag) => tag.trim())\n                          .filter((tag) => tag !== \"\")\n                      : [],\n                  })\n                }\n                placeholder=\"e.g., React, Node.js, MongoDB (comma separated)\"\n              />\n            </div>\n\n            {!editingProject && (\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"projectImages\">Project Images (Optional)</Label>\n                <Input\n                  id=\"projectImages\"\n                  type=\"file\"\n                  multiple\n                  accept=\"image/*\"\n                  onChange={(e) =>\n                    setProjectImages(Array.from(e.target.files || []))\n                  }\n                />\n              </div>\n            )}\n\n            <div className=\"flex justify-end gap-2 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setShowProjectModal(false)}\n              >\n                Cancel\n              </Button>\n              <Button type=\"submit\" disabled={editFormLoading}>\n                {editFormLoading && (\n                  <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                )}\n                {editingProject ? \"Update\" : \"Add\"} Project\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Skills Modal */}\n      <Dialog open={skillsModalOpen} onOpenChange={setSkillsModalOpen}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Manage Skills</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label>Select your skills</Label>\n              <Select\n                isMulti\n                isSearchable\n                options={allSkills.map((skill) => ({\n                  value: skill.id,\n                  label: skill.name,\n                }))}\n                value={selectedSkills}\n                onChange={(newValue) => setSelectedSkills(newValue as any)}\n                className=\"mt-2\"\n                placeholder=\"Search and select skills...\"\n                noOptionsMessage={() => \"No skills found\"}\n                isLoading={skillsLoading}\n                data-testid=\"select-skills\"\n                classNames={{\n                  control: () =>\n                    \"border border-gray-300 rounded-md min-h-[40px]\",\n                  multiValue: () =>\n                    \"bg-cmo-primary/10 text-cmo-primary rounded-sm\",\n                  multiValueLabel: () => \"text-cmo-primary\",\n                  multiValueRemove: () => \"text-cmo-primary hover:text-red-500\",\n                }}\n              />\n            </div>\n            <div className=\"flex justify-end space-x-2\">\n              <Button\n                variant=\"outline\"\n                onClick={() => setSkillsModalOpen(false)}\n                disabled={skillsSaving}\n                data-testid=\"button-cancel-skills\"\n              >\n                Cancel\n              </Button>\n              <Button\n                onClick={handleSkillsSave}\n                disabled={skillsSaving}\n                data-testid=\"button-save-skills\"\n              >\n                {skillsSaving ? (\n                  <>\n                    <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                    Saving...\n                  </>\n                ) : (\n                  \"Save\"\n                )}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":124036},"client/src/pages/reset-password.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Link, useLocation } from 'wouter';\nimport { Button } from '../components/ui/button';\nimport { Input } from '../components/ui/input';\nimport { Label } from '../components/ui/label';\nimport { Eye, EyeOff, Lock, Loader2 } from 'lucide-react';\nimport { resetPassword, verifyResetCode } from '../lib/firebase';\nimport { useToast } from '../hooks/use-toast';\n\nexport function ResetPasswordPage() {\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [verifying, setVerifying] = useState(true);\n  const [resetCode, setResetCode] = useState('');\n  const [email, setEmail] = useState('');\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  \n  const [formData, setFormData] = useState({\n    password: '',\n    confirmPassword: '',\n  });\n\n  // Extract reset code from URL parameters\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const oobCode = urlParams.get('oobCode');\n    \n    if (oobCode) {\n      setResetCode(oobCode);\n      // Verify the reset code\n      verifyCode(oobCode);\n    } else {\n      toast({\n        title: \"Invalid reset link\",\n        description: \"This password reset link is invalid or expired.\",\n        variant: \"destructive\",\n      });\n      setLocation(\"/forgot-password\");\n    }\n  }, []);\n\n  const verifyCode = async (code: string) => {\n    try {\n      const userEmail = await verifyResetCode(code);\n      setEmail(userEmail);\n      setVerifying(false);\n    } catch (error: any) {\n      console.error(\"Reset code verification error:\", error);\n      toast({\n        title: \"Invalid reset link\",\n        description: \"This password reset link is invalid or expired.\",\n        variant: \"destructive\",\n      });\n      setLocation(\"/forgot-password\");\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (formData.password !== formData.confirmPassword) {\n      toast({\n        title: \"Password mismatch\",\n        description: \"Passwords do not match. Please try again.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (formData.password.length < 8) {\n      toast({\n        title: \"Password too short\",\n        description: \"Password must be at least 8 characters long.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setLoading(true);\n\n    try {\n      await resetPassword(resetCode, formData.password);\n      \n      toast({\n        title: \"Password updated!\",\n        description: \"Your password has been successfully updated.\",\n      });\n\n      // Navigate to success page\n      setLocation(\"/password-reset-success\");\n    } catch (error: any) {\n      console.error(\"Password reset error:\", error);\n      toast({\n        title: \"Password reset failed\",\n        description: error.message || \"Something went wrong. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (verifying) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"text-center\">\n          <Loader2 className=\"w-8 h-8 animate-spin mx-auto mb-4\" />\n          <p className=\"text-gray-600\">Verifying reset link...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex flex-col lg:flex-row\">\n      {/* Left Side - Hero Section */}\n      <div className=\"flex-1 bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-100 relative overflow-hidden lg:flex hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-cmo-primary/10 to-purple-600/20\"></div>\n        \n        {/* Geometric Background Pattern */}\n        <div className=\"absolute inset-0 opacity-20\">\n          <svg className=\"w-full h-full\" viewBox=\"0 0 400 400\" fill=\"none\">\n            <defs>\n              <pattern id=\"hexagons\" x=\"0\" y=\"0\" width=\"50\" height=\"43.4\" patternUnits=\"userSpaceOnUse\">\n                <path d=\"M25 0L50 14.4V35.6L25 50L0 35.6V14.4L25 0Z\" stroke=\"currentColor\" strokeWidth=\"1\" fill=\"none\"/>\n              </pattern>\n            </defs>\n            <rect width=\"100%\" height=\"100%\" fill=\"url(#hexagons)\" className=\"text-cmo-primary/30\"/>\n          </svg>\n        </div>\n\n        <div className=\"relative z-10 flex items-center justify-center w-full p-8\">\n          <div className=\"text-center max-w-md\">\n            <h1 className=\"text-2xl sm:text-3xl font-bold text-gray-800 mb-4\">\n              Professional network for construction industry\n            </h1>\n            <p className=\"text-sm sm:text-base text-gray-600 leading-relaxed\">\n              Connect with construction professionals, engineers, and project managers.\n              Build your professional network in the construction sector.\n            </p>\n          </div>\n        </div>\n\n        {/* Navigation Dots */}\n        <div className=\"absolute bottom-8 left-1/2 transform -translate-x-1/2 flex space-x-2\">\n          <div className=\"w-2 h-2 bg-cmo-primary rounded-full\"></div>\n          <div className=\"w-2 h-2 bg-gray-300 rounded-full\"></div>\n          <div className=\"w-2 h-2 bg-gray-300 rounded-full\"></div>\n        </div>\n      </div>\n\n      {/* Right Side - Reset Password Form */}\n      <div className=\"flex-1 flex items-center justify-center p-4 sm:p-8 bg-white min-h-screen lg:min-h-auto\">\n        <div className=\"w-full max-w-sm\">\n          {/* Logo */}\n          <div className=\"flex items-center mb-8\">\n            <div className=\"w-8 h-8 bg-cmo-primary rounded-lg flex items-center justify-center mr-3\">\n              <div className=\"w-4 h-4 bg-white rounded-sm\"></div>\n            </div>\n            <span className=\"text-lg font-bold text-cmo-text-primary\">CP</span>\n          </div>\n\n          {/* Lock Icon */}\n          <div className=\"w-12 h-12 bg-gray-100 rounded-full flex items-center justify-center mb-6\">\n            <Lock className=\"w-6 h-6 text-gray-600\" />\n          </div>\n\n          {/* Form Header */}\n          <div className=\"mb-8\">\n            <h2 className=\"text-lg font-bold text-cmo-text-primary mb-2\">Set new password</h2>\n            <p className=\"text-cmo-text-secondary\">Your new password must be different from previous used passwords.</p>\n          </div>\n\n          {/* Reset Form */}\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            {/* Email Display */}\n            <div className=\"text-sm text-gray-600 mb-4\">\n              Resetting password for: <strong>{email}</strong>\n            </div>\n\n            {/* New Password Field */}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">New Password</Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"password\"\n                  name=\"password\"\n                  type={showPassword ? \"text\" : \"password\"}\n                  placeholder=\"Enter your new password\"\n                  className=\"h-11 pr-10 border-gray-300 focus:border-gray-500\"\n                  value={formData.password}\n                  onChange={handleInputChange}\n                  disabled={loading}\n                  required\n                />\n                <button\n                  type=\"button\"\n                  onClick={() => setShowPassword(!showPassword)}\n                  className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n                  disabled={loading}\n                >\n                  {showPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                </button>\n              </div>\n            </div>\n\n            {/* Confirm Password Field */}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"confirmPassword\">Confirm Password</Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"confirmPassword\"\n                  name=\"confirmPassword\"\n                  type={showConfirmPassword ? \"text\" : \"password\"}\n                  placeholder=\"Confirm your new password\"\n                  className=\"h-11 pr-10 border-gray-300 focus:border-gray-500\"\n                  value={formData.confirmPassword}\n                  onChange={handleInputChange}\n                  disabled={loading}\n                  required\n                />\n                <button\n                  type=\"button\"\n                  onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                  className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n                  disabled={loading}\n                >\n                  {showConfirmPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                </button>\n              </div>\n            </div>\n\n            {/* Password Requirements */}\n            <div className=\"text-sm text-gray-600 space-y-1\">\n              <p>Must be at least 8 characters.</p>\n              <p>Must contain one special character.</p>\n            </div>\n\n            {/* Update Button */}\n            <Button \n              type=\"submit\" \n              className=\"w-full h-11 bg-cmo-primary hover:bg-cmo-primary/90\"\n              disabled={loading}\n            >\n              {loading ? (\n                <>\n                  <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                  Updating password...\n                </>\n              ) : (\n                'Update password'\n              )}\n            </Button>\n          </form>\n\n          {/* Footer */}\n          <div className=\"mt-8 text-center\">\n            <p className=\"text-sm text-gray-500 mb-4\">© 2024 CP Inc. All rights reserved.</p>\n            <div className=\"flex justify-center space-x-6 text-sm text-gray-500\">\n              <Link href=\"/privacy-policy\">\n                <Button variant=\"link\" className=\"p-0 h-auto text-sm text-gray-500 hover:text-gray-700\">\n                  Privacy Policy\n                </Button>\n              </Link>\n              <Link href=\"/terms-conditions\">\n                <Button variant=\"link\" className=\"p-0 h-auto text-sm text-gray-500 hover:text-gray-700\">\n                  Terms & Conditions\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":10609},"client/src/pages/security-dashboard-simple.tsx":{"content":"import React, { useEffect, useState } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../components/ui/card';\nimport { Badge } from '../components/ui/badge';\nimport { Button } from '../components/ui/button';\nimport { Progress } from '../components/ui/progress';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '../components/ui/tabs';\nimport { Alert, AlertDescription, AlertTitle } from '../components/ui/alert';\nimport { \n  Shield, \n  TrendingUp, \n  TrendingDown, \n  AlertTriangle, \n  CheckCircle2, \n  Clock, \n  DollarSign,\n  Users,\n  Lock,\n  Database,\n  Wifi,\n  BookOpen,\n  ArrowLeft\n} from 'lucide-react';\nimport { Link } from 'wouter';\n\ninterface SecurityAssessment {\n  id: string;\n  companyName: string;\n  industry: string;\n  companySize: string;\n  overallScore: number;\n  riskLevel: string;\n  currentSecurityTools: string[];\n  complianceRequirements: string[];\n  assessmentData: any;\n  recommendations?: SecurityRecommendation[];\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface SecurityRecommendation {\n  id: string;\n  category: string;\n  title: string;\n  description: string;\n  priority: string;\n  difficulty: string;\n  estimatedCost: string;\n  estimatedTimeToImplement: string;\n  benefits: string[];\n  steps: any[];\n  resources: any;\n  isImplemented: boolean;\n  implementationNotes?: string;\n  implementedAt?: string;\n}\n\ninterface SecurityMetric {\n  id: string;\n  metricType: string;\n  value: number;\n  previousValue?: number;\n  changePercentage?: number;\n  recordedAt: string;\n}\n\nconst getCategoryIcon = (category: string) => {\n  switch (category) {\n    case 'access_control': return <Lock className=\"w-4 h-4\" />;\n    case 'data_protection': return <Database className=\"w-4 h-4\" />;\n    case 'network_security': return <Wifi className=\"w-4 h-4\" />;\n    case 'employee_training': return <BookOpen className=\"w-4 h-4\" />;\n    default: return <Shield className=\"w-4 h-4\" />;\n  }\n};\n\nconst getPriorityColor = (priority: string) => {\n  switch (priority) {\n    case 'critical': return 'destructive';\n    case 'high': return 'destructive';\n    case 'medium': return 'default';\n    case 'low': return 'secondary';\n    default: return 'default';\n  }\n};\n\nconst getRiskColor = (risk: string) => {\n  switch (risk) {\n    case 'critical': return 'text-red-600';\n    case 'high': return 'text-orange-600';\n    case 'medium': return 'text-yellow-600';\n    case 'low': return 'text-green-600';\n    default: return 'text-gray-600';\n  }\n};\n\nexport function SecurityDashboard() {\n  const [assessment, setAssessment] = useState<SecurityAssessment | null>(null);\n  const [metrics, setMetrics] = useState<SecurityMetric[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Fetch data from API\n    const fetchData = async () => {\n      try {\n        // Fetch assessments\n        const assessmentsResponse = await fetch('/api/security/assessments');\n        const assessments = await assessmentsResponse.json();\n        \n        if (assessments.length > 0) {\n          // Fetch detailed assessment with recommendations\n          const detailResponse = await fetch(`/api/security/assessments/${assessments[0].id}`);\n          const detailedAssessment = await detailResponse.json();\n          setAssessment(detailedAssessment);\n        }\n\n        // Fetch metrics\n        const metricsResponse = await fetch('/api/security/metrics');\n        const metricsData = await metricsResponse.json();\n        setMetrics(metricsData);\n\n        setLoading(false);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  const handleImplementRecommendation = async (recommendationId: string) => {\n    try {\n      const response = await fetch(`/api/security/recommendations/${recommendationId}`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ \n          isImplemented: true, \n          implementationNotes: 'Marked as implemented' \n        }),\n      });\n\n      if (response.ok) {\n        const updatedRec = await response.json();\n        // Update the local state\n        if (assessment) {\n          const updatedRecommendations = assessment.recommendations?.map(rec => \n            rec.id === recommendationId ? updatedRec : rec\n          );\n          setAssessment({\n            ...assessment,\n            recommendations: updatedRecommendations\n          });\n        }\n      }\n    } catch (error) {\n      console.error('Error updating recommendation:', error);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"p-8\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/4\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            {[1, 2, 3, 4].map(i => (\n              <div key={i} className=\"h-32 bg-gray-200 rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const recommendations = assessment?.recommendations || [];\n  const criticalRecs = recommendations.filter(r => r.priority === 'critical');\n  const implementedRecs = recommendations.filter(r => r.isImplemented);\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <Link href=\"/\">\n                <Button variant=\"ghost\" size=\"sm\">\n                  <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                  Back to Home\n                </Button>\n              </Link>\n              <div>\n                <h1 className=\"text-2xl font-bold text-gray-900\">Security Dashboard</h1>\n                <p className=\"text-gray-600\">AI-powered security recommendations for {assessment?.companyName}</p>\n              </div>\n            </div>\n            <Badge variant=\"outline\" className=\"px-3 py-1\">\n              <Shield className=\"w-4 h-4 mr-2\" />\n              {assessment?.industry}\n            </Badge>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6 space-y-6\">\n        {/* Security Score Overview */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Security Score</CardTitle>\n              <Shield className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{assessment?.overallScore}/100</div>\n              <div className=\"flex items-center space-x-2 mt-2\">\n                <Progress value={assessment?.overallScore} className=\"flex-1\" />\n                <span className={`text-sm font-medium ${getRiskColor(assessment?.riskLevel || '')}`}>\n                  {assessment?.riskLevel?.toUpperCase()}\n                </span>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Critical Issues</CardTitle>\n              <AlertTriangle className=\"h-4 w-4 text-red-500\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-red-600\">{criticalRecs.length}</div>\n              <p className=\"text-xs text-muted-foreground\">\n                Require immediate attention\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Implemented</CardTitle>\n              <CheckCircle2 className=\"h-4 w-4 text-green-500\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-green-600\">{implementedRecs.length}</div>\n              <p className=\"text-xs text-muted-foreground\">\n                Out of {recommendations.length} recommendations\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Progress</CardTitle>\n              <TrendingUp className=\"h-4 w-4 text-blue-500\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">\n                {recommendations.length > 0 ? Math.round((implementedRecs.length / recommendations.length) * 100) : 0}%\n              </div>\n              <p className=\"text-xs text-muted-foreground\">\n                Completion rate\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Main Content Tabs */}\n        <Tabs defaultValue=\"recommendations\" className=\"space-y-4\">\n          <TabsList>\n            <TabsTrigger value=\"recommendations\">Recommendations</TabsTrigger>\n            <TabsTrigger value=\"metrics\">Security Metrics</TabsTrigger>\n            <TabsTrigger value=\"assessment\">Assessment Details</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"recommendations\" className=\"space-y-4\">\n            {criticalRecs.length > 0 && (\n              <Alert>\n                <AlertTriangle className=\"h-4 w-4\" />\n                <AlertTitle>Critical Security Issues Detected</AlertTitle>\n                <AlertDescription>\n                  You have {criticalRecs.length} critical security issues that require immediate attention.\n                </AlertDescription>\n              </Alert>\n            )}\n\n            <div className=\"grid gap-4\">\n              {recommendations.map((rec) => (\n                <Card key={rec.id} className={`${rec.priority === 'critical' ? 'border-red-200 bg-red-50/50' : ''}`}>\n                  <CardHeader>\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex items-start space-x-3\">\n                        {getCategoryIcon(rec.category)}\n                        <div>\n                          <CardTitle className=\"text-lg\">{rec.title}</CardTitle>\n                          <CardDescription className=\"mt-1\">{rec.description}</CardDescription>\n                        </div>\n                      </div>\n                      <div className=\"flex flex-col space-y-2\">\n                        <Badge variant={getPriorityColor(rec.priority) as any}>\n                          {rec.priority.toUpperCase()}\n                        </Badge>\n                        {rec.isImplemented && (\n                          <Badge variant=\"outline\" className=\"text-green-600 border-green-600\">\n                            <CheckCircle2 className=\"w-3 h-3 mr-1\" />\n                            Implemented\n                          </Badge>\n                        )}\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    {/* Implementation Details */}\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Clock className=\"w-4 h-4 text-gray-500\" />\n                        <span>Time: {rec.estimatedTimeToImplement}</span>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <DollarSign className=\"w-4 h-4 text-gray-500\" />\n                        <span>Cost: {rec.estimatedCost}</span>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Users className=\"w-4 h-4 text-gray-500\" />\n                        <span>Difficulty: {rec.difficulty}</span>\n                      </div>\n                    </div>\n\n                    {/* Benefits */}\n                    <div>\n                      <h4 className=\"font-semibold text-sm mb-2\">Benefits:</h4>\n                      <ul className=\"text-sm text-gray-600 space-y-1\">\n                        {rec.benefits.map((benefit, index) => (\n                          <li key={index} className=\"flex items-start space-x-2\">\n                            <CheckCircle2 className=\"w-3 h-3 text-green-500 mt-0.5 flex-shrink-0\" />\n                            <span>{benefit}</span>\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n\n                    {/* Action Button */}\n                    <div className=\"pt-4 border-t\">\n                      {rec.isImplemented ? (\n                        <div className=\"flex items-center text-green-600 text-sm\">\n                          <CheckCircle2 className=\"w-4 h-4 mr-2\" />\n                          Implemented on {rec.implementedAt ? new Date(rec.implementedAt).toLocaleDateString() : 'Unknown date'}\n                        </div>\n                      ) : (\n                        <Button \n                          onClick={() => handleImplementRecommendation(rec.id)}\n                          className=\"w-full sm:w-auto\"\n                        >\n                          Mark as Implemented\n                        </Button>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"metrics\" className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              {metrics?.map((metric) => (\n                <Card key={metric.id}>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium capitalize\">\n                      {metric.metricType.replace('_', ' ')}\n                    </CardTitle>\n                    {metric.changePercentage && metric.changePercentage > 0 ? (\n                      <TrendingUp className=\"h-4 w-4 text-green-600\" />\n                    ) : (\n                      <TrendingDown className=\"h-4 w-4 text-red-600\" />\n                    )}\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\">{metric.value}</div>\n                    {metric.changePercentage && (\n                      <p className={`text-xs ${metric.changePercentage > 0 ? 'text-green-600' : 'text-red-600'}`}>\n                        {metric.changePercentage > 0 ? '+' : ''}{metric.changePercentage}% from previous\n                      </p>\n                    )}\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"assessment\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Assessment Details</CardTitle>\n                <CardDescription>\n                  Comprehensive security assessment for {assessment?.companyName}\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <h4 className=\"font-semibold mb-2\">Company Information</h4>\n                    <dl className=\"space-y-1 text-sm\">\n                      <div className=\"flex justify-between\">\n                        <dt>Industry:</dt>\n                        <dd>{assessment?.industry}</dd>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <dt>Company Size:</dt>\n                        <dd className=\"capitalize\">{assessment?.companySize}</dd>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <dt>Risk Level:</dt>\n                        <dd className={`capitalize font-medium ${getRiskColor(assessment?.riskLevel || '')}`}>\n                          {assessment?.riskLevel}\n                        </dd>\n                      </div>\n                    </dl>\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold mb-2\">Current Security Tools</h4>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {assessment?.currentSecurityTools?.map((tool, index) => (\n                        <Badge key={index} variant=\"outline\">{tool}</Badge>\n                      ))}\n                    </div>\n                    <h4 className=\"font-semibold mb-2 mt-4\">Compliance Requirements</h4>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {assessment?.complianceRequirements?.map((req, index) => (\n                        <Badge key={index} variant=\"secondary\">{req}</Badge>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":17362},"client/src/pages/signup.tsx":{"content":"import React, { useState } from 'react';\nimport { Link, useLocation } from 'wouter';\nimport { Button } from '../components/ui/button';\nimport { Input } from '../components/ui/input';\nimport { Label } from '../components/ui/label';\nimport { Card, CardContent } from '../components/ui/card';\nimport { Eye, EyeOff, Loader2 } from 'lucide-react';\nimport { signInWithGoogle, signUpWithEmail } from '../lib/firebase';\nimport { useToast } from '../hooks/use-toast';\n\nexport function SignupPage() {\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [googleLoading, setGoogleLoading] = useState(false);\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [formData, setFormData] = useState({\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n  });\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n\n    // Validation\n    if (formData.password !== formData.confirmPassword) {\n      toast({\n        title: \"Password mismatch\",\n        description: \"Passwords do not match. Please try again.\",\n        variant: \"destructive\",\n      });\n      setLoading(false);\n      return;\n    }\n\n    try {\n      await signUpWithEmail(\n        formData.email,\n        formData.password,\n        formData.firstName,\n        formData.lastName\n      );\n\n      toast({\n        title: \"Account created successfully!\",\n        description: \"Please check your email for verification link.\",\n      });\n\n      // Redirect to email verification page\n      setLocation(\"/check-email\");\n    } catch (error: any) {\n      console.error(\"Signup error:\", error);\n      toast({\n        title: \"Signup failed\",\n        description: error.message || \"Something went wrong. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleGoogleSignup = async () => {\n    setGoogleLoading(true);\n\n    try {\n      await signInWithGoogle();\n      \n      toast({\n        title: \"Welcome!\",\n        description: \"Successfully signed up with Google.\",\n      });\n\n      // Redirect to home page\n      setLocation(\"/\");\n    } catch (error: any) {\n      console.error(\"Google signup error:\", error);\n      toast({\n        title: \"Google signup failed\",\n        description: error.message || \"Something went wrong. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setGoogleLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col lg:flex-row\">\n      {/* Left Side - Hero Section */}\n      <div className=\"flex-1 bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-100 relative overflow-hidden lg:flex hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-cmo-primary/10 to-purple-600/20\"></div>\n        \n        {/* Geometric Background Pattern */}\n        <div className=\"absolute inset-0 opacity-20\">\n          <svg className=\"w-full h-full\" viewBox=\"0 0 400 400\" fill=\"none\">\n            <defs>\n              <pattern id=\"hexagons\" x=\"0\" y=\"0\" width=\"50\" height=\"43.4\" patternUnits=\"userSpaceOnUse\">\n                <path d=\"M25 0L50 14.4V35.6L25 50L0 35.6V14.4L25 0Z\" stroke=\"currentColor\" strokeWidth=\"1\" fill=\"none\"/>\n              </pattern>\n            </defs>\n            <rect width=\"100%\" height=\"100%\" fill=\"url(#hexagons)\" className=\"text-cmo-primary/30\"/>\n          </svg>\n        </div>\n\n        <div className=\"relative z-10 flex items-center justify-center w-full p-8\">\n          <div className=\"text-center max-w-md\">\n            <h1 className=\"text-lg font-bold text-gray-800 mb-4\">\n              Professional network for construction industry\n            </h1>\n            <p className=\"text-sm sm:text-base text-gray-600 leading-relaxed\">\n              Connect with construction professionals, engineers, and project managers.\n              Build your professional network in the construction sector.\n            </p>\n          </div>\n        </div>\n\n        {/* Navigation Dots */}\n        <div className=\"absolute bottom-8 left-1/2 transform -translate-x-1/2 flex space-x-2\">\n          <div className=\"w-2 h-2 bg-cmo-primary rounded-full\"></div>\n          <div className=\"w-2 h-2 bg-gray-300 rounded-full\"></div>\n          <div className=\"w-2 h-2 bg-gray-300 rounded-full\"></div>\n        </div>\n      </div>\n\n      {/* Right Side - Signup Form */}\n      <div className=\"flex-1 flex items-center justify-center p-3 sm:p-6 bg-white min-h-screen lg:min-h-auto relative\">\n        <div className=\"w-full max-w-sm\">\n          {/* Mobile Header - Only visible on mobile */}\n          <div className=\"lg:hidden text-center mb-6\">\n            <h1 className=\"text-sm font-bold text-gray-800 mb-2\">\n              Join CP\n            </h1>\n            <p className=\"text-sm text-gray-600\">\n              Professional network for construction industry\n            </p>\n          </div>\n\n          {/* Logo */}\n          <div className=\"flex items-center mb-6\">\n            <div className=\"w-8 h-8 bg-cmo-primary rounded-lg flex items-center justify-center mr-3\">\n              <div className=\"w-4 h-4 bg-white rounded-sm\"></div>\n            </div>\n            <span className=\"text-sm font-bold text-cmo-text-primary\">CP</span>\n          </div>\n\n          {/* Form Header */}\n          <div className=\"mb-8\">\n            <h2 className=\"text-lg font-bold text-cmo-text-primary mb-2\">Create Your CP Account</h2>\n            <p className=\"text-cmo-text-secondary\">Join the professional construction community</p>\n          </div>\n\n          {/* Signup Form */}\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            {/* Name Fields */}\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-3\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"firstName\">First Name</Label>\n                <Input\n                  id=\"firstName\"\n                  name=\"firstName\"\n                  type=\"text\"\n                  placeholder=\"Enter your first name\"\n                  className=\"h-11\"\n                  value={formData.firstName}\n                  onChange={handleInputChange}\n                  required\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"lastName\">Last Name</Label>\n                <Input\n                  id=\"lastName\"\n                  name=\"lastName\"\n                  type=\"text\"\n                  placeholder=\"Enter your last name\"\n                  className=\"h-11\"\n                  value={formData.lastName}\n                  onChange={handleInputChange}\n                  required\n                />\n              </div>\n            </div>\n\n            {/* Email Field */}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                name=\"email\"\n                type=\"email\"\n                placeholder=\"Enter your email address\"\n                className=\"h-11\"\n                value={formData.email}\n                onChange={handleInputChange}\n                required\n              />\n            </div>\n\n            {/* Password Field */}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"password\"\n                  name=\"password\"\n                  type={showPassword ? \"text\" : \"password\"}\n                  placeholder=\"Enter your password\"\n                  className=\"h-11 pr-10\"\n                  value={formData.password}\n                  onChange={handleInputChange}\n                  required\n                />\n                <button\n                  type=\"button\"\n                  onClick={() => setShowPassword(!showPassword)}\n                  className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n                >\n                  {showPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                </button>\n              </div>\n            </div>\n\n            {/* Repeat Password Field */}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"confirmPassword\">Repeat Password</Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"confirmPassword\"\n                  name=\"confirmPassword\"\n                  type={showConfirmPassword ? \"text\" : \"password\"}\n                  placeholder=\"Repeat your password\"\n                  className=\"h-11 pr-10\"\n                  value={formData.confirmPassword}\n                  onChange={handleInputChange}\n                  required\n                />\n                <button\n                  type=\"button\"\n                  onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                  className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n                >\n                  {showConfirmPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                </button>\n              </div>\n            </div>\n\n            {/* Sign Up Button */}\n            <Button \n              type=\"submit\" \n              className=\"w-full h-11 bg-cmo-primary hover:bg-cmo-primary/90\"\n              disabled={loading}\n            >\n              {loading ? (\n                <>\n                  <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                  Creating Account...\n                </>\n              ) : (\n                \"Sign Up\"\n              )}\n            </Button>\n\n            {/* Social Login */}\n            <div className=\"space-y-3\">\n              <div className=\"relative\">\n                <div className=\"absolute inset-0 flex items-center\">\n                  <span className=\"w-full border-t border-gray-200\" />\n                </div>\n                <div className=\"relative flex justify-center text-xs uppercase\">\n                  <span className=\"bg-white px-2 text-gray-500\">OR SIGN UP WITH</span>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-3\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  className=\"h-10 text-gray-700 border-gray-200 hover:bg-gray-50 justify-center\"\n                  onClick={handleGoogleSignup}\n                  disabled={googleLoading}\n                >\n                  {googleLoading ? (\n                    <Loader2 className=\"w-5 h-5 mr-2 animate-spin\" />\n                  ) : (\n                    <svg className=\"w-5 h-5 mr-2\" viewBox=\"0 0 24 24\">\n                      <path fill=\"#4285F4\" d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"/>\n                      <path fill=\"#34A853\" d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"/>\n                      <path fill=\"#FBBC05\" d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"/>\n                      <path fill=\"#EA4335\" d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"/>\n                    </svg>\n                  )}\n                  Google\n                </Button>\n\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  className=\"h-10 text-gray-700 border-gray-200 hover:bg-gray-50 justify-center\"\n                >\n                  <svg className=\"w-5 h-5 mr-2\" fill=\"#1877F2\" viewBox=\"0 0 24 24\">\n                    <path d=\"M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z\"/>\n                  </svg>\n                  Facebook\n                </Button>\n              </div>\n            </div>\n\n            {/* Sign In Link */}\n            <div className=\"text-center\">\n              <span className=\"text-sm text-gray-500\">Already have an account? </span>\n              <Link href=\"/login\">\n                <Button variant=\"link\" className=\"p-0 h-auto text-sm font-semibold\">\n                  Sign in\n                </Button>\n              </Link>\n            </div>\n          </form>\n        </div>\n        \n        {/* Footer - Outside form container, at bottom of page */}\n        <div className=\"absolute bottom-6 left-4 right-4\">\n          <div className=\"flex justify-between items-center text-xs text-gray-500\">\n            <span>© 2024 CP Inc. All rights reserved.</span>\n            <div className=\"flex space-x-4\">\n              <Link href=\"/privacy-policy\" className=\"hover:text-gray-700\">\n                Privacy Policy\n              </Link>\n              <Link href=\"/terms-conditions\" className=\"hover:text-gray-700\">\n                Terms & Conditions\n              </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":13640},"client/src/pages/verification-success.tsx":{"content":"import React, { useEffect, useState } from 'react';\nimport { Link, useLocation } from 'wouter';\nimport { Button } from '../components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../components/ui/card';\nimport { CheckCircle, Loader2 } from 'lucide-react';\nimport { auth } from '../lib/firebase';\nimport { useToast } from '../hooks/use-toast';\n\nexport function VerificationSuccessPage() {\n  const [loading, setLoading] = useState(true);\n  const [verified, setVerified] = useState(false);\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    const checkVerification = async () => {\n      try {\n        // Wait for auth state to be resolved\n        await new Promise((resolve) => {\n          const unsubscribe = auth.onAuthStateChanged((user) => {\n            unsubscribe();\n            resolve(user);\n          });\n        });\n\n        // Reload user to get updated verification status\n        if (auth.currentUser) {\n          await auth.currentUser.reload();\n          \n          if (auth.currentUser.emailVerified) {\n            setVerified(true);\n            toast({\n              title: \"Email verified successfully!\",\n              description: \"You can now access all features of CP.\",\n            });\n          } else {\n            toast({\n              title: \"Email not verified\",\n              description: \"Please check your email and click the verification link.\",\n              variant: \"destructive\",\n            });\n          }\n        }\n      } catch (error) {\n        console.error(\"Verification check error:\", error);\n        toast({\n          title: \"Verification check failed\",\n          description: \"Something went wrong. Please try again.\",\n          variant: \"destructive\",\n        });\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    checkVerification();\n  }, [toast]);\n\n  const handleContinue = () => {\n    setLocation('/');\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <Card className=\"w-full max-w-md\">\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center\">\n              <Loader2 className=\"w-8 h-8 mx-auto mb-4 animate-spin text-cmo-primary\" />\n              <h3 className=\"text-lg font-semibold mb-2\">Verifying your email...</h3>\n              <p className=\"text-gray-600\">Please wait while we verify your email address.</p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"mx-auto mb-4\">\n            <div className={`w-16 h-16 rounded-full flex items-center justify-center ${\n              verified ? 'bg-green-100' : 'bg-red-100'\n            }`}>\n              <CheckCircle className={`w-8 h-8 ${\n                verified ? 'text-green-600' : 'text-red-600'\n              }`} />\n            </div>\n          </div>\n          <CardTitle className=\"text-2xl\">\n            {verified ? 'Email Verified!' : 'Verification Pending'}\n          </CardTitle>\n          <CardDescription>\n            {verified \n              ? 'Your email has been successfully verified. Welcome to CP!'\n              : 'Your email has not been verified yet. Please check your email and click the verification link.'\n            }\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {verified ? (\n            <Button \n              onClick={handleContinue}\n              className=\"w-full bg-cmo-primary hover:bg-cmo-primary/90\"\n            >\n              Continue to CP\n            </Button>\n          ) : (\n            <div className=\"space-y-3\">\n              <Button \n                onClick={() => window.location.reload()}\n                variant=\"outline\"\n                className=\"w-full\"\n              >\n                Check Again\n              </Button>\n              <Link href=\"/login\">\n                <Button \n                  variant=\"ghost\"\n                  className=\"w-full\"\n                >\n                  Back to Login\n                </Button>\n              </Link>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":4392},"client/src/types/chat.ts":{"content":"export interface Conversation {\n  id: string;\n  participants: string[];\n  lastMessage: string;\n  lastMessageTime: Date;\n  updatedBy: string;\n}\n\nexport interface Message {\n  id: string;\n  senderId: string;\n  text?: string;\n  mediaUrl?: string;\n  type: \"text\" | \"image\" | \"video\";\n  timestamp: Date;\n  status: \"sent\" | \"seen\";\n}\n\nexport interface UserProfile {\n  uid: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  profilePic?: string;\n  photoUrl?: string;\n}\n\nexport interface ChatUser {\n  uid: string;\n  displayName: string;\n  photoURL?: string;\n}","size_bytes":567},"client/src/types/env.d.ts":{"content":"/// <reference types=\"vite/client\" />\n\ninterface ImportMetaEnv {\n  readonly VITE_FIREBASE_API_KEY: string\n  readonly VITE_FIREBASE_APP_ID: string\n  readonly VITE_FIREBASE_PROJECT_ID: string\n  readonly VITE_API_BASE_URL?: string\n  readonly VITE_GEO_API_BASE_URL?: string\n}\n\ninterface ImportMeta {\n  readonly env: ImportMetaEnv\n}","size_bytes":327},"client/src/types/schema.ts":{"content":"export interface User {\n  id: string;\n  username: string;\n  name: string;\n  email?: string;\n  avatar?: string;\n  title?: string;\n  company?: string;\n  bio?: string;\n  description?: string;\n  points?: number;\n  answersCount?: number;\n  questionsCount?: number;\n  posts?: number;\n  views?: number;\n  thanks?: number;\n  insightful?: number;\n  level?: string;\n  badges?: string[];\n  verified?: boolean;\n  createdAt?: Date;\n}\n\nexport interface Question {\n  id: string;\n  title: string;\n  content: string;\n  authorId: string;\n  author: User;\n  createdAt: Date;\n  updatedAt?: Date;\n  tags?: string[];\n  category?: string;\n  space?: string;\n  upvotes?: number;\n  downvotes?: number;\n  answersCount?: number;\n  isHelpful?: boolean;\n  priority?: 'low' | 'medium' | 'high';\n}\n\nexport interface Answer {\n  id: string;\n  content: string;\n  authorId: string;\n  author: User;\n  questionId: string;\n  createdAt: Date;\n  updatedAt: Date;\n  upvotes: number;\n  downvotes: number;\n  isAccepted?: boolean;\n  isHelpful?: boolean;\n}\n\nexport interface Space {\n  id: string;\n  name: string;\n  description?: string;\n  memberCount?: number;\n  questionsCount?: number;\n  hashtag?: string;\n  color?: string;\n  icon?: string;\n}\n\nexport interface Vendor {\n  id: string;\n  name: string;\n  description?: string;\n  logo?: string;\n  website?: string;\n  category: string;\n  location?: string;\n  verified?: boolean;\n}","size_bytes":1380},"client/src/components/chat/ChatHeader.tsx":{"content":"import React, { useState } from 'react';\nimport { ArrowLeft, MoreVertical, UserX, UserCheck } from 'lucide-react';\nimport { Avatar, AvatarFallback, AvatarImage } from '../ui/avatar';\nimport { Button } from '../ui/button';\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '../ui/dropdown-menu';\nimport { useLocation } from 'wouter';\nimport { useBlockUser, useBlockingStatus } from '../../hooks/useChat';\n\ninterface ChatHeaderProps {\n  otherUser: {\n    displayName: string;\n    photoURL?: string;\n    isOnline?: boolean;\n    username?: string;\n  };\n  otherUserId?: string;\n}\n\nexport const ChatHeader: React.FC<ChatHeaderProps> = ({ otherUser, otherUserId }) => {\n  const [, setLocation] = useLocation();\n  const { blockUser, unblockUser } = useBlockUser();\n  const { isBlockedByMe, isBlockedByThem, loading: blockingLoading } = useBlockingStatus(otherUserId);\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  const handleBlockUser = async () => {\n    if (!otherUserId || isProcessing) return;\n    \n    setIsProcessing(true);\n    try {\n      await blockUser(otherUserId);\n    } catch (error) {\n      console.error('Error blocking user:', error);\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleUnblockUser = async () => {\n    if (!otherUserId || isProcessing) return;\n    \n    setIsProcessing(true);\n    try {\n      await unblockUser(otherUserId);\n    } catch (error) {\n      console.error('Error unblocking user:', error);\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  return (\n    <div className=\"flex items-center justify-between p-4 border-b border-cmo-border bg-white dark:bg-gray-900\">\n      <div className=\"flex items-center space-x-3\">\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={() => setLocation('/messages')}\n          className=\"lg:hidden\"\n        >\n          <ArrowLeft className=\"w-4 h-4\" />\n        </Button>\n        \n        <div \n          className=\"flex items-center space-x-3 cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-800 rounded-lg p-2 -m-2\"\n          onClick={() => {\n            const navigateToUsername = otherUser.username || otherUserId;\n            if (navigateToUsername) {\n              setLocation(`/u/${navigateToUsername}`);\n            }\n          }}\n        >\n          <Avatar className=\"w-10 h-10\">\n            <AvatarImage src={otherUser.photoURL} />\n            <AvatarFallback>\n              {otherUser.displayName.split(' ').map(n => n[0]).join('')}\n            </AvatarFallback>\n          </Avatar>\n          \n          <div>\n            <h3 className=\"font-medium text-cmo-text-primary hover:text-cmo-primary\">{otherUser.displayName}</h3>\n          {isBlockedByMe && (\n            <p className=\"text-sm text-red-500\">Blocked</p>\n          )}\n          {isBlockedByThem && !isBlockedByMe && (\n            <p className=\"text-sm text-red-500\">You are blocked</p>\n          )}\n          {!isBlockedByMe && !isBlockedByThem && otherUser.isOnline && (\n            <p className=\"text-sm text-green-500\">Online</p>\n          )}\n          {!isBlockedByMe && !isBlockedByThem && !otherUser.isOnline && (\n            <p className=\"text-sm text-cmo-text-secondary\">Last seen recently</p>\n          )}\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"flex items-center space-x-2\">\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"ghost\" size=\"sm\">\n              <MoreVertical className=\"w-4 h-4\" />\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\">\n            {!blockingLoading && otherUserId && (\n              <>\n                {isBlockedByMe ? (\n                  <DropdownMenuItem \n                    onClick={handleUnblockUser}\n                    disabled={isProcessing}\n                    className=\"text-green-600\"\n                  >\n                    <UserCheck className=\"w-4 h-4 mr-2\" />\n                    Unblock User\n                  </DropdownMenuItem>\n                ) : (\n                  <DropdownMenuItem \n                    onClick={handleBlockUser}\n                    disabled={isProcessing || isBlockedByThem}\n                    className=\"text-red-600\"\n                  >\n                    <UserX className=\"w-4 h-4 mr-2\" />\n                    Block User\n                  </DropdownMenuItem>\n                )}\n              </>\n            )}\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </div>\n    </div>\n  );\n};","size_bytes":4554},"client/src/components/chat/MessageBubble.tsx":{"content":"import React from 'react';\nimport { format } from 'date-fns';\nimport { Message } from '../../types/chat';\nimport { Avatar, AvatarFallback, AvatarImage } from '../ui/avatar';\nimport { auth } from '../../lib/firebase';\n\ninterface MessageBubbleProps {\n  message: Message;\n  otherUserPhoto?: string;\n  otherUserName?: string;\n  showAvatar?: boolean;\n}\n\nexport const MessageBubble: React.FC<MessageBubbleProps> = ({ \n  message, \n  otherUserPhoto, \n  otherUserName,\n  showAvatar = true \n}) => {\n  const isCurrentUser = message.senderId === auth.currentUser?.uid;\n  \n  return (\n    <div className={`flex items-end space-x-2 mb-4 ${isCurrentUser ? 'flex-row-reverse space-x-reverse' : ''}`}>\n      {showAvatar && !isCurrentUser && (\n        <Avatar className=\"w-8 h-8\">\n          <AvatarImage src={otherUserPhoto} />\n          <AvatarFallback>\n            {otherUserName?.split(' ').map(n => n[0]).join('') || 'U'}\n          </AvatarFallback>\n        </Avatar>\n      )}\n      \n      <div className={`max-w-xs lg:max-w-md ${isCurrentUser ? 'ml-auto' : ''}`}>\n        <div\n          className={`px-4 py-2 rounded-lg ${\n            isCurrentUser\n              ? 'bg-cmo-primary text-white'\n              : 'bg-gray-100 dark:bg-gray-800 text-cmo-text-primary dark:text-gray-100'\n          }`}\n        >\n          {message.type === 'text' && message.text && (\n            <p className=\"text-sm whitespace-pre-wrap\">{message.text}</p>\n          )}\n          \n          {message.type === 'image' && message.mediaUrl && (\n            <div className=\"max-w-sm\">\n              <img\n                src={message.mediaUrl}\n                alt=\"Shared image\"\n                className=\"rounded-lg w-full h-auto\"\n                style={{ maxHeight: '300px' }}\n              />\n            </div>\n          )}\n          \n          {message.type === 'video' && message.mediaUrl && (\n            <div className=\"max-w-sm\">\n              <video\n                src={message.mediaUrl}\n                controls\n                className=\"rounded-lg w-full h-auto\"\n                style={{ maxHeight: '300px' }}\n              />\n            </div>\n          )}\n        </div>\n        \n        <p className={`text-xs text-cmo-text-secondary mt-1 ${isCurrentUser ? 'text-right' : 'text-left'}`}>\n          {format(message.timestamp, 'HH:mm')}\n        </p>\n      </div>\n      \n      {showAvatar && isCurrentUser && (\n        <div className=\"w-8 h-8\" /> // Placeholder for alignment\n      )}\n    </div>\n  );\n};","size_bytes":2477},"client/src/components/chat/MessageInput.tsx":{"content":"import React, { useState, useRef } from 'react';\nimport { Send, Image, Video, Paperclip } from 'lucide-react';\nimport { Button } from '../ui/button';\nimport { Textarea } from '../ui/textarea';\nimport { useToast } from '../../hooks/use-toast';\n\ninterface MessageInputProps {\n  onSendMessage: (text: string) => Promise<void>;\n  onSendMedia: (file: File, type: 'image' | 'video') => Promise<void>;\n  disabled?: boolean;\n  isBlocked?: boolean;\n  blockMessage?: string;\n}\n\nexport const MessageInput: React.FC<MessageInputProps> = ({\n  onSendMessage,\n  onSendMedia,\n  disabled = false,\n  isBlocked = false,\n  blockMessage = \"Messaging is disabled\"\n}) => {\n  const [text, setText] = useState('');\n  const [sending, setSending] = useState(false);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!text.trim() || sending || disabled || isBlocked) return;\n\n    setSending(true);\n    try {\n      await onSendMessage(text);\n      setText('');\n    } catch (error) {\n      console.error('Error sending message:', error);\n      toast({\n        title: \"Failed to send message\",\n        description: \"Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setSending(false);\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSubmit(e);\n    }\n  };\n\n  const handleFileSelect = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (!file) return;\n\n    // Validate file size (10MB limit)\n    if (file.size > 10 * 1024 * 1024) {\n      toast({\n        title: \"File too large\",\n        description: \"Please select a file smaller than 10MB.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Determine file type\n    let mediaType: 'image' | 'video';\n    if (file.type.startsWith('image/')) {\n      mediaType = 'image';\n    } else if (file.type.startsWith('video/')) {\n      mediaType = 'video';\n    } else {\n      toast({\n        title: \"Unsupported file type\",\n        description: \"Please select an image or video file.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setSending(true);\n    try {\n      console.log('Uploading file:', file.name, 'Type:', mediaType, 'Size:', file.size);\n      await onSendMedia(file, mediaType);\n      toast({\n        title: \"Media sent successfully\",\n        description: \"Your file has been shared.\",\n      });\n    } catch (error: any) {\n      console.error('Error sending media:', error);\n      let errorMessage = \"Please try again.\";\n      \n      if (error.code === 'storage/unauthorized') {\n        errorMessage = \"Upload permission denied. Please check Firebase Storage rules.\";\n      } else if (error.code === 'storage/canceled') {\n        errorMessage = \"Upload was canceled.\";\n      } else if (error.code === 'storage/unknown') {\n        errorMessage = \"Unknown upload error occurred.\";\n      }\n      \n      toast({\n        title: \"Failed to send media\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    } finally {\n      setSending(false);\n      // Reset file input\n      if (fileInputRef.current) {\n        fileInputRef.current.value = '';\n      }\n    }\n  };\n\n  return (\n    <div className=\"p-4 border-t border-cmo-border bg-white dark:bg-gray-900\">\n      <form onSubmit={handleSubmit} className=\"flex items-end space-x-2\">\n        <div className=\"flex-1\">\n          <div className=\"relative\">\n            <Textarea\n              value={text}\n              onChange={(e) => setText(e.target.value)}\n              onKeyDown={handleKeyPress}\n              placeholder=\"Type a message...\"\n              disabled={disabled || sending || isBlocked}\n              className=\"pr-20 min-h-[40px] max-h-32 resize-none\"\n              rows={1}\n            />\n            \n            <div className=\"absolute right-2 top-1/2 -translate-y-1/2 flex items-center space-x-1\">\n              <input\n                ref={fileInputRef}\n                type=\"file\"\n                accept=\"image/*,video/*\"\n                onChange={handleFileSelect}\n                className=\"hidden\"\n              />\n              \n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => fileInputRef.current?.click()}\n                disabled={disabled || sending || isBlocked}\n                className=\"h-8 w-8 p-0 text-cmo-text-secondary hover:text-cmo-primary\"\n              >\n                <Paperclip className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n        \n        <Button \n          type=\"submit\" \n          disabled={!text.trim() || disabled || sending || isBlocked}\n          className=\"h-10 w-10 p-0\"\n        >\n          <Send className=\"w-4 h-4\" />\n        </Button>\n      </form>\n      \n      {isBlocked && (\n        <div className=\"mt-2 p-3 bg-red-50 border border-red-200 rounded-lg\">\n          <p className=\"text-sm text-red-600 text-center\">{blockMessage}</p>\n        </div>\n      )}\n    </div>\n  );\n};","size_bytes":5212},"client/src/components/chat/MessageList.tsx":{"content":"import React, { useEffect, useRef, useState } from 'react';\nimport { Button } from '../ui/button';\nimport { MessageBubble } from './MessageBubble';\nimport { Message } from '../../types/chat';\n\ninterface MessageListProps {\n  messages: Message[];\n  loading: boolean;\n  hasMore: boolean;\n  otherUser: {\n    displayName: string;\n    photoURL?: string;\n  };\n  onLoadMore: () => Promise<void>;\n}\n\nexport const MessageList: React.FC<MessageListProps> = ({\n  messages,\n  loading,\n  hasMore,\n  otherUser,\n  onLoadMore\n}) => {\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const messagesContainerRef = useRef<HTMLDivElement>(null);\n  const [loadingMore, setLoadingMore] = useState(false);\n  const [shouldScrollToBottom, setShouldScrollToBottom] = useState(true);\n\n  // Auto-scroll to bottom on new messages\n  useEffect(() => {\n    if (shouldScrollToBottom && messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  }, [messages, shouldScrollToBottom]);\n\n  // Check if user is near bottom to decide whether to auto-scroll\n  const handleScroll = () => {\n    if (messagesContainerRef.current) {\n      const { scrollTop, scrollHeight, clientHeight } = messagesContainerRef.current;\n      const isNearBottom = scrollHeight - scrollTop - clientHeight < 100;\n      setShouldScrollToBottom(isNearBottom);\n    }\n  };\n\n  const handleLoadMore = async () => {\n    if (loadingMore || !hasMore) return;\n    \n    setLoadingMore(true);\n    try {\n      await onLoadMore();\n    } finally {\n      setLoadingMore(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex-1 flex items-center justify-center\">\n        <div className=\"text-cmo-text-secondary\">Loading messages...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div \n      ref={messagesContainerRef}\n      className=\"flex-1 overflow-y-auto p-4 space-y-4\"\n      onScroll={handleScroll}\n    >\n      {hasMore && (\n        <div className=\"flex justify-center mb-4\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={handleLoadMore}\n            disabled={loadingMore}\n          >\n            {loadingMore ? 'Loading...' : 'Load older messages'}\n          </Button>\n        </div>\n      )}\n      \n      {messages.length === 0 ? (\n        <div className=\"flex-1 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <p className=\"text-cmo-text-secondary mb-2\">No messages yet</p>\n            <p className=\"text-sm text-cmo-text-secondary\">\n              Start a conversation with {otherUser.displayName}\n            </p>\n          </div>\n        </div>\n      ) : (\n        <>\n          {messages.map((message, index) => {\n            const prevMessage = messages[index - 1];\n            const showAvatar = !prevMessage || prevMessage.senderId !== message.senderId;\n            \n            return (\n              <MessageBubble\n                key={message.id}\n                message={message}\n                otherUserPhoto={otherUser.photoURL}\n                otherUserName={otherUser.displayName}\n                showAvatar={showAvatar}\n              />\n            );\n          })}\n          <div ref={messagesEndRef} />\n        </>\n      )}\n    </div>\n  );\n};","size_bytes":3241},"client/src/components/layout/header.tsx":{"content":"import React from \"react\";\nimport { Search, MoreHorizontal, Home, User, Edit, Flag, Share, Settings, FileText, Briefcase, Users, MessageSquare, RefreshCw, LogOut } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Avatar, AvatarFallback, AvatarImage } from '../ui/avatar';\nimport { Button } from '../ui/button';\nimport { \n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '../ui/dropdown-menu';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { auth } from '../../lib/firebase';\nimport { useToast } from '../../hooks/use-toast';\n\nexport default function Header() {\n  const { userProfile } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const handleLogout = async () => {\n    try {\n      await auth.signOut();\n      localStorage.removeItem('rememberMe');\n      toast({\n        title: \"Signed out successfully\",\n        description: \"You have been logged out of your account.\",\n      });\n      setLocation('/login');\n    } catch (error) {\n      console.error('Error signing out:', error);\n      toast({\n        title: \"Logout failed\",\n        description: \"Something went wrong. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleProfileClick = () => {\n    setLocation('/profile');\n  };\n  return (\n    <header className=\"bg-white border-b border-cmo-border sticky top-0 z-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          {/* Logo */}\n          <div className=\"flex items-center\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 bg-cmo-primary rounded-lg flex items-center justify-center\">\n                <div className=\"grid grid-cols-2 gap-0.5\">\n                  <div className=\"w-1.5 h-1.5 bg-white rounded-full\"></div>\n                  <div className=\"w-1.5 h-1.5 bg-white rounded-full\"></div>\n                  <div className=\"w-1.5 h-1.5 bg-white rounded-full\"></div>\n                  <div className=\"w-1.5 h-1.5 bg-white rounded-full\"></div>\n                </div>\n              </div>\n              <span className=\"text-lg font-bold text-cmo-text-primary\">CP</span>\n            </div>\n          </div>\n\n          {/* Search Bar */}\n          <div className=\"flex-1 max-w-lg mx-8\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-cmo-text-secondary w-4 h-4\" />\n              <input\n                type=\"text\"\n                placeholder=\"Search...\"\n                className=\"w-full pl-10 pr-4 py-2 border border-cmo-border rounded-lg focus:ring-2 focus:ring-cmo-primary focus:border-transparent outline-none\"\n              />\n            </div>\n          </div>\n\n          {/* Navigation Menu with Icons */}\n          <nav className=\"hidden lg:flex items-center space-x-6\">\n            <a href=\"/\" className=\"flex flex-col items-center text-cmo-primary\">\n              <Home className=\"w-5 h-5\" />\n              <span className=\"text-xs mt-1\">Home</span>\n            </a>\n            <a href=\"/news\" className=\"flex flex-col items-center text-cmo-text-secondary hover:text-cmo-primary transition-colors\">\n              <FileText className=\"w-5 h-5\" />\n              <span className=\"text-xs mt-1\">News</span>\n            </a>\n            <a href=\"/articles\" className=\"flex flex-col items-center text-cmo-text-secondary hover:text-cmo-primary transition-colors\">\n              <FileText className=\"w-5 h-5\" />\n              <span className=\"text-xs mt-1\">Articles</span>\n            </a>\n            <a href=\"/jobs\" className=\"flex flex-col items-center text-cmo-text-secondary hover:text-cmo-primary transition-colors\">\n              <Briefcase className=\"w-5 h-5\" />\n              <span className=\"text-xs mt-1\">Jobs</span>\n            </a>\n            <a href=\"/forum\" className=\"flex flex-col items-center text-cmo-text-secondary hover:text-cmo-primary transition-colors\">\n              <Users className=\"w-5 h-5\" />\n              <span className=\"text-xs mt-1\">Forum</span>\n            </a>\n            <a href=\"/messages\" className=\"flex flex-col items-center text-cmo-text-secondary hover:text-cmo-primary transition-colors\">\n              <MessageSquare className=\"w-5 h-5\" />\n              <span className=\"text-xs mt-1\">Messages</span>\n            </a>\n            <a href=\"/updates\" className=\"flex flex-col items-center text-cmo-text-secondary hover:text-cmo-primary transition-colors\">\n              <RefreshCw className=\"w-5 h-5\" />\n              <span className=\"text-xs mt-1\">Updates</span>\n            </a>\n\n          </nav>\n\n          {/* Right Section */}\n          <div className=\"flex items-center space-x-4\">\n            {/* My Profile Button - Direct redirect */}\n            <Button \n              variant=\"ghost\" \n              className=\"flex items-center gap-2 text-cmo-text-secondary hover:text-cmo-primary\"\n              onClick={handleProfileClick}\n            >\n              <Avatar className=\"w-8 h-8\">\n                <AvatarImage src={userProfile?.profilePic || \"\"} />\n                <AvatarFallback>\n                  {userProfile?.firstName?.charAt(0) || 'U'}{userProfile?.lastName?.charAt(0) || ''}\n                </AvatarFallback>\n              </Avatar>\n              <span>My Profile</span>\n            </Button>\n\n            {/* Three Dots Menu */}\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" size=\"icon\" className=\"text-cmo-text-secondary hover:text-cmo-primary\">\n                  <MoreHorizontal className=\"w-5 h-5\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\" className=\"w-48\">\n                <DropdownMenuItem>\n                  <Settings className=\"mr-2 h-4 w-4\" />\n                  <span>Settings</span>\n                </DropdownMenuItem>\n                <DropdownMenuItem>\n                  <User className=\"mr-2 h-4 w-4\" />\n                  <span>My Account</span>\n                </DropdownMenuItem>\n                <DropdownMenuItem>\n                  <FileText className=\"mr-2 h-4 w-4\" />\n                  <span>Privacy Policy</span>\n                </DropdownMenuItem>\n                <DropdownMenuItem>\n                  <FileText className=\"mr-2 h-4 w-4\" />\n                  <span>Terms & Conditions</span>\n                </DropdownMenuItem>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem onClick={handleLogout} className=\"text-red-600\">\n                  <LogOut className=\"mr-2 h-4 w-4\" />\n                  <span>Logout</span>\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}","size_bytes":6939},"client/src/components/layout/sidebar-left.tsx":{"content":"import React from \"react\";\nimport { Search, Plus } from \"lucide-react\";\nimport { Input } from \"../ui/input\";\nimport { Button } from \"../ui/button\";\nimport { Checkbox } from \"../ui/checkbox\";\n\nexport default function SidebarLeft() {\n  return (\n    <div className=\"space-y-6\">\n      {/* Search and Filters */}\n      <div className=\"bg-cmo-card rounded-lg border border-cmo-border p-6\">\n        {/* Search */}\n        <div className=\"mb-6\">\n          <div className=\"relative\">\n            <Input \n              type=\"text\" \n              placeholder=\"Search...\" \n              className=\"w-full pl-10 pr-4 py-2 border border-cmo-border rounded-lg focus:ring-2 focus:ring-cmo-primary focus:border-transparent\"\n            />\n            <Search className=\"absolute left-3 top-3 h-4 w-4 text-cmo-text-secondary\" />\n          </div>\n        </div>\n\n        {/* Filter Categories */}\n        <div className=\"space-y-2\">\n          <Button className=\"w-full justify-start bg-cmo-primary text-white hover:bg-cmo-primary/90\">\n            All (20)\n          </Button>\n          <Button variant=\"ghost\" className=\"w-full justify-start text-cmo-text-secondary hover:bg-gray-50\">\n            My Peers (18)\n          </Button>\n          <Button variant=\"ghost\" className=\"w-full justify-start text-cmo-text-secondary hover:bg-gray-50\">\n            My Experts\n          </Button>\n        </div>\n      </div>\n\n      {/* My Network Section */}\n      <div className=\"bg-cmo-card rounded-lg border border-cmo-border p-6\">\n        <h3 className=\"font-semibold text-cmo-text-primary mb-4\">My Network</h3>\n        <div className=\"space-y-3\">\n          <Button variant=\"link\" className=\"w-full justify-start text-cmo-primary hover:underline p-0\">\n            Share Article\n          </Button>\n          <Button variant=\"link\" className=\"w-full justify-start text-cmo-primary hover:underline p-0\">\n            Share Experience\n          </Button>\n          <Button variant=\"link\" className=\"w-full justify-start text-cmo-primary hover:underline p-0\">\n            Ask Question\n          </Button>\n        </div>\n      </div>\n\n      {/* Build Marketing Section */}\n      <div className=\"bg-cmo-card rounded-lg border border-cmo-border p-6\">\n        <h3 className=\"font-semibold text-cmo-text-primary mb-4\">Build your marketing</h3>\n        <div className=\"space-y-3\">\n          <Button variant=\"ghost\" className=\"w-full justify-start py-2 h-auto\">\n            <Plus className=\"h-4 w-4 text-cmo-primary mr-3\" />\n            <span>Invite a person</span>\n          </Button>\n          <div className=\"flex items-center space-x-3 py-2\">\n            <Checkbox />\n            <span className=\"text-cmo-text-secondary\">Fill out your profile</span>\n          </div>\n          <div className=\"flex items-center space-x-3 py-2\">\n            <Checkbox />\n            <span className=\"text-cmo-text-secondary\">Ask your first question</span>\n          </div>\n          <div className=\"flex items-center space-x-3 py-2\">\n            <Checkbox checked />\n            <span className=\"text-green-600\">Answer a question</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3146},"client/src/components/layout/sidebar-right.tsx":{"content":"import React from \"react\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"../ui/avatar\";\nimport { Button } from \"../ui/button\";\nimport { Badge } from \"../ui/badge\";\nimport { mockUsers, mockSpaces, mockVendors } from \"../../lib/mock-data\";\n\nexport default function SidebarRight() {\n  return (\n    <div className=\"space-y-6\">\n      {/* Questions & Answers Stats */}\n      <div className=\"bg-cmo-card rounded-lg border border-cmo-border p-6\">\n        <p className=\"text-cmo-text-secondary text-sm\">\n          Questions & Answers (12) • Project & Vendors (3) • Articles &\n        </p>\n      </div>\n\n      {/* User Profile Card */}\n      <div className=\"bg-cmo-card rounded-lg border border-cmo-border p-6\">\n        <div className=\"flex items-center space-x-3 mb-4\">\n          <Avatar className=\"w-10 h-10\">\n            <AvatarImage src={mockUsers[1].avatar} />\n            <AvatarFallback>{mockUsers[1].name.charAt(0)}</AvatarFallback>\n          </Avatar>\n          <div>\n            <h3 className=\"font-semibold text-cmo-text-primary\">{mockUsers[1].name}</h3>\n            <p className=\"text-cmo-text-secondary text-sm\">{mockUsers[1].title} • Nov 20</p>\n            <p className=\"text-cmo-text-secondary text-sm\">Answering a previous • Retouch #content-marketing #branding</p>\n          </div>\n        </div>\n        \n        <h4 className=\"font-semibold text-cmo-text-primary mb-3\">Community Contribution</h4>\n        \n        <div className=\"space-y-2 text-sm\">\n          <div className=\"flex justify-between\">\n            <span className=\"text-cmo-text-secondary\">Posts:</span>\n            <span className=\"font-semibold\">{mockUsers[1].posts}</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-cmo-text-secondary\">Views:</span>\n            <span className=\"font-semibold\">{mockUsers[1].views}</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-cmo-text-secondary\">Thanks:</span>\n            <span className=\"font-semibold\">{mockUsers[1].thanks}</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-cmo-text-secondary\">Insightful:</span>\n            <span className=\"font-semibold\">{mockUsers[1].insightful}</span>\n          </div>\n        </div>\n      </div>\n\n      {/* My Spaces */}\n      <div className=\"bg-cmo-card rounded-lg border border-cmo-border p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"font-semibold text-cmo-text-primary\">My Spaces</h3>\n          <Button variant=\"link\" className=\"text-cmo-primary text-sm hover:underline p-0\">\n            Edit\n          </Button>\n        </div>\n        \n        <div className=\"flex flex-wrap gap-2\">\n          {mockSpaces.map((space) => (\n            <Badge \n              key={space.id} \n              variant={space.isActive ? \"destructive\" : \"secondary\"}\n              className=\"text-xs\"\n            >\n              {space.hashtag}\n              {space.count > 0 && (\n                <span className=\"ml-1 bg-red-500 text-white rounded-full px-1.5 py-0.5 text-xs\">\n                  {space.count}\n                </span>\n              )}\n            </Badge>\n          ))}\n        </div>\n      </div>\n\n      {/* All Members */}\n      <div className=\"bg-cmo-card rounded-lg border border-cmo-border p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"font-semibold text-cmo-text-primary\">All Members</h3>\n          <Button variant=\"link\" className=\"text-cmo-primary text-sm hover:underline p-0\">\n            See all\n          </Button>\n        </div>\n        \n        <div className=\"space-y-3\">\n          {mockUsers.slice(0, 3).map((user) => (\n            <div key={user.id} className=\"flex items-center space-x-3\">\n              <Avatar className=\"w-8 h-8\">\n                <AvatarImage src={user.avatar} />\n                <AvatarFallback>{user.name.charAt(0)}</AvatarFallback>\n              </Avatar>\n              <div className=\"flex-1\">\n                <p className=\"text-sm font-medium text-cmo-text-primary\">{user.name} - 1.27</p>\n                <p className=\"text-xs text-cmo-text-secondary\">{user.title}</p>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Vendors */}\n      <div className=\"bg-cmo-card rounded-lg border border-cmo-border p-6\">\n        <h3 className=\"font-semibold text-cmo-text-primary mb-4\">487 Vendors</h3>\n        \n        <div className=\"space-y-3\">\n          {mockVendors.map((vendor) => (\n            <div key={vendor.id} className=\"flex items-center space-x-3\">\n              <div \n                className={`w-8 h-8 rounded-full flex items-center justify-center ${vendor.color}`}\n              >\n                <span className=\"font-semibold text-xs\">{vendor.initials}</span>\n              </div>\n              <div className=\"flex-1\">\n                <p className=\"text-sm font-medium text-cmo-text-primary\">{vendor.name}</p>\n                <p className=\"text-xs text-cmo-text-secondary\">{vendor.location}</p>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5223},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { cn } from \"../../lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }","size_bytes":1586},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"import * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\nimport { cn } from \"../../lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }","size_bytes":1407},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { cn } from \"../../lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }","size_bytes":1130},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { cn } from \"../../lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }","size_bytes":1837},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center h-10\",\n        caption_label: \"text-sm font-medium sr-only\",\n        caption_dropdowns: \"flex justify-center gap-2 items-center\",\n        dropdown_month: \"relative\",\n        dropdown_year: \"relative\", \n        dropdown: \"h-8 text-sm px-2 bg-white border border-gray-300 rounded text-center min-w-[80px]\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ ...props }) => <ChevronLeft className=\"h-4 w-4\" />,\n        IconRight: ({ ...props }) => <ChevronRight className=\"h-4 w-4\" />,\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }","size_bytes":2865},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\nimport { cn } from \"../../lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex flex-col space-y-1.5 p-6\", className)} {...props} />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }","size_bytes":1864},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\";\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\";\nimport { Check } from \"lucide-react\";\nimport { cn } from \"../../lib/utils\";\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n));\nCheckbox.displayName = CheckboxPrimitive.Root.displayName;\n\nexport { Checkbox };","size_bytes":1065},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/combobox.tsx":{"content":"import * as React from \"react\"\nimport { Check, ChevronsUpDown } from \"lucide-react\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"./button\"\nimport { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem } from \"./command\"\nimport { Popover, PopoverContent, PopoverTrigger } from \"./popover\"\n\ninterface ComboboxOption {\n  value: string\n  label: string\n  flag?: string\n}\n\ninterface ComboboxProps {\n  options: ComboboxOption[]\n  value?: string\n  onValueChange: (value: string) => void\n  placeholder?: string\n  searchPlaceholder?: string\n  className?: string\n  disabled?: boolean\n  error?: boolean\n}\n\nexport function Combobox({\n  options,\n  value,\n  onValueChange,\n  placeholder = \"Select option...\",\n  searchPlaceholder = \"Search...\",\n  className,\n  disabled = false,\n  error = false,\n}: ComboboxProps) {\n  const [open, setOpen] = React.useState(false)\n\n  const selectedOption = options.find((option) => option.value === value)\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"outline\"\n          role=\"combobox\"\n          aria-expanded={open}\n          className={cn(\n            \"w-full justify-between\",\n            !value && \"text-muted-foreground\",\n            error && \"border-red-500\",\n            className\n          )}\n          disabled={disabled}\n        >\n          {selectedOption ? (\n            <div className=\"flex items-center gap-2\">\n              {selectedOption.flag && <span>{selectedOption.flag}</span>}\n              <span>{selectedOption.label}</span>\n            </div>\n          ) : (\n            placeholder\n          )}\n          <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-full p-0\" align=\"start\">\n        <Command>\n          <CommandInput placeholder={searchPlaceholder} className=\"border-none focus:ring-0\" />\n          <CommandEmpty>No option found.</CommandEmpty>\n          <CommandGroup className=\"max-h-60 overflow-auto\">\n            {options.map((option) => (\n              <CommandItem\n                key={option.value}\n                value={option.value}\n                onSelect={() => {\n                  onValueChange(option.value)\n                  setOpen(false)\n                }}\n              >\n                <Check\n                  className={cn(\n                    \"mr-2 h-4 w-4\",\n                    value === option.value ? \"opacity-100\" : \"opacity-0\"\n                  )}\n                />\n                <div className=\"flex items-center gap-2\">\n                  {option.flag && <span>{option.flag}</span>}\n                  <span>{option.label}</span>\n                </div>\n              </CommandItem>\n            ))}\n          </CommandGroup>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  )\n}","size_bytes":2861},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/country-code-selector.tsx":{"content":"import React, { useState, useMemo } from 'react';\nimport { Button } from './button';\nimport { Input } from './input';\nimport { Popover, PopoverContent, PopoverTrigger } from './popover';\nimport { Check, ChevronDown } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\n// Country codes data - matching the format shown in the design\nconst COUNTRY_CODES = [\n  { flag: '🇦🇫', name: 'Afghanistan', code: '+93' },\n  { flag: '🇦🇱', name: 'Albania', code: '+355' },\n  { flag: '🇩🇿', name: 'Algeria', code: '+213' },\n  { flag: '🇦🇸', name: 'American Samoa', code: '+1684' },\n  { flag: '🇦🇩', name: 'Andorra', code: '+376' },\n  { flag: '🇦🇴', name: 'Angola', code: '+244' },\n  { flag: '🇦🇮', name: 'Anguilla', code: '+1264' },\n  { flag: '🇦🇬', name: 'Antigua and Barbuda', code: '+1268' },\n  { flag: '🇦🇷', name: 'Argentina', code: '+54' },\n  { flag: '🇦🇲', name: 'Armenia', code: '+374' },\n  { flag: '🇦🇼', name: 'Aruba', code: '+297' },\n  { flag: '🇦🇺', name: 'Australia', code: '+61' },\n  { flag: '🇦🇹', name: 'Austria', code: '+43' },\n  { flag: '🇦🇿', name: 'Azerbaijan', code: '+994' },\n  { flag: '🇧🇸', name: 'Bahamas', code: '+1242' },\n  { flag: '🇧🇭', name: 'Bahrain', code: '+973' },\n  { flag: '🇧🇩', name: 'Bangladesh', code: '+880' },\n  { flag: '🇧🇧', name: 'Barbados', code: '+1246' },\n  { flag: '🇧🇾', name: 'Belarus', code: '+375' },\n  { flag: '🇧🇪', name: 'Belgium', code: '+32' },\n  { flag: '🇧🇿', name: 'Belize', code: '+501' },\n  { flag: '🇧🇯', name: 'Benin', code: '+229' },\n  { flag: '🇧🇲', name: 'Bermuda', code: '+1441' },\n  { flag: '🇧🇹', name: 'Bhutan', code: '+975' },\n  { flag: '🇧🇴', name: 'Bolivia', code: '+591' },\n  { flag: '🇧🇦', name: 'Bosnia and Herzegovina', code: '+387' },\n  { flag: '🇧🇼', name: 'Botswana', code: '+267' },\n  { flag: '🇧🇷', name: 'Brazil', code: '+55' },\n  { flag: '🇧🇳', name: 'Brunei', code: '+673' },\n  { flag: '🇧🇬', name: 'Bulgaria', code: '+359' },\n  { flag: '🇧🇫', name: 'Burkina Faso', code: '+226' },\n  { flag: '🇧🇮', name: 'Burundi', code: '+257' },\n  { flag: '🇰🇭', name: 'Cambodia', code: '+855' },\n  { flag: '🇨🇲', name: 'Cameroon', code: '+237' },\n  { flag: '🇨🇦', name: 'Canada', code: '+1' },\n  { flag: '🇨🇻', name: 'Cape Verde', code: '+238' },\n  { flag: '🇰🇾', name: 'Cayman Islands', code: '+1345' },\n  { flag: '🇨🇫', name: 'Central African Republic', code: '+236' },\n  { flag: '🇹🇩', name: 'Chad', code: '+235' },\n  { flag: '🇨🇱', name: 'Chile', code: '+56' },\n  { flag: '🇨🇳', name: 'China', code: '+86' },\n  { flag: '🇨🇴', name: 'Colombia', code: '+57' },\n  { flag: '🇰🇲', name: 'Comoros', code: '+269' },\n  { flag: '🇨🇬', name: 'Congo', code: '+242' },\n  { flag: '🇨🇩', name: 'Congo (DRC)', code: '+243' },\n  { flag: '🇨🇰', name: 'Cook Islands', code: '+682' },\n  { flag: '🇨🇷', name: 'Costa Rica', code: '+506' },\n  { flag: '🇭🇷', name: 'Croatia', code: '+385' },\n  { flag: '🇨🇺', name: 'Cuba', code: '+53' },\n  { flag: '🇨🇾', name: 'Cyprus', code: '+357' },\n  { flag: '🇨🇿', name: 'Czech Republic', code: '+420' },\n  { flag: '🇩🇰', name: 'Denmark', code: '+45' },\n  { flag: '🇩🇯', name: 'Djibouti', code: '+253' },\n  { flag: '🇩🇲', name: 'Dominica', code: '+1767' },\n  { flag: '🇩🇴', name: 'Dominican Republic', code: '+1809' },\n  { flag: '🇪🇨', name: 'Ecuador', code: '+593' },\n  { flag: '🇪🇬', name: 'Egypt', code: '+20' },\n  { flag: '🇸🇻', name: 'El Salvador', code: '+503' },\n  { flag: '🇬🇶', name: 'Equatorial Guinea', code: '+240' },\n  { flag: '🇪🇷', name: 'Eritrea', code: '+291' },\n  { flag: '🇪🇪', name: 'Estonia', code: '+372' },\n  { flag: '🇪🇹', name: 'Ethiopia', code: '+251' },\n  { flag: '🇫🇯', name: 'Fiji', code: '+679' },\n  { flag: '🇫🇮', name: 'Finland', code: '+358' },\n  { flag: '🇫🇷', name: 'France', code: '+33' },\n  { flag: '🇬🇫', name: 'French Guiana', code: '+594' },\n  { flag: '🇵🇫', name: 'French Polynesia', code: '+689' },\n  { flag: '🇬🇦', name: 'Gabon', code: '+241' },\n  { flag: '🇬🇲', name: 'Gambia', code: '+220' },\n  { flag: '🇬🇪', name: 'Georgia', code: '+995' },\n  { flag: '🇩🇪', name: 'Germany', code: '+49' },\n  { flag: '🇬🇭', name: 'Ghana', code: '+233' },\n  { flag: '🇬🇮', name: 'Gibraltar', code: '+350' },\n  { flag: '🇬🇷', name: 'Greece', code: '+30' },\n  { flag: '🇬🇱', name: 'Greenland', code: '+299' },\n  { flag: '🇬🇩', name: 'Grenada', code: '+1473' },\n  { flag: '🇬🇵', name: 'Guadeloupe', code: '+590' },\n  { flag: '🇬🇺', name: 'Guam', code: '+1671' },\n  { flag: '🇬🇹', name: 'Guatemala', code: '+502' },\n  { flag: '🇬🇳', name: 'Guinea', code: '+224' },\n  { flag: '🇬🇼', name: 'Guinea-Bissau', code: '+245' },\n  { flag: '🇬🇾', name: 'Guyana', code: '+592' },\n  { flag: '🇭🇹', name: 'Haiti', code: '+509' },\n  { flag: '🇭🇳', name: 'Honduras', code: '+504' },\n  { flag: '🇭🇰', name: 'Hong Kong (香港)', code: '+852' },\n  { flag: '🇭🇺', name: 'Hungary (Magyarország)', code: '+36' },\n  { flag: '🇮🇸', name: 'Iceland (Ísland)', code: '+354' },\n  { flag: '🇮🇳', name: 'India (भारत)', code: '+91' },\n  { flag: '🇮🇩', name: 'Indonesia', code: '+62' },\n  { flag: '🇮🇷', name: 'Iran (ایران)', code: '+98' },\n  { flag: '🇮🇶', name: 'Iraq (العراق)', code: '+964' },\n  { flag: '🇮🇪', name: 'Ireland', code: '+353' },\n  { flag: '🇮🇱', name: 'Israel (ישראל)', code: '+972' },\n  { flag: '🇮🇹', name: 'Italy', code: '+39' },\n  { flag: '🇯🇲', name: 'Jamaica', code: '+1876' },\n  { flag: '🇯🇵', name: 'Japan (日本)', code: '+81' },\n  { flag: '🇯🇴', name: 'Jordan (الأردن)', code: '+962' },\n  { flag: '🇰🇿', name: 'Kazakhstan', code: '+7' },\n  { flag: '🇰🇪', name: 'Kenya', code: '+254' },\n  { flag: '🇰🇮', name: 'Kiribati', code: '+686' },\n  { flag: '🇰🇼', name: 'Kuwait (الكويت)', code: '+965' },\n  { flag: '🇰🇬', name: 'Kyrgyzstan', code: '+996' },\n  { flag: '🇱🇦', name: 'Laos', code: '+856' },\n  { flag: '🇱🇻', name: 'Latvia', code: '+371' },\n  { flag: '🇱🇧', name: 'Lebanon (لبنان)', code: '+961' },\n  { flag: '🇱🇸', name: 'Lesotho', code: '+266' },\n  { flag: '🇱🇷', name: 'Liberia', code: '+231' },\n  { flag: '🇱🇾', name: 'Libya (ليبيا)', code: '+218' },\n  { flag: '🇱🇮', name: 'Liechtenstein', code: '+423' },\n  { flag: '🇱🇹', name: 'Lithuania', code: '+370' },\n  { flag: '🇱🇺', name: 'Luxembourg', code: '+352' },\n  { flag: '🇲🇴', name: 'Macau (澳門)', code: '+853' },\n  { flag: '🇲🇰', name: 'Macedonia', code: '+389' },\n  { flag: '🇲🇬', name: 'Madagascar', code: '+261' },\n  { flag: '🇲🇼', name: 'Malawi', code: '+265' },\n  { flag: '🇲🇾', name: 'Malaysia', code: '+60' },\n  { flag: '🇲🇻', name: 'Maldives', code: '+960' },\n  { flag: '🇲🇱', name: 'Mali', code: '+223' },\n  { flag: '🇲🇹', name: 'Malta', code: '+356' },\n  { flag: '🇲🇭', name: 'Marshall Islands', code: '+692' },\n  { flag: '🇲🇶', name: 'Martinique', code: '+596' },\n  { flag: '🇲🇷', name: 'Mauritania', code: '+222' },\n  { flag: '🇲🇺', name: 'Mauritius', code: '+230' },\n  { flag: '🇾🇹', name: 'Mayotte', code: '+262' },\n  { flag: '🇲🇽', name: 'Mexico', code: '+52' },\n  { flag: '🇫🇲', name: 'Micronesia', code: '+691' },\n  { flag: '🇲🇩', name: 'Moldova', code: '+373' },\n  { flag: '🇲🇨', name: 'Monaco', code: '+377' },\n  { flag: '🇲🇳', name: 'Mongolia', code: '+976' },\n  { flag: '🇲🇪', name: 'Montenegro', code: '+382' },\n  { flag: '🇲🇸', name: 'Montserrat', code: '+1664' },\n  { flag: '🇲🇦', name: 'Morocco (المغرب)', code: '+212' },\n  { flag: '🇲🇿', name: 'Mozambique', code: '+258' },\n  { flag: '🇲🇲', name: 'Myanmar', code: '+95' },\n  { flag: '🇳🇦', name: 'Namibia', code: '+264' },\n  { flag: '🇳🇷', name: 'Nauru', code: '+674' },\n  { flag: '🇳🇵', name: 'Nepal', code: '+977' },\n  { flag: '🇳🇱', name: 'Netherlands', code: '+31' },\n  { flag: '🇳🇨', name: 'New Caledonia', code: '+687' },\n  { flag: '🇳🇿', name: 'New Zealand', code: '+64' },\n  { flag: '🇳🇮', name: 'Nicaragua', code: '+505' },\n  { flag: '🇳🇪', name: 'Niger', code: '+227' },\n  { flag: '🇳🇬', name: 'Nigeria', code: '+234' },\n  { flag: '🇳🇺', name: 'Niue', code: '+683' },\n  { flag: '🇳🇫', name: 'Norfolk Island', code: '+672' },\n  { flag: '🇰🇵', name: 'North Korea', code: '+850' },\n  { flag: '🇲🇵', name: 'Northern Mariana Islands', code: '+1670' },\n  { flag: '🇳🇴', name: 'Norway', code: '+47' },\n  { flag: '🇴🇲', name: 'Oman (عُمان)', code: '+968' },\n  { flag: '🇵🇰', name: 'Pakistan', code: '+92' },\n  { flag: '🇵🇼', name: 'Palau', code: '+680' },\n  { flag: '🇵🇸', name: 'Palestine', code: '+970' },\n  { flag: '🇵🇦', name: 'Panama', code: '+507' },\n  { flag: '🇵🇬', name: 'Papua New Guinea', code: '+675' },\n  { flag: '🇵🇾', name: 'Paraguay', code: '+595' },\n  { flag: '🇵🇪', name: 'Peru', code: '+51' },\n  { flag: '🇵🇭', name: 'Philippines', code: '+63' },\n  { flag: '🇵🇱', name: 'Poland', code: '+48' },\n  { flag: '🇵🇹', name: 'Portugal', code: '+351' },\n  { flag: '🇵🇷', name: 'Puerto Rico', code: '+1787' },\n  { flag: '🇶🇦', name: 'Qatar (قطر)', code: '+974' },\n  { flag: '🇷🇪', name: 'Réunion', code: '+262' },\n  { flag: '🇷🇴', name: 'Romania', code: '+40' },\n  { flag: '🇷🇺', name: 'Russia', code: '+7' },\n  { flag: '🇷🇼', name: 'Rwanda', code: '+250' },\n  { flag: '🇼🇸', name: 'Samoa', code: '+685' },\n  { flag: '🇸🇲', name: 'San Marino', code: '+378' },\n  { flag: '🇸🇹', name: 'São Tomé and Príncipe', code: '+239' },\n  { flag: '🇸🇦', name: 'Saudi Arabia (المملكة العربية السعودية)', code: '+966' },\n  { flag: '🇸🇳', name: 'Senegal', code: '+221' },\n  { flag: '🇷🇸', name: 'Serbia', code: '+381' },\n  { flag: '🇸🇨', name: 'Seychelles', code: '+248' },\n  { flag: '🇸🇱', name: 'Sierra Leone', code: '+232' },\n  { flag: '🇸🇬', name: 'Singapore', code: '+65' },\n  { flag: '🇸🇰', name: 'Slovakia', code: '+421' },\n  { flag: '🇸🇮', name: 'Slovenia', code: '+386' },\n  { flag: '🇸🇧', name: 'Solomon Islands', code: '+677' },\n  { flag: '🇸🇴', name: 'Somalia', code: '+252' },\n  { flag: '🇿🇦', name: 'South Africa', code: '+27' },\n  { flag: '🇰🇷', name: 'South Korea', code: '+82' },\n  { flag: '🇸🇸', name: 'South Sudan', code: '+211' },\n  { flag: '🇪🇸', name: 'Spain', code: '+34' },\n  { flag: '🇱🇰', name: 'Sri Lanka', code: '+94' },\n  { flag: '🇸🇩', name: 'Sudan', code: '+249' },\n  { flag: '🇸🇷', name: 'Suriname', code: '+597' },\n  { flag: '🇸🇿', name: 'Swaziland', code: '+268' },\n  { flag: '🇸🇪', name: 'Sweden', code: '+46' },\n  { flag: '🇨🇭', name: 'Switzerland', code: '+41' },\n  { flag: '🇸🇾', name: 'Syria', code: '+963' },\n  { flag: '🇹🇼', name: 'Taiwan', code: '+886' },\n  { flag: '🇹🇯', name: 'Tajikistan', code: '+992' },\n  { flag: '🇹🇿', name: 'Tanzania', code: '+255' },\n  { flag: '🇹🇭', name: 'Thailand', code: '+66' },\n  { flag: '🇹🇱', name: 'Timor-Leste', code: '+670' },\n  { flag: '🇹🇬', name: 'Togo', code: '+228' },\n  { flag: '🇹🇰', name: 'Tokelau', code: '+690' },\n  { flag: '🇹🇴', name: 'Tonga', code: '+676' },\n  { flag: '🇹🇹', name: 'Trinidad and Tobago', code: '+1868' },\n  { flag: '🇹🇳', name: 'Tunisia', code: '+216' },\n  { flag: '🇹🇷', name: 'Turkey', code: '+90' },\n  { flag: '🇹🇲', name: 'Turkmenistan', code: '+993' },\n  { flag: '🇹🇨', name: 'Turks and Caicos Islands', code: '+1649' },\n  { flag: '🇹🇻', name: 'Tuvalu', code: '+688' },\n  { flag: '🇺🇬', name: 'Uganda', code: '+256' },\n  { flag: '🇺🇦', name: 'Ukraine', code: '+380' },\n  { flag: '🇦🇪', name: 'United Arab Emirates', code: '+971' },\n  { flag: '🇬🇧', name: 'United Kingdom', code: '+44' },\n  { flag: '🇺🇸', name: 'United States', code: '+1' },\n  { flag: '🇺🇾', name: 'Uruguay', code: '+598' },\n  { flag: '🇺🇿', name: 'Uzbekistan', code: '+998' },\n  { flag: '🇻🇺', name: 'Vanuatu', code: '+678' },\n  { flag: '🇻🇦', name: 'Vatican City', code: '+39' },\n  { flag: '🇻🇪', name: 'Venezuela', code: '+58' },\n  { flag: '🇻🇳', name: 'Vietnam', code: '+84' },\n  { flag: '🇻🇬', name: 'Virgin Islands (British)', code: '+1284' },\n  { flag: '🇻🇮', name: 'Virgin Islands (US)', code: '+1340' },\n  { flag: '🇼🇫', name: 'Wallis and Futuna', code: '+681' },\n  { flag: '🇪🇭', name: 'Western Sahara', code: '+212' },\n  { flag: '🇾🇪', name: 'Yemen', code: '+967' },\n  { flag: '🇿🇲', name: 'Zambia', code: '+260' },\n  { flag: '🇿🇼', name: 'Zimbabwe', code: '+263' }\n];\n\ninterface CountryCodeSelectorProps {\n  value: string;\n  onValueChange: (value: string) => void;\n  placeholder?: string;\n  className?: string;\n  disabled?: boolean;\n}\n\nexport function CountryCodeSelector({\n  value,\n  onValueChange,\n  placeholder = \"Select code\",\n  className,\n  disabled\n}: CountryCodeSelectorProps) {\n  const [open, setOpen] = useState(false);\n  const [search, setSearch] = useState('');\n\n  const selectedCountry = COUNTRY_CODES.find(country => country.code === value);\n\n  const filteredCountries = useMemo(() => {\n    if (!search) return COUNTRY_CODES;\n    \n    const searchLower = search.toLowerCase().trim();\n    return COUNTRY_CODES.filter(country => {\n      const nameMatches = country.name.toLowerCase().includes(searchLower);\n      const codeMatches = country.code.toLowerCase().includes(searchLower);\n      const codeWithoutPlusMatches = country.code.substring(1).includes(searchLower);\n      \n      return nameMatches || codeMatches || codeWithoutPlusMatches;\n    });\n  }, [search]);\n\n  const handleSelect = (countryCode: string) => {\n    onValueChange(countryCode);\n    setOpen(false);\n    setSearch('');\n  };\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"outline\"\n          role=\"combobox\"\n          aria-expanded={open}\n          className={cn(\"w-36 justify-between\", className)}\n          disabled={disabled}\n        >\n          {selectedCountry ? (\n            <div className=\"flex items-center gap-2 truncate\">\n              <span>{selectedCountry.flag}</span>\n              <span className=\"text-sm\">{selectedCountry.code}</span>\n            </div>\n          ) : (\n            <span className=\"text-sm text-muted-foreground\">{placeholder}</span>\n          )}\n          <ChevronDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-80 p-0\" align=\"start\">\n        <div className=\"border-b p-2\">\n          <Input\n            placeholder=\"Search countries...\"\n            value={search}\n            onChange={(e) => setSearch(e.target.value)}\n            className=\"h-8\"\n          />\n        </div>\n        <div className=\"max-h-60 overflow-auto\">\n          {filteredCountries.length === 0 ? (\n            <div className=\"p-4 text-sm text-center text-muted-foreground\">\n              No countries found\n            </div>\n          ) : (\n            filteredCountries.map((country) => (\n              <div\n                key={country.code}\n                className={cn(\n                  \"flex items-center gap-3 p-3 cursor-pointer hover:bg-gray-50\",\n                  \"border-b border-gray-100 last:border-b-0\",\n                  value === country.code && \"bg-blue-50\"\n                )}\n                onClick={() => handleSelect(country.code)}\n              >\n                <span className=\"text-lg\">{country.flag}</span>\n                <div className=\"flex-1 min-w-0\">\n                  <div className=\"font-medium text-sm truncate\">\n                    {country.name}\n                  </div>\n                </div>\n                <div className=\"text-sm text-gray-500 font-mono\">\n                  {country.code}\n                </div>\n                {value === country.code && (\n                  <Check className=\"h-4 w-4 text-blue-600\" />\n                )}\n              </div>\n            ))\n          )}\n        </div>\n      </PopoverContent>\n    </Popover>\n  );\n}","size_bytes":16568},"client/src/components/ui/custom-date-picker.tsx":{"content":"import React, { useState } from 'react';\nimport { Button } from './button';\nimport { Popover, PopoverContent, PopoverTrigger } from './popover';\nimport { CalendarIcon, ChevronLeft, ChevronRight } from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport { format } from 'date-fns';\n\ninterface CustomDatePickerProps {\n  selected?: Date;\n  onSelect: (date: Date | undefined) => void;\n  placeholder?: string;\n  className?: string;\n  disabled?: boolean;\n  error?: boolean;\n}\n\ntype ViewMode = 'year' | 'month' | 'date';\n\nexport function CustomDatePicker({\n  selected,\n  onSelect,\n  placeholder = \"Pick a date\",\n  className,\n  disabled,\n  error\n}: CustomDatePickerProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [viewMode, setViewMode] = useState<ViewMode>('year');\n  const [currentYear, setCurrentYear] = useState(selected?.getFullYear() || new Date().getFullYear());\n  const [currentMonth, setCurrentMonth] = useState(selected?.getMonth() || new Date().getMonth());\n\n  const currentDate = new Date();\n  const maxYear = currentDate.getFullYear() - 13; // At least 13 years old\n  const minYear = 1940;\n\n  // Generate year ranges (12 years per view)\n  const getYearRange = () => {\n    const startYear = Math.floor((currentYear - minYear) / 12) * 12 + minYear;\n    const years = [];\n    for (let i = 0; i < 12; i++) {\n      const year = startYear + i;\n      if (year <= maxYear) {\n        years.push(year);\n      }\n    }\n    return { years, startYear, endYear: Math.min(startYear + 11, maxYear) };\n  };\n\n  const { years, startYear, endYear } = getYearRange();\n\n  const months = [\n    'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',\n    'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'\n  ];\n\n  const weekDays = ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'];\n\n  const getDaysInMonth = (year: number, month: number) => {\n    const firstDay = new Date(year, month, 1);\n    const lastDay = new Date(year, month + 1, 0);\n    const daysInMonth = lastDay.getDate();\n    const startWeekDay = firstDay.getDay();\n\n    const days = [];\n    \n    // Previous month's days\n    const prevMonth = new Date(year, month - 1, 0);\n    for (let i = startWeekDay - 1; i >= 0; i--) {\n      days.push({\n        day: prevMonth.getDate() - i,\n        isCurrentMonth: false,\n        date: new Date(year, month - 1, prevMonth.getDate() - i)\n      });\n    }\n\n    // Current month's days\n    for (let day = 1; day <= daysInMonth; day++) {\n      days.push({\n        day,\n        isCurrentMonth: true,\n        date: new Date(year, month, day)\n      });\n    }\n\n    // Next month's days to fill the grid\n    const remainingDays = 42 - days.length;\n    for (let day = 1; day <= remainingDays; day++) {\n      days.push({\n        day,\n        isCurrentMonth: false,\n        date: new Date(year, month + 1, day)\n      });\n    }\n\n    return days;\n  };\n\n  const handleYearSelect = (year: number) => {\n    setCurrentYear(year);\n    setViewMode('month');\n  };\n\n  const handleMonthSelect = (month: number) => {\n    setCurrentMonth(month);\n    setViewMode('date');\n  };\n\n  const handleDateSelect = (date: Date) => {\n    onSelect(date);\n    setIsOpen(false);\n    setViewMode('year'); // Reset for next time\n  };\n\n  const navigateYears = (direction: 'prev' | 'next') => {\n    const newYear = direction === 'prev' \n      ? Math.max(minYear, startYear - 12)\n      : Math.min(maxYear - 11, startYear + 12);\n    setCurrentYear(newYear);\n  };\n\n  const renderYearView = () => (\n    <div className=\"p-3 w-80\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => navigateYears('prev')}\n          disabled={startYear <= minYear}\n          className=\"h-7 w-7 p-0\"\n        >\n          <ChevronLeft className=\"h-4 w-4\" />\n        </Button>\n        <div className=\"font-medium text-sm\">\n          {startYear} - {endYear}\n        </div>\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => navigateYears('next')}\n          disabled={endYear >= maxYear}\n          className=\"h-7 w-7 p-0\"\n        >\n          <ChevronRight className=\"h-4 w-4\" />\n        </Button>\n      </div>\n      \n      <div className=\"grid grid-cols-3 gap-2\">\n        {years.map((year) => (\n          <Button\n            key={year}\n            variant={year === currentYear ? \"default\" : \"outline\"}\n            size=\"sm\"\n            onClick={() => handleYearSelect(year)}\n            className=\"h-8 text-sm\"\n          >\n            {year}\n          </Button>\n        ))}\n      </div>\n      \n      <div className=\"flex justify-between mt-4 pt-2 border-t\">\n        <Button variant=\"ghost\" size=\"sm\" onClick={() => {\n          const today = new Date();\n          setCurrentYear(today.getFullYear());\n          setCurrentMonth(today.getMonth());\n          handleDateSelect(today);\n        }}>\n          Today\n        </Button>\n        <Button variant=\"ghost\" size=\"sm\" onClick={() => {\n          onSelect(undefined);\n          setIsOpen(false);\n        }}>\n          Clear\n        </Button>\n        <Button variant=\"ghost\" size=\"sm\" onClick={() => setIsOpen(false)}>\n          Close\n        </Button>\n      </div>\n    </div>\n  );\n\n  const renderMonthView = () => (\n    <div className=\"p-3 w-80\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => setViewMode('year')}\n          className=\"h-7 px-3\"\n        >\n          <ChevronLeft className=\"h-4 w-4 mr-1\" />\n        </Button>\n        <div className=\"font-medium text-sm bg-blue-100 px-3 py-1 rounded\">\n          {currentYear}\n        </div>\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => setViewMode('year')}\n          className=\"h-7 w-7 p-0\"\n        >\n          <ChevronRight className=\"h-4 w-4\" />\n        </Button>\n      </div>\n      \n      <div className=\"grid grid-cols-3 gap-2\">\n        {months.map((month, index) => (\n          <Button\n            key={month}\n            variant={index === currentMonth ? \"default\" : \"outline\"}\n            size=\"sm\"\n            onClick={() => handleMonthSelect(index)}\n            className=\"h-8 text-sm\"\n          >\n            {month}\n          </Button>\n        ))}\n      </div>\n      \n      <div className=\"flex justify-between mt-4 pt-2 border-t\">\n        <Button variant=\"ghost\" size=\"sm\" onClick={() => {\n          const today = new Date();\n          setCurrentYear(today.getFullYear());\n          setCurrentMonth(today.getMonth());\n          handleDateSelect(today);\n        }}>\n          Today\n        </Button>\n        <Button variant=\"ghost\" size=\"sm\" onClick={() => {\n          onSelect(undefined);\n          setIsOpen(false);\n        }}>\n          Clear\n        </Button>\n        <Button variant=\"ghost\" size=\"sm\" onClick={() => setIsOpen(false)}>\n          Close\n        </Button>\n      </div>\n    </div>\n  );\n\n  const renderDateView = () => {\n    const days = getDaysInMonth(currentYear, currentMonth);\n    \n    return (\n      <div className=\"p-3 w-80\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => setViewMode('month')}\n            className=\"h-7 px-3\"\n          >\n            <ChevronLeft className=\"h-4 w-4 mr-1\" />\n          </Button>\n          <div className=\"font-medium text-sm bg-blue-100 px-3 py-1 rounded\">\n            {months[currentMonth]} {currentYear}\n          </div>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => setViewMode('month')}\n            className=\"h-7 w-7 p-0\"\n          >\n            <ChevronRight className=\"h-4 w-4\" />\n          </Button>\n        </div>\n\n        {/* Week days header */}\n        <div className=\"grid grid-cols-7 gap-1 mb-2\">\n          {weekDays.map((day) => (\n            <div key={day} className=\"h-8 flex items-center justify-center text-xs font-medium text-gray-500\">\n              {day}\n            </div>\n          ))}\n        </div>\n\n        {/* Calendar days */}\n        <div className=\"grid grid-cols-7 gap-1\">\n          {days.map((dayObj, index) => {\n            const isSelected = selected && \n              dayObj.date.getDate() === selected.getDate() &&\n              dayObj.date.getMonth() === selected.getMonth() &&\n              dayObj.date.getFullYear() === selected.getFullYear();\n            \n            const isToday = dayObj.date.toDateString() === currentDate.toDateString();\n            const isDisabled = dayObj.date > currentDate || dayObj.date < new Date(minYear, 0, 1);\n\n            return (\n              <Button\n                key={index}\n                variant={isSelected ? \"default\" : \"ghost\"}\n                size=\"sm\"\n                onClick={() => !isDisabled && handleDateSelect(dayObj.date)}\n                disabled={isDisabled}\n                className={cn(\n                  \"h-8 w-8 p-0 text-sm\",\n                  !dayObj.isCurrentMonth && \"text-gray-400\",\n                  isToday && !isSelected && \"bg-blue-100\",\n                  isSelected && \"bg-blue-600 text-white\",\n                  isDisabled && \"opacity-50 cursor-not-allowed\"\n                )}\n              >\n                {dayObj.day}\n              </Button>\n            );\n          })}\n        </div>\n        \n        <div className=\"flex justify-between mt-4 pt-2 border-t\">\n          <Button variant=\"ghost\" size=\"sm\" onClick={() => {\n            const today = new Date();\n            if (today <= new Date(maxYear, 11, 31)) {\n              handleDateSelect(today);\n            }\n          }}>\n            Today\n          </Button>\n          <Button variant=\"ghost\" size=\"sm\" onClick={() => {\n            onSelect(undefined);\n            setIsOpen(false);\n          }}>\n            Clear\n          </Button>\n          <Button variant=\"ghost\" size=\"sm\" onClick={() => setIsOpen(false)}>\n            Close\n          </Button>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <Popover open={isOpen} onOpenChange={setIsOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"outline\"\n          className={cn(\n            \"w-full justify-start text-left font-normal\",\n            !selected && \"text-muted-foreground\",\n            error && \"border-red-500\",\n            className\n          )}\n          disabled={disabled}\n        >\n          <CalendarIcon className=\"mr-2 h-4 w-4\" />\n          {selected ? format(selected, \"PPP\") : <span>{placeholder}</span>}\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-auto p-0\" align=\"start\">\n        {viewMode === 'year' && renderYearView()}\n        {viewMode === 'month' && renderMonthView()}\n        {viewMode === 'date' && renderDateView()}\n      </PopoverContent>\n    </Popover>\n  );\n}","size_bytes":10795},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-sm font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-sm font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\nimport { cn } from \"../../lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&>svg]:size-4 [&>svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}","size_bytes":7393},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\nimport { cn } from \"../../lib/utils\"\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }","size_bytes":826},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }","size_bytes":1229},"client/src/components/ui/progress.tsx":{"content":"import * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\nimport { cn } from \"../../lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }","size_bytes":779},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }","size_bytes":1466},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\nimport { cn } from \"../../lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }","size_bytes":758},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\nimport { cn } from \"../../lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }","size_bytes":1885},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }","size_bytes":771},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/user-profile.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useRoute } from \"wouter\";\nimport { Button } from \"../components/ui/button\";\nimport { Badge } from \"../components/ui/badge\";\nimport { Card, CardContent } from \"../components/ui/card\";\nimport { Separator } from \"../components/ui/separator\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"../components/ui/avatar\";\nimport { Textarea } from \"../components/ui/textarea\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"../components/ui/dropdown-menu\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"../components/ui/dialog\";\nimport { Input } from \"../components/ui/input\";\nimport { Label } from \"../components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"../components/ui/select\";\nimport Header from \"../components/layout/header\";\nimport MobileNavigation from \"../components/mobile-navigation\";\nimport { useIsMobile } from \"../hooks/use-mobile\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport { userApiService, UserProfile } from \"../lib/userApi\";\nimport { useCreateConversation } from \"../hooks/useChat\";\nimport { useLocation } from \"wouter\";\nimport { Loader2 } from \"lucide-react\";\nimport {\n  MapPin,\n  Mail,\n  Phone,\n  Globe,\n  Building,\n  Users,\n  MessageSquare,\n  ThumbsUp,\n  Star,\n  Plus,\n  MoreHorizontal,\n  Filter,\n  ChevronDown,\n  Bookmark,\n  Share,\n  Edit,\n  Flag,\n  Send,\n  Calendar,\n  GraduationCap,\n  Briefcase,\n  User,\n  FileText,\n} from \"lucide-react\";\nimport { useToast } from \"../hooks/use-toast\";\n\n\nconst mockActivities = [\n  {\n    id: \"1\",\n    type: \"question\",\n    title:\n      \"Do you have any experience with deploying @Hubspot for a SaaS business with both a direct and self-serve model?\",\n    content:\n      \"We have a $2M ARR B2B startup with a custom solution today. We are using @Mixpanel and working with @Division of Labor to rebuild our pages. @Jennifer Smith... See more\",\n    timestamp: \"Nov 19\",\n    category: \"Questions & Answers\",\n    engagement: { comments: 1, thanks: 5, insightful: 2 },\n  },\n  {\n    id: \"2\",\n    type: \"article\",\n    title: \"Looking for a new landing page optimization vendor\",\n    content:\n      \"We are looking for a landing page tool that they are missing a minimal with a custom solution that no... See more\",\n    timestamp: \"Nov 12\",\n    category: \"#Inbound #SaaS\",\n    engagement: { comments: 1, thanks: 15, insightful: 6 },\n  },\n];\n\nexport default function UserProfilePage() {\n  const [match, params] = useRoute(\"/u/:username\");\n  const [activeFilter, setActiveFilter] = useState(\"All\");\n  const [expandedComments, setExpandedComments] = useState<{\n    [key: string]: boolean;\n  }>({});\n  const [commentText, setCommentText] = useState<{ [key: string]: string }>({});\n  const [profileData, setProfileData] = useState<UserProfile | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [isFollowing, setIsFollowing] = useState<boolean>(false);\n  const [followLoading, setFollowLoading] = useState<boolean>(false);\n  const [showContactInfo, setShowContactInfo] = useState<boolean>(false);\n  const [showFollowersModal, setShowFollowersModal] = useState<boolean>(false);\n  const [showFollowingModal, setShowFollowingModal] = useState<boolean>(false);\n  const [followers, setFollowers] = useState<UserProfile[]>([]);\n  const [following, setFollowing] = useState<UserProfile[]>([]);\n  const [followersLoading, setFollowersLoading] = useState<boolean>(false);\n  const [followingLoading, setFollowingLoading] = useState<boolean>(false);\n  const [showEditProfileModal, setShowEditProfileModal] = useState<boolean>(false);\n  const [editFormLoading, setEditFormLoading] = useState<boolean>(false);\n  \n  // Suggestions State\n  const [suggestions, setSuggestions] = useState<UserProfile[]>([]);\n  const [suggestionsLoading, setSuggestionsLoading] = useState<boolean>(false);\n  const [followingStatus, setFollowingStatus] = useState<{[key: string]: boolean}>({});\n  const [suggestionFollowLoading, setSuggestionFollowLoading] = useState<{[key: string]: boolean}>({});\n  \n  // Education and Experience State\n  const [education, setEducation] = useState<any[]>([]);\n  const [experience, setExperience] = useState<any[]>([]);\n  const [educationLoading, setEducationLoading] = useState<boolean>(false);\n  const [experienceLoading, setExperienceLoading] = useState<boolean>(false);\n  \n  // Skills State\n  const [userSkills, setUserSkills] = useState<string[]>([]);\n  const [editFormData, setEditFormData] = useState({\n    firstName: \"\",\n    lastName: \"\",\n    title: \"\",\n    positionDesignation: \"\",\n    currentCompany: \"\",\n    about: \"\",\n    gender: \"\",\n    dateOfBirth: \"\",\n    city: \"\",\n    state: \"\",\n    country: \"\",\n    userType: \"\",\n    organizationName: \"\",\n  });\n  const { user, userProfile } = useAuth();\n  const { createConversation } = useCreateConversation();\n  const [, setLocation] = useLocation();\n  const isMobile = useIsMobile();\n  const { toast } = useToast();\n\n  const username = params?.username;\n  const filters = [\"All\", \"News\", \"Posts\", \"Articles\", \"Videos\", \"Jobs\"];\n\n  useEffect(() => {\n    const fetchUserProfile = async () => {\n      if (!username) return;\n\n      setLoading(true);\n      setError(null);\n\n      try {\n        // Try using username directly with /users/{uid} endpoint\n        // In case the backend accepts username as uid parameter\n        const userData = await userApiService.getUserByUid(username);\n        setProfileData(userData);\n        \n        // Update isFollowing from API response\n        if ((userData as any).hasOwnProperty('isFollowing')) {\n          setIsFollowing((userData as any).isFollowing);\n        } else if (userData.followerlist && user?.uid) {\n          // Fallback to old logic if isFollowing field not present\n          setIsFollowing(userData.followerlist.includes(user.uid));\n        }\n        \n        // Initialize edit form data\n        setEditFormData({\n          firstName: userData.firstName || \"\",\n          lastName: userData.lastName || \"\",\n          title: userData.title || \"\",\n          positionDesignation: userData.positionDesignation || \"\",\n          currentCompany: userData.currentCompany || \"\",\n          about: userData.about || \"\",\n          gender: userData.gender || \"\",\n          dateOfBirth: userData.dateOfBirth || \"\",\n          city: userData.city || \"\",\n          state: typeof userData.state === 'string' ? userData.state : userData.state?.name || \"\",\n          country: typeof userData.country === 'string' ? userData.country : userData.country?.name || \"\",\n          userType: userData.userType || \"\",\n          organizationName: userData.organizationName || \"\",\n        });\n      } catch (error: any) {\n        console.error(\"Error fetching user profile:\", error);\n        if (error.message === \"USER_NOT_FOUND\") {\n          setError(\"User not found\");\n        } else if (error.message === \"AUTH_EXPIRED\") {\n          setError(\"Authentication expired\");\n        } else {\n          setError(\"Failed to load user profile\");\n        }\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchUserProfile();\n  }, [username]);\n\n  // Load suggestions\n  useEffect(() => {\n    const loadSuggestions = async () => {\n      setSuggestionsLoading(true);\n      try {\n        const suggestionsData = await userApiService.getUserSuggestions();\n        setSuggestions(suggestionsData || []);\n      } catch (error) {\n        console.error('Error loading suggestions:', error);\n        // Fallback to empty array on error\n        setSuggestions([]);\n      } finally {\n        setSuggestionsLoading(false);\n      }\n    };\n\n    if (user?.uid) {\n      loadSuggestions();\n    }\n  }, [user?.uid]);\n\n  // Load Education and Experience when profile data is available\n  useEffect(() => {\n    const loadEducationAndExperience = async () => {\n      if (!profileData?.uid) return;\n      \n      if ((profileData as any).userType !== \"business\") {\n        // Load Education\n        setEducationLoading(true);\n        try {\n          const educationData = await userApiService.getUserEducation(profileData.uid);\n          setEducation(educationData || []);\n        } catch (error) {\n          console.error('Error loading education:', error);\n          setEducation([]);\n        } finally {\n          setEducationLoading(false);\n        }\n        \n        // Load Experience\n        setExperienceLoading(true);\n        try {\n          const experienceData = await userApiService.getUserExperience(profileData.uid);\n          setExperience(experienceData || []);\n        } catch (error) {\n          console.error('Error loading experience:', error);\n          setExperience([]);\n        } finally {\n          setExperienceLoading(false);\n        }\n      }\n\n      // Load Skills for all user types\n      try {\n        const userSkillsData = await userApiService.getUserSkills(profileData.uid);\n        \n        // Handle the new API format\n        if (userSkillsData && userSkillsData.skills) {\n          // Store the skill names for display\n          setUserSkills(userSkillsData.skills.map(skill => skill.name));\n        } else {\n          setUserSkills([]);\n        }\n      } catch (error) {\n        console.error('Error loading skills:', error);\n        setUserSkills([]);\n      }\n    };\n    \n    loadEducationAndExperience();\n  }, [profileData?.uid, (profileData as any)?.userType]);\n\n  const handleSendMessage = async () => {\n    if (!profileData || !user) return;\n\n    try {\n      const conversationId = await createConversation(profileData.uid);\n      setLocation(`/chat/${conversationId}`);\n    } catch (error: any) {\n      console.error(\"Error creating conversation:\", error);\n\n      // Handle Firebase permission errors more gracefully\n      if (\n        error.message?.includes(\"permissions\") ||\n        error.message?.includes(\"PERMISSION_DENIED\")\n      ) {\n        toast({\n          title: \"Chat feature not available\",\n          description:\n            \"Chat functionality is being set up. Please try again later.\",\n          variant: \"destructive\",\n        });\n      } else {\n        toast({\n          title: \"Failed to start conversation\",\n          description: \"Please try again later.\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  const handleFollowToggle = async () => {\n    if (!profileData || !user || followLoading) return;\n\n    setFollowLoading(true);\n    try {\n      if (isFollowing) {\n        await userApiService.unfollowUser(profileData.uid);\n        setIsFollowing(false);\n        // Update followerlist locally\n        if (profileData.followerlist && user?.uid) {\n          profileData.followerlist = profileData.followerlist.filter(uid => uid !== user.uid);\n        }\n        toast({\n          title: \"Unfollowed\",\n          description: `You are no longer following ${profileData.firstName} ${profileData.lastName}`,\n        });\n      } else {\n        await userApiService.followUser(profileData.uid);\n        setIsFollowing(true);\n        // Update followerlist locally\n        if (profileData.followerlist && user?.uid) {\n          profileData.followerlist.push(user.uid);\n        } else if (user?.uid) {\n          profileData.followerlist = [user.uid];\n        }\n        toast({\n          title: \"Following\",\n          description: `You are now following ${profileData.firstName} ${profileData.lastName}`,\n        });\n      }\n    } catch (error: any) {\n      console.error(\"Error toggling follow:\", error);\n      toast({\n        title: \"Failed to update follow status\",\n        description: \"Please try again later.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setFollowLoading(false);\n    }\n  };\n\n  const handleShowFollowers = async () => {\n    if (!profileData) return;\n    \n    setShowFollowersModal(true);\n    setFollowersLoading(true);\n    \n    try {\n      const followersList = await userApiService.getUserFollowers(profileData.uid);\n      setFollowers(followersList || []);\n    } catch (error) {\n      console.error('Error fetching followers:', error);\n      toast({\n        title: \"Failed to load followers\",\n        description: \"Please try again later.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setFollowersLoading(false);\n    }\n  };\n\n  const handleShowFollowing = async () => {\n    if (!profileData) return;\n    \n    setShowFollowingModal(true);\n    setFollowingLoading(true);\n    \n    try {\n      const followingList = await userApiService.getUserFollowing(profileData.uid);\n      setFollowing(followingList || []);\n    } catch (error) {\n      console.error('Error fetching following:', error);\n      toast({\n        title: \"Failed to load following\",\n        description: \"Please try again later.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setFollowingLoading(false);\n    }\n  };\n\n  const handleEditFormSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!profileData || !user) return;\n    \n    setEditFormLoading(true);\n    \n    try {\n      const updateData: any = {\n        ...editFormData,\n        company: editFormData.currentCompany,\n        description: editFormData.about,\n      };\n      \n      // Remove empty fields\n      Object.keys(updateData).forEach(key => {\n        if (updateData[key] === \"\") {\n          delete updateData[key];\n        }\n      });\n      \n      const updatedUser = await userApiService.updateUser(profileData.uid, updateData);\n      setProfileData(updatedUser);\n      setShowEditProfileModal(false);\n      \n      toast({\n        title: \"Profile updated\",\n        description: \"Your profile has been successfully updated.\",\n      });\n    } catch (error: any) {\n      console.error(\"Error updating profile:\", error);\n      toast({\n        title: \"Failed to update profile\",\n        description: \"Please try again later.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setEditFormLoading(false);\n    }\n  };\n\n  const handleEditFormChange = (field: string, value: string) => {\n    setEditFormData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  const toggleComments = (postId: string) => {\n    setExpandedComments((prev) => ({\n      ...prev,\n      [postId]: !prev[postId],\n    }));\n  };\n\n  const handleCommentChange = (postId: string, text: string) => {\n    setCommentText((prev) => ({\n      ...prev,\n      [postId]: text,\n    }));\n  };\n\n  const handleSubmitComment = (postId: string) => {\n    console.log(`Comment for post ${postId}:`, commentText[postId]);\n    setCommentText((prev) => ({\n      ...prev,\n      [postId]: \"\",\n    }));\n  };\n\n  if (!match || !username) {\n    return (\n      <div className=\"min-h-screen bg-cmo-bg\">\n        <Header />\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"text-center\">\n            <p className=\"text-cmo-text-secondary\">Invalid profile URL</p>\n          </div>\n        </div>\n        {isMobile && <MobileNavigation />}\n      </div>\n    );\n  }\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-cmo-bg\">\n        <Header />\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"flex items-center justify-center h-64\">\n            <Loader2 className=\"w-8 h-8 animate-spin text-cmo-primary\" />\n          </div>\n        </div>\n        {isMobile && <MobileNavigation />}\n      </div>\n    );\n  }\n\n  if (error || !profileData) {\n    return (\n      <div className=\"min-h-screen bg-cmo-bg\">\n        <Header />\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n          <div className=\"text-center\">\n            <p className=\"text-cmo-text-secondary text-sm mb-2\">\n              {error || \"User not found\"}\n            </p>\n            <Button variant=\"outline\" onClick={() => setLocation(\"/\")}>\n              Go Home\n            </Button>\n          </div>\n        </div>\n        {isMobile && <MobileNavigation />}\n      </div>\n    );\n  }\n\n  const isOwnProfile = user?.uid === profileData.uid;\n  \n\n  return (\n    <div className=\"min-h-screen bg-cmo-bg\">\n      <Header />\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-4\">\n          {/* Mobile-First: Intro Card visible at top on mobile */}\n          <div className=\"lg:hidden mb-4\">\n            <Card className=\"mb-4\">\n              <CardContent className=\"p-4\">\n                <h3 className=\"font-semibold mb-4\">Intro</h3>\n                <div className=\"space-y-3\">\n                  {(profileData as any).userType === \"business\" ? (\n                    <>\n                      {/* Business Profile Info */}\n                      {(profileData as any).businessProfile?.companyName && (\n                        <div className=\"flex items-center gap-3\">\n                          <Building className=\"w-5 h-5 text-cmo-primary\" />\n                          <span className=\"text-sm\">\n                            {(profileData as any).businessProfile.companyName}\n                          </span>\n                        </div>\n                      )}\n                      {(profileData as any).businessProfile?.industry && (\n                        <div className=\"flex items-center gap-3\">\n                          <Briefcase className=\"w-5 h-5 text-cmo-primary\" />\n                          <span className=\"text-sm\">\n                            {(profileData as any).businessProfile.industry}\n                          </span>\n                        </div>\n                      )}\n                      {(profileData as any).businessProfile?.companySize && (\n                        <div className=\"flex items-center gap-3\">\n                          <Users className=\"w-5 h-5 text-cmo-primary\" />\n                          <span className=\"text-sm\">\n                            {(profileData as any).businessProfile.companySize}{\" \"}\n                            employees\n                          </span>\n                        </div>\n                      )}\n                      {(profileData as any).businessProfile?.registrationNumber && (\n                        <div className=\"flex items-center gap-3\">\n                          <FileText className=\"w-5 h-5 text-cmo-primary\" />\n                          <span className=\"text-sm\">\n                            Reg:{\" \"}\n                            {(profileData as any).businessProfile.registrationNumber}\n                          </span>\n                        </div>\n                      )}\n                      {(profileData as any).businessProfile?.website && (\n                        <div className=\"flex items-center gap-3\">\n                          <Globe className=\"w-5 h-5 text-cmo-primary\" />\n                          <a\n                            href={(profileData as any).businessProfile.website}\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                            className=\"text-sm text-cmo-primary hover:underline\"\n                          >\n                            Website\n                          </a>\n                        </div>\n                      )}\n                    </>\n                  ) : (\n                    <>\n                      {/* Personal Profile Info */}\n                      {((profileData as any).title ||\n                        (profileData as any).positionDesignation) && (\n                        <div className=\"flex items-center gap-3\">\n                          <Briefcase className=\"w-5 h-5 text-cmo-primary\" />\n                          <span className=\"text-sm\">\n                            {(profileData as any).title ||\n                              (profileData as any).positionDesignation}\n                          </span>\n                        </div>\n                      )}\n                      {((profileData as any).company || (profileData as any).currentCompany) && (\n                        <div className=\"flex items-center gap-3\">\n                          <Building className=\"w-5 h-5 text-cmo-primary\" />\n                          <span className=\"text-sm\">\n                            {(profileData as any).company || (profileData as any).currentCompany}\n                          </span>\n                        </div>\n                      )}\n                    </>\n                  )}\n\n                  {/* Common Info */}\n                  <div className=\"flex items-center gap-3\">\n                    <Calendar className=\"w-5 h-5 text-cmo-primary\" />\n                    <span className=\"text-sm\">\n                      Joined{\" \"}\n                      {(profileData as any).createdTime\n                        ? new Date(\n                            (profileData as any).createdTime,\n                          ).getFullYear()\n                        : new Date().getFullYear()}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center gap-3\">\n                    <Mail className=\"w-5 h-5 text-cmo-primary\" />\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"h-auto p-0 font-medium hover:text-cmo-primary text-sm\"\n                      onClick={() => setShowContactInfo(!showContactInfo)}\n                    >\n                      {showContactInfo\n                        ? profileData.email\n                        : \"••••••••@gmail.com\"}\n                    </Button>\n                  </div>\n                  {(profileData as any).phoneNumber && (\n                    <div className=\"flex items-center gap-3\">\n                      <Phone className=\"w-5 h-5 text-cmo-primary\" />\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"h-auto p-0 font-medium hover:text-cmo-primary text-sm\"\n                        onClick={() => setShowContactInfo(!showContactInfo)}\n                      >\n                        {showContactInfo\n                          ? (profileData as any).phoneNumber\n                          : \"••••••••••\"}\n                      </Button>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Main Content */}\n          <div className=\"lg:col-span-3\">\n            {/* Banner and Profile Section */}\n            <Card className=\"mb-4 overflow-hidden\">\n              <div\n                className=\"h-32 sm:h-40 bg-gradient-to-r from-blue-500 to-purple-600\"\n                style={{\n                  backgroundImage: profileData.bannerUrl\n                    ? `url(${profileData.bannerUrl})`\n                    : undefined,\n                  backgroundSize: \"cover\",\n                  backgroundPosition: \"center\",\n                }}\n              />\n\n              <CardContent className=\"relative p-3 sm:p-4\">\n                {/* Profile Info Section */}\n                <div className=\"flex flex-col sm:flex-row gap-4 pt-2\">\n                  {/* Avatar */}\n                  <div className=\"flex-shrink-0\">\n                    <Avatar className=\"w-16 h-16 sm:w-20 sm:h-20 -mt-10 sm:-mt-12 border-4 border-white shadow-lg\">\n                      <AvatarImage\n                        src={\n                          profileData.photoUrl || profileData.profilePic || \"\"\n                        }\n                      />\n                      <AvatarFallback className=\"text-sm\">\n                        {profileData.firstName?.charAt(0) || \"U\"}\n                        {profileData.lastName?.charAt(0) || \"\"}\n                      </AvatarFallback>\n                    </Avatar>\n                  </div>\n\n                  {/* Profile Details */}\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex flex-col sm:flex-row sm:items-start sm:justify-between gap-3\">\n                      <div className=\"flex-1 min-w-0\">\n                        <h1 className=\"text-lg font-semibold text-cmo-text-primary truncate\">\n                          {profileData.firstName || \"\"}{\" \"}\n                          {profileData.lastName || \"\"}\n                        </h1>\n                        <p className=\"text-sm sm:text-base text-cmo-text-secondary mb-1\">\n                          {profileData.positionDesignation || \"Professional\"} at{\" \"}\n                          {profileData.currentCompany || \"Company\"}\n                        </p>\n                        {profileData.city && profileData.country && (\n                          <div className=\"flex items-center gap-1 text-xs sm:text-sm text-cmo-text-secondary mb-1\">\n                            <MapPin className=\"w-4 h-4\" />\n                            <span>\n                              {profileData.city}\n                              {profileData.state\n                                ? `, ${typeof profileData.state === \"string\" ? profileData.state : profileData.state.name}`\n                                : \"\"}\n                              ,{\" \"}\n                              {typeof profileData.country === \"string\"\n                                ? profileData.country\n                                : profileData.country.name}\n                            </span>\n                          </div>\n                        )}\n                        <div className=\"flex items-center gap-3 text-xs sm:text-sm text-cmo-text-secondary\">\n                          <button \n                            className=\"flex items-center gap-1 hover:text-cmo-primary transition-colors\"\n                            onClick={handleShowFollowers}\n                          >\n                            <Users className=\"w-4 h-4\" />\n                            {profileData.followersCount || 0} followers\n                          </button>\n                          <button \n                            className=\"hover:text-cmo-primary transition-colors\"\n                            onClick={handleShowFollowing}\n                          >\n                            {profileData.followingCount || 0} following\n                          </button>\n                        </div>\n                      </div>\n\n                      {/* Action Buttons */}\n                      {isOwnProfile && (\n                        <div className=\"flex items-center gap-2 flex-shrink-0\">\n                          <DropdownMenu>\n                            <DropdownMenuTrigger asChild>\n                              <Button variant=\"outline\" size=\"icon\">\n                                <MoreHorizontal className=\"w-4 h-4\" />\n                              </Button>\n                            </DropdownMenuTrigger>\n                            <DropdownMenuContent align=\"end\">\n                              <DropdownMenuItem onClick={() => setShowEditProfileModal(true)}>\n                                <Edit className=\"mr-2 h-4 w-4\" />\n                                <span>Edit Profile</span>\n                              </DropdownMenuItem>\n                            </DropdownMenuContent>\n                          </DropdownMenu>\n                        </div>\n                      )}\n\n                      {!isOwnProfile && (\n                        <div className=\"flex items-center gap-2 flex-shrink-0\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={handleSendMessage}\n                          >\n                            <MessageSquare className=\"w-4 h-4 mr-2\" />\n                            Message\n                          </Button>\n                          <Button\n                            className={\n                              isFollowing\n                                ? \"bg-gray-500 hover:bg-gray-600\"\n                                : \"bg-cmo-primary hover:bg-cmo-primary/90\"\n                            }\n                            onClick={handleFollowToggle}\n                            disabled={followLoading}\n                          >\n                            {followLoading ? (\n                              <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                            ) : isFollowing ? (\n                              <User className=\"w-4 h-4 mr-2\" />\n                            ) : (\n                              <Plus className=\"w-4 h-4 mr-2\" />\n                            )}\n                            {isFollowing ? \"Following\" : \"Follow\"}\n                          </Button>\n\n                          {/* Three Dots Menu */}\n                          <DropdownMenu>\n                            <DropdownMenuTrigger asChild>\n                              <Button variant=\"outline\" size=\"icon\">\n                                <MoreHorizontal className=\"w-4 h-4\" />\n                              </Button>\n                            </DropdownMenuTrigger>\n                            <DropdownMenuContent align=\"end\">\n                              <DropdownMenuItem>\n                                <Flag className=\"mr-2 h-4 w-4\" />\n                                <span>Report</span>\n                              </DropdownMenuItem>\n                              <DropdownMenuItem>\n                                <Share className=\"mr-2 h-4 w-4\" />\n                                <span>Share</span>\n                              </DropdownMenuItem>\n                            </DropdownMenuContent>\n                          </DropdownMenu>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n\n                {/* About Section */}\n                <div className=\"mt-4\">\n                  <h3 className=\"text-sm font-semibold mb-2\">About</h3>\n                  <p className=\"text-sm text-cmo-text-secondary leading-relaxed\">\n                    {profileData.about ||\n                      \"Professional with expertise in the construction and civil engineering industry.\"}\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Projects Section */}\n            <Card className=\"mb-4\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n                    <Building className=\"w-5 h-5 text-cmo-primary\" />\n                    Projects\n                  </h3>\n                </div>\n                <div className=\"space-y-4\">\n                  {((profileData as any).projects || []).length > 0 ? (\n                    ((profileData as any).projects || []).map((project: any, index: number) => (\n                      <div key={project.id || index} className=\"flex gap-3\">\n                        <div className=\"w-10 h-10 bg-gray-100 rounded-lg flex items-center justify-center flex-shrink-0\">\n                          <Building className=\"w-4 h-4 text-cmo-primary\" />\n                        </div>\n                        <div className=\"flex-1\">\n                          <h4 className=\"font-medium text-sm\">{project.title}</h4>\n                          {project.location && (\n                            <p className=\"text-cmo-text-secondary flex items-center gap-1 text-xs\">\n                              <MapPin className=\"w-3 h-3\" />\n                              {project.location}\n                            </p>\n                          )}\n                          <p className=\"text-xs text-cmo-text-secondary mt-2\">{project.description}</p>\n                          {project.tags && project.tags.length > 0 && (\n                            <div className=\"flex flex-wrap gap-2 mt-2\">\n                              {project.tags.map((tag: string, idx: number) => (\n                                <Badge key={idx} variant=\"secondary\" className=\"text-xs px-2 py-0.5\">\n                                  {tag}\n                                </Badge>\n                              ))}\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    ))\n                  ) : (\n                    <p className=\"text-cmo-text-secondary text-center py-8\">No projects added yet</p>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Education Section */}\n            <Card className=\"mb-4\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n                    <GraduationCap className=\"w-6 h-6 text-cmo-primary\" />\n                    Education\n                  </h3>\n                </div>\n                <div className=\"space-y-4\">\n                  {educationLoading ? (\n                    <div className=\"flex justify-center py-8\">\n                      <Loader2 className=\"w-6 h-6 animate-spin\" />\n                    </div>\n                  ) : education && education.length > 0 ? (\n                    education.map((edu) => (\n                      <div key={edu.id} className=\"flex gap-3\">\n                        <div className=\"w-10 h-10 bg-gray-100 rounded-lg flex items-center justify-center flex-shrink-0\">\n                          <GraduationCap className=\"w-5 h-5 text-cmo-primary\" />\n                        </div>\n                        <div className=\"flex-1\">\n                          <h4 className=\"font-semibold text-base\">{edu.degree}</h4>\n                          <p className=\"text-sm text-cmo-primary font-medium\">\n                            {edu.fieldOfStudy}\n                          </p>\n                          <p className=\"text-sm text-cmo-text-secondary\">\n                            {edu.schoolOrCollege}\n                          </p>\n                          <p className=\"text-xs text-cmo-text-secondary mt-1\">\n                            {edu.startDate ? new Date(edu.startDate).getFullYear() : 'N/A'} -{\" \"}\n                            {edu.endDate ? new Date(edu.endDate).getFullYear() : 'Present'}\n                            {edu.grade && ` • ${edu.grade}`}\n                          </p>\n                        </div>\n                      </div>\n                    ))\n                  ) : (\n                    <p className=\"text-cmo-text-secondary text-center py-8\">No education information available</p>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Experience Section */}\n            <Card className=\"mb-4\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n                    <Briefcase className=\"w-5 h-5 text-cmo-primary\" />\n                    Experience\n                  </h3>\n                </div>\n                <div className=\"space-y-4\">\n                  {experienceLoading ? (\n                    <div className=\"flex justify-center py-8\">\n                      <Loader2 className=\"w-6 h-6 animate-spin\" />\n                    </div>\n                  ) : experience && experience.length > 0 ? (\n                    experience.map((exp) => (\n                      <div key={exp.id} className=\"flex gap-3\">\n                        <div className=\"w-10 h-10 bg-gray-100 rounded-lg flex items-center justify-center flex-shrink-0\">\n                          <Briefcase className=\"w-5 h-5 text-cmo-primary\" />\n                        </div>\n                        <div className=\"flex-1\">\n                          <h4 className=\"font-semibold text-base\">{exp.title || exp.role}</h4>\n                          <p className=\"text-sm text-cmo-primary font-medium\">\n                            {exp.companyName || exp.company}\n                          </p>\n                          {exp.location && (\n                            <p className=\"text-xs text-cmo-text-secondary flex items-center gap-1\">\n                              <MapPin className=\"w-3 h-3\" />\n                              {exp.location}\n                            </p>\n                          )}\n                          <p className=\"text-xs text-cmo-text-secondary mt-1\">\n                            {exp.startDate ? new Date(exp.startDate).getFullYear() : 'N/A'} -{\" \"}\n                            {exp.endDate && !exp.isCurrent\n                              ? new Date(exp.endDate).getFullYear()\n                              : \"Present\"}\n                          </p>\n                          {exp.description && (\n                            <p className=\"text-xs text-cmo-text-secondary mt-2\">\n                              {exp.description}\n                            </p>\n                          )}\n                        </div>\n                      </div>\n                    ))\n                  ) : (\n                    <p className=\"text-cmo-text-secondary text-center py-8\">No work experience available</p>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* User Activities */}\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h3 className=\"text-lg font-semibold\">Activities</h3>\n                  <div className=\"flex items-center gap-2\">\n                    <Button variant=\"outline\" size=\"sm\">\n                      <Filter className=\"w-4 h-4 mr-2\" />\n                      Filter\n                    </Button>\n                  </div>\n                </div>\n\n                {/* Activity Filters */}\n                <div className=\"flex flex-wrap gap-2 mb-4\">\n                  {filters.map((filter) => (\n                    <Button\n                      key={filter}\n                      variant={activeFilter === filter ? \"default\" : \"outline\"}\n                      size=\"sm\"\n                      onClick={() => setActiveFilter(filter)}\n                      className={\n                        activeFilter === filter ? \"bg-cmo-primary\" : \"\"\n                      }\n                    >\n                      {filter}\n                    </Button>\n                  ))}\n                </div>\n\n                {/* Activity Feed */}\n                <div className=\"space-y-4\">\n                  {mockActivities.map((activity) => (\n                    <div\n                      key={activity.id}\n                      className=\"border-b border-cmo-border pb-4 last:border-b-0\"\n                    >\n                      <div className=\"flex gap-3\">\n                        <Avatar className=\"w-12 h-12\">\n                          <AvatarImage\n                            src={\n                              profileData.photoUrl ||\n                              profileData.profilePic ||\n                              \"\"\n                            }\n                          />\n                          <AvatarFallback>\n                            {profileData.firstName?.charAt(0) || \"U\"}\n                            {profileData.lastName?.charAt(0) || \"\"}\n                          </AvatarFallback>\n                        </Avatar>\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-start justify-between\">\n                            <div>\n                              <h4 className=\"font-medium text-cmo-text-primary\">\n                                {activity.title}\n                              </h4>\n                              <div className=\"flex items-center gap-2 text-sm text-cmo-text-secondary mt-1\">\n                                <span>\n                                  {profileData.firstName || \"\"}{\" \"}\n                                  {profileData.lastName || \"\"}\n                                </span>\n                                <span>•</span>\n                                <span>{activity.timestamp}</span>\n                                <Badge variant=\"secondary\" className=\"text-xs\">\n                                  {activity.category}\n                                </Badge>\n                              </div>\n                            </div>\n                            <DropdownMenu>\n                              <DropdownMenuTrigger asChild>\n                                <Button variant=\"ghost\" size=\"icon\">\n                                  <MoreHorizontal className=\"w-4 h-4\" />\n                                </Button>\n                              </DropdownMenuTrigger>\n                              <DropdownMenuContent align=\"end\">\n                                <DropdownMenuItem>\n                                  <Flag className=\"mr-2 h-4 w-4\" />\n                                  <span>Report</span>\n                                </DropdownMenuItem>\n                                <DropdownMenuItem>\n                                  <Share className=\"mr-2 h-4 w-4\" />\n                                  <span>Share</span>\n                                </DropdownMenuItem>\n                              </DropdownMenuContent>\n                            </DropdownMenu>\n                          </div>\n                          <p className=\"text-cmo-text-secondary mt-3\">\n                            {activity.content}\n                          </p>\n\n                          {/* Engagement Actions */}\n                          <div className=\"flex items-center gap-6 mt-4\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              className=\"text-cmo-text-secondary hover:text-cmo-primary\"\n                            >\n                              <ThumbsUp className=\"w-4 h-4 mr-1\" />\n                              Thanks {activity.engagement.thanks}\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              className=\"text-cmo-text-secondary hover:text-cmo-primary\"\n                              onClick={() => toggleComments(activity.id)}\n                            >\n                              <MessageSquare className=\"w-4 h-4 mr-1\" />\n                              {activity.engagement.comments} comments\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              className=\"text-cmo-text-secondary hover:text-cmo-primary\"\n                            >\n                              <Star className=\"w-4 h-4 mr-1\" />\n                              Insightful {activity.engagement.insightful}\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              className=\"text-cmo-text-secondary hover:text-cmo-primary\"\n                            >\n                              <Share className=\"w-4 h-4 mr-1\" />\n                              Share\n                            </Button>\n                          </div>\n\n                          {/* Comments Section */}\n                          {expandedComments[activity.id] && (\n                            <div className=\"mt-4 pt-4 border-t border-cmo-border\">\n                              <div className=\"flex gap-3\">\n                                <Avatar className=\"w-8 h-8\">\n                                  <AvatarImage\n                                    src={userProfile?.profilePic || \"\"}\n                                  />\n                                  <AvatarFallback>\n                                    {userProfile?.firstName?.charAt(0) || \"U\"}\n                                    {userProfile?.lastName?.charAt(0) || \"\"}\n                                  </AvatarFallback>\n                                </Avatar>\n                                <div className=\"flex-1\">\n                                  <Textarea\n                                    placeholder=\"Write a comment...\"\n                                    value={commentText[activity.id] || \"\"}\n                                    onChange={(e) =>\n                                      handleCommentChange(\n                                        activity.id,\n                                        e.target.value,\n                                      )\n                                    }\n                                    className=\"min-h-[80px] resize-none\"\n                                  />\n                                  <div className=\"flex justify-end gap-2 mt-2\">\n                                    <Button\n                                      variant=\"outline\"\n                                      size=\"sm\"\n                                      onClick={() =>\n                                        toggleComments(activity.id)\n                                      }\n                                    >\n                                      Cancel\n                                    </Button>\n                                    <Button\n                                      size=\"sm\"\n                                      onClick={() =>\n                                        handleSubmitComment(activity.id)\n                                      }\n                                      disabled={\n                                        !commentText[activity.id]?.trim()\n                                      }\n                                    >\n                                      <Send className=\"w-4 h-4 mr-1\" />\n                                      Comment\n                                    </Button>\n                                  </div>\n                                </div>\n                              </div>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"lg:col-span-1\">\n            {/* Intro - Hidden on mobile since we show it at top */}\n            <Card className=\"mb-4 hidden lg:block\">\n              <CardContent className=\"p-4\">\n                <h3 className=\"font-semibold mb-4\">Intro</h3>\n                <div className=\"space-y-3\">\n                  {(profileData as any).userType === \"business\" ? (\n                    <>\n                      {/* Business Profile Info */}\n                      {(profileData as any).businessProfile?.companyName && (\n                        <div className=\"flex items-center gap-3\">\n                          <Building className=\"w-5 h-5 text-cmo-primary\" />\n                          <span className=\"text-sm\">\n                            {(profileData as any).businessProfile.companyName}\n                          </span>\n                        </div>\n                      )}\n                      {(profileData as any).businessProfile?.industry && (\n                        <div className=\"flex items-center gap-3\">\n                          <Briefcase className=\"w-5 h-5 text-cmo-primary\" />\n                          <span className=\"text-sm\">\n                            {(profileData as any).businessProfile.industry}\n                          </span>\n                        </div>\n                      )}\n                      {(profileData as any).businessProfile?.companySize && (\n                        <div className=\"flex items-center gap-3\">\n                          <Users className=\"w-5 h-5 text-cmo-primary\" />\n                          <span className=\"text-sm\">\n                            {(profileData as any).businessProfile.companySize}{\" \"}\n                            employees\n                          </span>\n                        </div>\n                      )}\n                      {(profileData as any).businessProfile?.registrationNumber && (\n                        <div className=\"flex items-center gap-3\">\n                          <FileText className=\"w-5 h-5 text-cmo-primary\" />\n                          <span className=\"text-sm\">\n                            Reg:{\" \"}\n                            {(profileData as any).businessProfile.registrationNumber}\n                          </span>\n                        </div>\n                      )}\n                      {(profileData as any).businessProfile?.website && (\n                        <div className=\"flex items-center gap-3\">\n                          <Globe className=\"w-5 h-5 text-cmo-primary\" />\n                          <a\n                            href={(profileData as any).businessProfile.website}\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                            className=\"text-sm text-cmo-primary hover:underline\"\n                          >\n                            Website\n                          </a>\n                        </div>\n                      )}\n                    </>\n                  ) : (\n                    <>\n                      {/* Personal Profile Info */}\n                      {((profileData as any).title ||\n                        (profileData as any).positionDesignation) && (\n                        <div className=\"flex items-center gap-3\">\n                          <Briefcase className=\"w-5 h-5 text-cmo-primary\" />\n                          <span className=\"text-sm\">\n                            {(profileData as any).title ||\n                              (profileData as any).positionDesignation}\n                          </span>\n                        </div>\n                      )}\n                      {((profileData as any).company || (profileData as any).currentCompany) && (\n                        <div className=\"flex items-center gap-3\">\n                          <Building className=\"w-5 h-5 text-cmo-primary\" />\n                          <span className=\"text-sm\">\n                            {(profileData as any).company || (profileData as any).currentCompany}\n                          </span>\n                        </div>\n                      )}\n                    </>\n                  )}\n\n                  {/* Common Info */}\n                  <div className=\"flex items-center gap-3\">\n                    <Calendar className=\"w-5 h-5 text-cmo-primary\" />\n                    <span className=\"text-sm\">\n                      Joined{\" \"}\n                      {(profileData as any).createdTime\n                        ? new Date(\n                            (profileData as any).createdTime,\n                          ).getFullYear()\n                        : new Date().getFullYear()}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center gap-3\">\n                    <Mail className=\"w-5 h-5 text-cmo-primary\" />\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"h-auto p-0 font-medium hover:text-cmo-primary text-sm\"\n                      onClick={() => setShowContactInfo(!showContactInfo)}\n                    >\n                      {showContactInfo\n                        ? profileData.email\n                        : \"••••••••@gmail.com\"}\n                    </Button>\n                  </div>\n                  {(profileData as any).phoneNumber && (\n                    <div className=\"flex items-center gap-3\">\n                      <Phone className=\"w-5 h-5 text-cmo-primary\" />\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"h-auto p-0 font-medium hover:text-cmo-primary text-sm\"\n                        onClick={() => setShowContactInfo(!showContactInfo)}\n                      >\n                        {showContactInfo\n                          ? (profileData as any).phoneNumber\n                          : \"••••••••••\"}\n                      </Button>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Skills Expertise Section - Only for Personal Profiles */}\n            {(profileData as any).userType !== \"business\" && (\n              <Card className=\"mb-4\">\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <h3 className=\"font-semibold\">Skills Expertise</h3>\n                  </div>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {userSkills.length > 0 ? (\n                      userSkills.map((skillName: string, index: number) => (\n                        <Badge key={index} variant=\"secondary\" className=\"bg-cmo-primary/10 text-cmo-primary\">\n                          {skillName}\n                        </Badge>\n                      ))\n                    ) : (\n                      <p className=\"text-cmo-text-secondary text-sm\">No skills added yet</p>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Languages Known */}\n            <Card className=\"mb-4\">\n              <CardContent className=\"p-4\">\n                <h3 className=\"font-semibold mb-4\">Languages Known</h3>\n                <div className=\"flex flex-wrap gap-2\">\n                  {((profileData as any).languages || []).map((lang: string) => (\n                    <Badge key={lang} variant=\"outline\">\n                      {lang}\n                    </Badge>\n                  ))}\n                  {(!((profileData as any).languages) || ((profileData as any).languages || []).length === 0) && (\n                    <p className=\"text-cmo-text-secondary text-sm\">No languages specified</p>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Suggested for You */}\n            <Card className=\"mb-4\">\n              <CardContent className=\"p-4\">\n                <h3 className=\"font-semibold mb-4 text-sm\">Suggested for You</h3>\n                <div className=\"space-y-3\">\n                  {suggestionsLoading ? (\n                    // Loading state\n                    <div className=\"flex items-center justify-center py-4\">\n                      <Loader2 className=\"w-4 h-4 animate-spin\" />\n                      <span className=\"text-sm text-cmo-text-secondary ml-2\">Loading suggestions...</span>\n                    </div>\n                  ) : suggestions.length > 0 ? (\n                    suggestions.map((person) => (\n                      <div key={person.uid} className=\"flex items-center gap-3\">\n                        <div \n                          className=\"flex items-center gap-3 flex-1 cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-800 rounded-lg p-1 transition-colors\"\n                          onClick={() => {\n                            const userIdentifier = person.username && person.username.trim() !== '' ? person.username : person.uid;\n                            window.open(`/u/${userIdentifier}`, '_blank');\n                          }}\n                        >\n                          <Avatar className=\"w-10 h-10\">\n                            <AvatarImage src={person.photoUrl || person.profilePic} />\n                            <AvatarFallback className=\"text-xs\">\n                              {(person.firstName?.[0] || '') + (person.lastName?.[0] || '')}\n                            </AvatarFallback>\n                          </Avatar>\n                          <div className=\"flex-1 min-w-0\">\n                            <p className=\"font-medium text-xs text-cmo-text-primary truncate\">\n                              {person.firstName} {person.lastName}\n                            </p>\n                            <p className=\"text-xs text-cmo-text-secondary truncate\">\n                              {person.title || person.positionDesignation || 'Professional'}\n                            </p>\n                            <p className=\"text-xs text-cmo-text-secondary truncate\">\n                              {person.city || 'Location not specified'}\n                            </p>\n                          </div>\n                        </div>\n                        <Button \n                          size=\"sm\" \n                          className={`text-xs px-3 py-1 h-6 ${\n                            followingStatus[person.uid] \n                              ? 'bg-gray-200 hover:bg-gray-300 text-gray-700 dark:bg-gray-700 dark:hover:bg-gray-600 dark:text-gray-300'\n                              : 'bg-blue-600 hover:bg-blue-700 text-white'\n                          }`}\n                          data-testid=\"button-follow-suggestion\"\n                          disabled={suggestionFollowLoading[person.uid]}\n                          onClick={async (e) => {\n                            e.stopPropagation();\n                            if (suggestionFollowLoading[person.uid]) return;\n                            \n                            setSuggestionFollowLoading(prev => ({ ...prev, [person.uid]: true }));\n                            \n                            try {\n                              if (followingStatus[person.uid]) {\n                                await userApiService.unfollowUser(person.uid);\n                                setFollowingStatus(prev => ({ ...prev, [person.uid]: false }));\n                              } else {\n                                await userApiService.followUser(person.uid);\n                                setFollowingStatus(prev => ({ ...prev, [person.uid]: true }));\n                              }\n                            } catch (error) {\n                              console.error('Error following/unfollowing user:', error);\n                            } finally {\n                              setSuggestionFollowLoading(prev => ({ ...prev, [person.uid]: false }));\n                            }\n                          }}\n                        >\n                          {suggestionFollowLoading[person.uid] ? (\n                            <Loader2 className=\"w-3 h-3 animate-spin\" />\n                          ) : followingStatus[person.uid] ? (\n                            'Following'\n                          ) : (\n                            'Follow'\n                          )}\n                        </Button>\n                      </div>\n                    ))\n                  ) : (\n                    <p className=\"text-sm text-cmo-text-secondary text-center py-4\">\n                      No suggestions available\n                    </p>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Popular Filters */}\n            <Card>\n              <CardContent className=\"p-4\">\n                <h3 className=\"font-semibold mb-4 text-sm\">Popular Filters</h3>\n                <div className=\"space-y-2\">\n                  <Button variant=\"ghost\" className=\"w-full justify-start text-xs h-8\">\n                    Questions & Answers\n                  </Button>\n                  <Button variant=\"ghost\" className=\"w-full justify-start text-xs h-8\">\n                    Articles & Posts\n                  </Button>\n                  <Button variant=\"ghost\" className=\"w-full justify-start text-xs h-8\">\n                    Industry Updates\n                  </Button>\n                  <Button variant=\"ghost\" className=\"w-full justify-start text-xs h-8\">\n                    Job Opportunities\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      {isMobile && <MobileNavigation />}\n\n      {/* Followers Modal */}\n      <Dialog open={showFollowersModal} onOpenChange={setShowFollowersModal}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Followers ({profileData?.followersCount || 0})</DialogTitle>\n          </DialogHeader>\n          <div className=\"max-h-96 overflow-y-auto\">\n            {followersLoading ? (\n              <div className=\"flex items-center justify-center py-8\">\n                <Loader2 className=\"w-6 h-6 animate-spin text-cmo-primary\" />\n              </div>\n            ) : !followers || followers.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <Users className=\"w-12 h-12 text-cmo-text-secondary mx-auto mb-2\" />\n                <p className=\"text-cmo-text-secondary\">No followers yet</p>\n              </div>\n            ) : (\n              <div className=\"space-y-1\">\n                {followers.map((follower) => (\n                  <div\n                    key={follower.uid}\n                    className=\"flex items-center gap-2 p-2 hover:bg-gray-50 dark:hover:bg-gray-800 rounded-lg cursor-pointer transition-colors\"\n                    onClick={() => {\n                      setShowFollowersModal(false);\n                      const userIdentifier = follower.username && follower.username.trim() !== '' ? follower.username : follower.uid;\n                      setLocation(`/u/${userIdentifier}`);\n                    }}\n                  >\n                    <Avatar className=\"w-8 h-8 flex-shrink-0\">\n                      <AvatarImage src={follower.photoUrl || follower.profilePic} />\n                      <AvatarFallback>\n                        {follower.firstName?.charAt(0) || \"U\"}\n                        {follower.lastName?.charAt(0) || \"\"}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div className=\"flex-1 min-w-0\">\n                      <p className=\"font-medium text-sm text-cmo-text-primary truncate\">\n                        {follower.firstName} {follower.lastName}\n                      </p>\n                      {follower.title && (\n                        <p className=\"text-xs text-cmo-text-secondary truncate\">\n                          {follower.title}\n                        </p>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Following Modal */}\n      <Dialog open={showFollowingModal} onOpenChange={setShowFollowingModal}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Following ({profileData?.followingCount || 0})</DialogTitle>\n          </DialogHeader>\n          <div className=\"max-h-96 overflow-y-auto\">\n            {followingLoading ? (\n              <div className=\"flex items-center justify-center py-8\">\n                <Loader2 className=\"w-6 h-6 animate-spin text-cmo-primary\" />\n              </div>\n            ) : !following || following.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <Users className=\"w-12 h-12 text-cmo-text-secondary mx-auto mb-2\" />\n                <p className=\"text-cmo-text-secondary\">Not following anyone yet</p>\n              </div>\n            ) : (\n              <div className=\"space-y-1\">\n                {following.map((followedUser) => (\n                  <div\n                    key={followedUser.uid}\n                    className=\"flex items-center gap-2 p-2 hover:bg-gray-50 dark:hover:bg-gray-800 rounded-lg cursor-pointer transition-colors\"\n                    onClick={() => {\n                      setShowFollowingModal(false);\n                      const userIdentifier = followedUser.username && followedUser.username.trim() !== '' ? followedUser.username : followedUser.uid;\n                      setLocation(`/u/${userIdentifier}`);\n                    }}\n                  >\n                    <Avatar className=\"w-8 h-8 flex-shrink-0\">\n                      <AvatarImage src={followedUser.photoUrl || followedUser.profilePic} />\n                      <AvatarFallback>\n                        {followedUser.firstName?.charAt(0) || \"U\"}\n                        {followedUser.lastName?.charAt(0) || \"\"}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div className=\"flex-1 min-w-0\">\n                      <p className=\"font-medium text-sm text-cmo-text-primary truncate\">\n                        {followedUser.firstName} {followedUser.lastName}\n                      </p>\n                      {followedUser.title && (\n                        <p className=\"text-xs text-cmo-text-secondary truncate\">\n                          {followedUser.title}\n                        </p>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Edit Profile Modal */}\n      <Dialog open={showEditProfileModal} onOpenChange={setShowEditProfileModal}>\n        <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Edit Profile</DialogTitle>\n          </DialogHeader>\n          <form onSubmit={handleEditFormSubmit} className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"firstName\">First Name</Label>\n                <Input\n                  id=\"firstName\"\n                  value={editFormData.firstName}\n                  onChange={(e) => handleEditFormChange(\"firstName\", e.target.value)}\n                  placeholder=\"Enter first name\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"lastName\">Last Name</Label>\n                <Input\n                  id=\"lastName\"\n                  value={editFormData.lastName}\n                  onChange={(e) => handleEditFormChange(\"lastName\", e.target.value)}\n                  placeholder=\"Enter last name\"\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"title\">Title</Label>\n              <Input\n                id=\"title\"\n                value={editFormData.title}\n                onChange={(e) => handleEditFormChange(\"title\", e.target.value)}\n                placeholder=\"Enter your title\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"positionDesignation\">Position/Designation</Label>\n              <Input\n                id=\"positionDesignation\"\n                value={editFormData.positionDesignation}\n                onChange={(e) => handleEditFormChange(\"positionDesignation\", e.target.value)}\n                placeholder=\"Enter your position or designation\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"currentCompany\">Current Company</Label>\n              <Input\n                id=\"currentCompany\"\n                value={editFormData.currentCompany}\n                onChange={(e) => handleEditFormChange(\"currentCompany\", e.target.value)}\n                placeholder=\"Enter your current company\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"about\">About</Label>\n              <Textarea\n                id=\"about\"\n                value={editFormData.about}\n                onChange={(e) => handleEditFormChange(\"about\", e.target.value)}\n                placeholder=\"Tell us about yourself\"\n                rows={3}\n              />\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"gender\">Gender</Label>\n                <Select value={editFormData.gender} onValueChange={(value) => handleEditFormChange(\"gender\", value)}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select gender\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"male\">Male</SelectItem>\n                    <SelectItem value=\"female\">Female</SelectItem>\n                    <SelectItem value=\"other\">Other</SelectItem>\n                    <SelectItem value=\"prefer-not-to-say\">Prefer not to say</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"dateOfBirth\">Date of Birth</Label>\n                <Input\n                  id=\"dateOfBirth\"\n                  type=\"date\"\n                  value={editFormData.dateOfBirth}\n                  onChange={(e) => handleEditFormChange(\"dateOfBirth\", e.target.value)}\n                />\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"city\">City</Label>\n                <Input\n                  id=\"city\"\n                  value={editFormData.city}\n                  onChange={(e) => handleEditFormChange(\"city\", e.target.value)}\n                  placeholder=\"Enter your city\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"state\">State</Label>\n                <Input\n                  id=\"state\"\n                  value={editFormData.state}\n                  onChange={(e) => handleEditFormChange(\"state\", e.target.value)}\n                  placeholder=\"Enter your state\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"country\">Country</Label>\n                <Input\n                  id=\"country\"\n                  value={editFormData.country}\n                  onChange={(e) => handleEditFormChange(\"country\", e.target.value)}\n                  placeholder=\"Enter your country\"\n                />\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"userType\">User Type</Label>\n                <Select value={editFormData.userType} onValueChange={(value) => handleEditFormChange(\"userType\", value)}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select user type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"personal\">Personal</SelectItem>\n                    <SelectItem value=\"business\">Business</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"organizationName\">Organization Name</Label>\n                <Input\n                  id=\"organizationName\"\n                  value={editFormData.organizationName}\n                  onChange={(e) => handleEditFormChange(\"organizationName\", e.target.value)}\n                  placeholder=\"Enter organization name\"\n                />\n              </div>\n            </div>\n\n            <div className=\"flex justify-end space-x-2 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setShowEditProfileModal(false)}\n                disabled={editFormLoading}\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={editFormLoading}\n              >\n                {editFormLoading ? (\n                  <>\n                    <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                    Updating...\n                  </>\n                ) : (\n                  \"Update Profile\"\n                )}\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":72330},"DEPLOYMENT.md":{"content":"# Deployment Guide\n\nThis application is designed to be deployed to any domain without code changes. All API endpoints are configurable via environment variables.\n\n## Quick Deployment Steps\n\n1. **Build the application**:\n   ```bash\n   npm run build\n   ```\n\n2. **Deploy the `dist` folder** to your hosting platform\n\n3. **Configure environment variables** (optional):\n   - Set `VITE_API_BASE_URL` if your backend API is on a different domain\n   - Set `VITE_GEO_API_BASE_URL` if your geo API is on a different domain\n   - Set Firebase environment variables: `VITE_FIREBASE_API_KEY`, `VITE_FIREBASE_PROJECT_ID`, `VITE_FIREBASE_APP_ID`\n\n## Environment Variables\n\n### Required for Firebase\n- `VITE_FIREBASE_API_KEY`: Your Firebase API key\n- `VITE_FIREBASE_PROJECT_ID`: Your Firebase project ID  \n- `VITE_FIREBASE_APP_ID`: Your Firebase app ID\n\n### Optional API Configuration\n- `VITE_API_BASE_URL`: Backend API base URL (defaults to current domain origin)\n- `VITE_GEO_API_BASE_URL`: Geo API base URL (defaults to current domain origin)\n\n## Direct API Calls (SIMPLIFIED)\n\nThe application now calls external APIs directly, eliminating deployment complexity:\n\n### Geo Location APIs\n- Countries, states, and cities data: `https://geo-api-230500065838.asia-south1.run.app`\n- No backend proxy needed - frontend calls APIs directly\n- Works on any deployment domain without configuration\n\n### User APIs  \n- User authentication and profile data uses configurable base URL\n- Defaults to current domain origin if not configured\n- Set `VITE_API_BASE_URL` for external user APIs\n\n## Deployment Examples\n\n### 1. Self-contained deployment (APIs on same domain)\nNo environment variables needed. Just deploy the `dist` folder.\n\n### 2. External APIs\nSet environment variables:\n```env\nVITE_API_BASE_URL=https://your-backend-api.com\nVITE_GEO_API_BASE_URL=https://your-geo-api.com\n```\n\n### 3. Mixed setup\n```env\nVITE_API_BASE_URL=https://external-api.com\n# GEO API will default to current domain\n```\n\n## Troubleshooting\n\n### Issue: API calls return 404/500 errors\n**Solution**: Check if your backend APIs are deployed and accessible. The app now defaults to calling APIs on the same domain.\n\n### Issue: CORS errors\n**Solution**: Ensure your backend APIs have proper CORS configuration for your domain.\n\n### Issue: Firebase authentication not working  \n**Solution**: Verify Firebase environment variables are set correctly and Firebase project allows your domain.\n\n## Previous Issues (Now Fixed)\n✅ **Hardcoded API URLs** - All external URLs now configurable via environment variables  \n✅ **Smart API Detection** - App automatically detects backend availability and chooses appropriate endpoints  \n✅ **Deployment Portability** - Works on any domain without code changes  \n✅ **Zero Configuration** - Frontend-only deployments work out of the box\n\n## Files Changed\n- `client/src/lib/firebase.ts` - Now uses `VITE_API_BASE_URL` or current domain  \n- `client/src/lib/userApi.ts` - Now uses `VITE_API_BASE_URL` or current domain  \n- `client/src/pages/basic-info.tsx` - Now calls geo APIs directly\n- `client/src/pages/profile.tsx` - Now calls geo APIs directly\n- Removed complex API detection logic - **simple direct calls work better**","size_bytes":3207},"TROUBLESHOOTING.md":{"content":"# Local Development Troubleshooting Guide\n\n## Firebase Configuration Issues\n\n### Important: Replit vs Local Development\n**Key Difference**: Replit uses \"Secrets\" (environment variables set in the platform), while local development uses `.env` files. The debugging you saw was from the Replit environment, not your local setup.\n\n### 1. Environment Variables Not Loading\n**Problem**: Your .env changes aren't reflecting, or you're getting \"invalid key\" errors.\n\n**Common Causes & Solutions**:\n\n#### A. File Location\n- **Issue**: .env file in wrong location\n- **Solution**: Ensure your `.env` file is in the **project root** (same level as package.json)\n\n#### B. Environment Variable Naming\n- **Required Variables**: All must start with `VITE_` prefix for Vite to expose them to the frontend:\n```bash\nVITE_FIREBASE_API_KEY=your_actual_api_key_here\nVITE_FIREBASE_PROJECT_ID=your_project_id_here  \nVITE_FIREBASE_APP_ID=your_app_id_here\nVITE_API_BASE_URL=https://cp-backend-service-test-972540571952.asia-south1.run.app\n```\n\n#### C. Server Restart Required\n- **Issue**: Changes not reflecting after updating .env\n- **Solution**: \n  1. Stop the dev server (Ctrl+C)\n  2. Run `npm run dev` again\n  3. Vite must be restarted to pick up new environment variables\n\n#### D. Vite Environment Variable Loading\n- **Critical**: Vite only loads .env files from the project root during startup\n- **Check**: Make sure you're running `npm run dev` from the same directory as your .env file\n- **Verify**: Add `console.log('ENV CHECK:', import.meta.env.VITE_FIREBASE_API_KEY)` temporarily to see if variables load\n\n#### D. Common Firebase Configuration Mistakes\n1. **Missing quotes**: Don't wrap values in quotes in .env file\n   ```bash\n   # Wrong:\n   VITE_FIREBASE_API_KEY=\"your_key_here\"\n   \n   # Correct:\n   VITE_FIREBASE_API_KEY=your_key_here\n   ```\n\n2. **Wrong Firebase project settings**:\n   - authDomain should be: `your-project-id.firebaseapp.com`\n   - storageBucket should be: `your-project-id.firebasestorage.app` (note the .app extension)\n\n3. **API Key restrictions**: Check if your Firebase API key has domain restrictions that block localhost\n\n### 2. Build vs Development Issues\n\n#### For Development (npm run dev):\n- Uses Vite dev server\n- Hot reloading enabled\n- Environment variables loaded from .env\n\n#### For Production Build (npm run build):\n- Environment variables must be set during build time\n- Check if you're testing the built version vs dev version\n\n### 3. Firebase Project Configuration\n\n#### Verify Your Firebase Settings:\n1. Go to Firebase Console → Project Settings → General\n2. Copy the exact values:\n   - **API Key**: Found in \"Web API Key\"\n   - **Project ID**: Your project identifier (not display name)\n   - **App ID**: From your web app configuration\n\n#### Enable Required Services:\n1. **Authentication**: Firebase Console → Authentication → Sign-in method\n   - Enable Email/Password\n   - Enable Google (if using)\n2. **Firestore**: Firebase Console → Firestore Database\n3. **Storage**: Firebase Console → Storage\n\n### 4. Debugging Steps\n\n#### Step 1: Verify Environment Variables\nAdd this temporary debugging code to `client/src/lib/firebase.ts` (remove after testing):\n\n```javascript\n// Add at the top after imports\nconsole.log('Firebase Config Debug:');\nconsole.log('API Key:', import.meta.env.VITE_FIREBASE_API_KEY ? 'Set' : 'Missing');\nconsole.log('Project ID:', import.meta.env.VITE_FIREBASE_PROJECT_ID);\nconsole.log('App ID:', import.meta.env.VITE_FIREBASE_APP_ID ? 'Set' : 'Missing');\n```\n\n#### Step 2: Check Network Tab\n1. Open browser dev tools → Network tab\n2. Try to sign in/sign up\n3. Look for failed requests to Firebase APIs\n4. Check the exact error messages\n\n#### Step 3: Console Errors\n1. Open browser dev tools → Console tab\n2. Look for specific Firebase error messages\n3. Common errors:\n   - \"Firebase: Error (auth/api-key-not-valid)\"\n   - \"Firebase: Error (auth/invalid-api-key)\"\n   - \"Firebase: Error (auth/project-not-found)\"\n\n### 5. Complete Local Setup Checklist\n\n- [ ] `.env` file in project root directory\n- [ ] All required `VITE_` prefixed environment variables set\n- [ ] No quotes around values in .env file\n- [ ] Firebase project has Authentication enabled\n- [ ] Firebase API key allows localhost domain\n- [ ] Dev server restarted after .env changes\n- [ ] Browser hard refresh (Ctrl+Shift+R) after changes\n\n### 6. Example Working .env File\n\n```bash\n# Firebase Configuration (get these from Firebase Console → Project Settings)\nVITE_FIREBASE_API_KEY=AIzaSyD6Gy9bFZ8H3K4L2M5N7P8Q0R2S4T6U8V0\nVITE_FIREBASE_PROJECT_ID=your-project-id\nVITE_FIREBASE_APP_ID=1:123456789012:web:abcdef123456789012345\n\n# API Configuration  \nVITE_API_BASE_URL=https://cp-backend-service-test-972540571952.asia-south1.run.app\n```\n\n### 7. If Still Not Working\n\n1. **Create a fresh .env file** - copy the example above and replace with your actual values\n2. **Verify Firebase Console settings** - double-check all values match exactly\n3. **Try incognito mode** - rules out browser caching issues\n4. **Check Firebase quota** - ensure you haven't exceeded free tier limits\n5. **Restart your entire development environment** - close all terminals, restart IDE\n\nThis should resolve most local development Firebase configuration issues.","size_bytes":5259},"client/src/pages/jobs.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Search, MapPin, Clock, Briefcase, Bookmark, Plus, ToggleLeft, ToggleRight, Eye, Users, Calendar } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Badge } from '@/components/ui/badge';\nimport { Separator } from '@/components/ui/separator';\nimport Layout from '@/components/layout/layout';\n\ninterface Job {\n  jobId: string;\n  title: string;\n  company: string;\n  postedBy: string;\n  description: string;\n  location: string;\n  type: 'full-time' | 'part-time' | 'contract' | 'freelance';\n  salaryRange: string;\n  skills: string[];\n  experience: string;\n  industry: string;\n  postedAt: string;\n  deadline: string;\n  qualifications: string;\n  numberOfVacancies: number;\n  // Additional fields for job details\n  isOwner?: boolean;\n  alreadyApplied?: boolean;\n  applicationId?: string;\n  applicationStatus?: 'applied' | 'shortlisted' | 'rejected' | 'hired';\n  totalViews?: number;\n  totalApplications?: number;\n}\n\nconst JobsPage = () => {\n  const [jobs, setJobs] = useState<Job[]>([]);\n  const [filteredJobs, setFilteredJobs] = useState<Job[]>([]);\n  const [selectedJob, setSelectedJob] = useState<Job | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [openToWork, setOpenToWork] = useState(false);\n  \n  // Search and filter states\n  const [searchTerm, setSearchTerm] = useState('');\n  const [locationFilter, setLocationFilter] = useState('');\n  const [typeFilter, setTypeFilter] = useState('');\n\n  // Sample data - replace with API call\n  useEffect(() => {\n    const sampleJobs: Job[] = [\n      {\n        jobId: \"abc123def456\",\n        title: \"Senior Civil Engineer\",\n        company: \"BuildSmart Pvt Ltd\",\n        postedBy: \"userUID123\",\n        description: \"We are looking for an experienced civil engineer to lead major construction projects. The ideal candidate will have strong project management skills and expertise in structural design.\",\n        location: \"Chennai\",\n        type: \"full-time\",\n        salaryRange: \"₹8L - ₹12L\",\n        skills: [\"AutoCAD\", \"Site Management\", \"Project Management\", \"Structural Design\"],\n        experience: \"5+ years\",\n        industry: \"Construction\",\n        postedAt: \"2025-01-28T08:00:00Z\",\n        deadline: \"2025-02-28T00:00:00Z\",\n        qualifications: \"B.E/B.Tech in Civil Engineering\",\n        numberOfVacancies: 2,\n        isOwner: false,\n        alreadyApplied: false,\n        applicationStatus: 'applied',\n        totalViews: 14,\n        totalApplications: 5\n      },\n      {\n        jobId: \"xyz789abc123\",\n        title: \"Construction Project Manager\",\n        company: \"Metro Infrastructure\",\n        postedBy: \"userUID456\",\n        description: \"Leading construction company seeks experienced project manager for high-rise residential projects. Must have expertise in planning, scheduling, and team coordination.\",\n        location: \"Bangalore\",\n        type: \"full-time\",\n        salaryRange: \"₹12L - ₹18L\",\n        skills: [\"Project Management\", \"MS Project\", \"Team Leadership\", \"Budget Management\"],\n        experience: \"7+ years\",\n        industry: \"Construction\",\n        postedAt: \"2025-01-27T10:30:00Z\",\n        deadline: \"2025-03-15T00:00:00Z\",\n        qualifications: \"B.E/B.Tech with PMP certification preferred\",\n        numberOfVacancies: 1,\n        isOwner: false,\n        alreadyApplied: true,\n        applicationId: \"app789xyz321\",\n        applicationStatus: 'applied',\n        totalViews: 28,\n        totalApplications: 12\n      },\n      {\n        jobId: \"def456ghi789\",\n        title: \"Structural Design Engineer\",\n        company: \"TechBuild Solutions\",\n        postedBy: \"userUID789\",\n        description: \"Join our dynamic team as a structural design engineer. Work on innovative projects including commercial buildings, bridges, and infrastructure development.\",\n        location: \"Chennai\",\n        type: \"full-time\",\n        salaryRange: \"₹6L - ₹10L\",\n        skills: [\"STAAD Pro\", \"AutoCAD\", \"Structural Analysis\", \"Design Codes\"],\n        experience: \"3+ years\",\n        industry: \"Construction\",\n        postedAt: \"2025-01-26T14:15:00Z\",\n        deadline: \"2025-02-20T00:00:00Z\",\n        qualifications: \"B.E/B.Tech in Civil/Structural Engineering\",\n        numberOfVacancies: 3,\n        isOwner: false,\n        alreadyApplied: false,\n        totalViews: 42,\n        totalApplications: 18\n      }\n    ];\n    \n    setJobs(sampleJobs);\n    setFilteredJobs(sampleJobs);\n    setLoading(false);\n  }, []);\n\n  // Filter jobs based on search criteria\n  useEffect(() => {\n    let filtered = jobs;\n\n    if (searchTerm) {\n      filtered = filtered.filter(job => \n        job.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        job.skills.some(skill => skill.toLowerCase().includes(searchTerm.toLowerCase())) ||\n        job.company.toLowerCase().includes(searchTerm.toLowerCase())\n      );\n    }\n\n    if (locationFilter) {\n      filtered = filtered.filter(job => \n        job.location.toLowerCase().includes(locationFilter.toLowerCase())\n      );\n    }\n\n    if (typeFilter) {\n      filtered = filtered.filter(job => job.type === typeFilter);\n    }\n\n    setFilteredJobs(filtered);\n  }, [jobs, searchTerm, locationFilter, typeFilter]);\n\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    const now = new Date();\n    const diffTime = Math.abs(now.getTime() - date.getTime());\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    \n    if (diffDays === 1) return '1 day ago';\n    if (diffDays < 7) return `${diffDays} days ago`;\n    if (diffDays < 30) return `${Math.floor(diffDays / 7)} weeks ago`;\n    return `${Math.floor(diffDays / 30)} months ago`;\n  };\n\n  const getJobTypeColor = (type: string) => {\n    switch (type) {\n      case 'full-time': return 'bg-green-100 text-green-700 border-green-200';\n      case 'part-time': return 'bg-blue-100 text-blue-700 border-blue-200';\n      case 'contract': return 'bg-purple-100 text-purple-700 border-purple-200';\n      case 'freelance': return 'bg-orange-100 text-orange-700 border-orange-200';\n      default: return 'bg-gray-100 text-gray-700 border-gray-200';\n    }\n  };\n\n  const handleApplyJob = (jobId: string) => {\n    // Implement apply job logic\n    console.log('Apply to job:', jobId);\n  };\n\n  const handleSaveJob = (jobId: string) => {\n    // Implement save job logic\n    console.log('Save job:', jobId);\n  };\n\n  if (loading) {\n    return (\n      <Layout>\n        <div className=\"flex items-center justify-center min-h-screen\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-cmo-primary mx-auto\"></div>\n            <p className=\"mt-4 text-cmo-text-secondary\">Loading jobs...</p>\n          </div>\n        </div>\n      </Layout>\n    );\n  }\n\n  return (\n    <Layout>\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n        <div className=\"flex gap-6\">\n          {/* Left Sidebar */}\n          <div className=\"w-64 flex-shrink-0\">\n            <div className=\"bg-white rounded-lg border border-cmo-border p-4 mb-4\">\n              <h2 className=\"text-lg font-semibold text-cmo-text-primary mb-4\">Job Actions</h2>\n              <div className=\"space-y-3\">\n                <Button \n                  className=\"w-full justify-start\" \n                  variant=\"default\"\n                  data-testid=\"button-post-job\"\n                >\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Post a Job\n                </Button>\n                <Button \n                  className=\"w-full justify-start\" \n                  variant=\"outline\"\n                  data-testid=\"button-saved-jobs\"\n                >\n                  <Bookmark className=\"w-4 h-4 mr-2\" />\n                  Saved Jobs\n                </Button>\n                <Button \n                  className=\"w-full justify-start\" \n                  variant=\"outline\"\n                  data-testid=\"button-my-applications\"\n                >\n                  <Briefcase className=\"w-4 h-4 mr-2\" />\n                  My Applications\n                </Button>\n                <Button \n                  className=\"w-full justify-start\" \n                  variant=\"outline\"\n                  data-testid=\"button-dashboard\"\n                >\n                  <Eye className=\"w-4 h-4 mr-2\" />\n                  Dashboard\n                </Button>\n              </div>\n            </div>\n\n            {/* Open to Work Toggle */}\n            <div className=\"bg-white rounded-lg border border-cmo-border p-4\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm font-medium text-cmo-text-primary\">Open to Work</span>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setOpenToWork(!openToWork)}\n                  className=\"p-0 h-6 w-10\"\n                  data-testid=\"toggle-open-to-work\"\n                >\n                  {openToWork ? (\n                    <ToggleRight className=\"h-6 w-6 text-green-600\" />\n                  ) : (\n                    <ToggleLeft className=\"h-6 w-6 text-gray-400\" />\n                  )}\n                </Button>\n              </div>\n              <p className=\"text-xs text-cmo-text-secondary mt-1\">\n                Let recruiters know you're looking for opportunities\n              </p>\n            </div>\n          </div>\n\n          {/* Main Content */}\n          <div className=\"flex-1\">\n            {/* Search and Filters */}\n            <div className=\"bg-white rounded-lg border border-cmo-border p-4 mb-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                <div className=\"md:col-span-2\">\n                  <div className=\"relative\">\n                    <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-cmo-text-secondary w-4 h-4\" />\n                    <Input\n                      placeholder=\"Job title, skills, company...\"\n                      value={searchTerm}\n                      onChange={(e) => setSearchTerm(e.target.value)}\n                      className=\"pl-10\"\n                      data-testid=\"input-job-search\"\n                    />\n                  </div>\n                </div>\n                <div>\n                  <div className=\"relative\">\n                    <MapPin className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-cmo-text-secondary w-4 h-4\" />\n                    <Input\n                      placeholder=\"Location (e.g. Chennai)\"\n                      value={locationFilter}\n                      onChange={(e) => setLocationFilter(e.target.value)}\n                      className=\"pl-10\"\n                      data-testid=\"input-location-filter\"\n                    />\n                  </div>\n                </div>\n                <div>\n                  <Select value={typeFilter} onValueChange={setTypeFilter}>\n                    <SelectTrigger data-testid=\"select-job-type\">\n                      <SelectValue placeholder=\"Job Type\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"\">All Types</SelectItem>\n                      <SelectItem value=\"full-time\">Full Time</SelectItem>\n                      <SelectItem value=\"part-time\">Part Time</SelectItem>\n                      <SelectItem value=\"contract\">Contract</SelectItem>\n                      <SelectItem value=\"freelance\">Freelance</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n            </div>\n\n            {/* Job Results Header */}\n            <div className=\"mb-4\">\n              <h1 className=\"text-xl font-semibold text-cmo-text-primary\">\n                {filteredJobs.length} Job{filteredJobs.length !== 1 ? 's' : ''} Found\n              </h1>\n              <p className=\"text-sm text-cmo-text-secondary\">\n                Showing results for construction industry professionals\n              </p>\n            </div>\n\n            {/* Jobs List */}\n            <div className=\"space-y-4\">\n              {filteredJobs.map((job) => (\n                <div \n                  key={job.jobId}\n                  className=\"bg-white rounded-lg border border-cmo-border p-4 hover:border-cmo-primary transition-colors cursor-pointer\"\n                  onClick={() => setSelectedJob(job)}\n                  data-testid={`card-job-${job.jobId}`}\n                >\n                  <div className=\"flex justify-between items-start mb-3\">\n                    <div className=\"flex-1\">\n                      <h3 className=\"text-lg font-semibold text-cmo-text-primary mb-1\">\n                        {job.title}\n                      </h3>\n                      <p className=\"text-cmo-text-secondary font-medium\">\n                        {job.company}\n                      </p>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          handleSaveJob(job.jobId);\n                        }}\n                        data-testid={`button-save-${job.jobId}`}\n                      >\n                        <Bookmark className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </div>\n\n                  <div className=\"flex flex-wrap items-center gap-4 mb-3 text-sm text-cmo-text-secondary\">\n                    <div className=\"flex items-center\">\n                      <MapPin className=\"w-4 h-4 mr-1\" />\n                      {job.location}\n                    </div>\n                    <div className=\"flex items-center\">\n                      <Clock className=\"w-4 h-4 mr-1\" />\n                      {job.experience}\n                    </div>\n                    <div className=\"flex items-center\">\n                      <Calendar className=\"w-4 h-4 mr-1\" />\n                      {formatDate(job.postedAt)}\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center justify-between mb-3\">\n                    <Badge \n                      variant=\"outline\" \n                      className={getJobTypeColor(job.type)}\n                    >\n                      {job.type.replace('-', ' ').toUpperCase()}\n                    </Badge>\n                    <span className=\"text-lg font-semibold text-cmo-primary\">\n                      {job.salaryRange}\n                    </span>\n                  </div>\n\n                  <p className=\"text-cmo-text-secondary text-sm mb-3 line-clamp-2\">\n                    {job.description}\n                  </p>\n\n                  <div className=\"flex flex-wrap gap-1 mb-3\">\n                    {job.skills.slice(0, 4).map((skill) => (\n                      <Badge key={skill} variant=\"secondary\" className=\"text-xs\">\n                        {skill}\n                      </Badge>\n                    ))}\n                    {job.skills.length > 4 && (\n                      <Badge variant=\"secondary\" className=\"text-xs\">\n                        +{job.skills.length - 4} more\n                      </Badge>\n                    )}\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-4 text-xs text-cmo-text-secondary\">\n                      <div className=\"flex items-center\">\n                        <Eye className=\"w-3 h-3 mr-1\" />\n                        {job.totalViews} views\n                      </div>\n                      <div className=\"flex items-center\">\n                        <Users className=\"w-3 h-3 mr-1\" />\n                        {job.totalApplications} applications\n                      </div>\n                    </div>\n                    {job.alreadyApplied ? (\n                      <Badge variant=\"outline\" className=\"text-green-700 border-green-200\">\n                        Applied\n                      </Badge>\n                    ) : (\n                      <Button\n                        size=\"sm\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          handleApplyJob(job.jobId);\n                        }}\n                        data-testid={`button-apply-${job.jobId}`}\n                      >\n                        Apply Now\n                      </Button>\n                    )}\n                  </div>\n                </div>\n              ))}\n            </div>\n\n            {filteredJobs.length === 0 && (\n              <div className=\"text-center py-12\">\n                <Briefcase className=\"w-16 h-16 text-cmo-text-secondary mx-auto mb-4\" />\n                <h3 className=\"text-lg font-semibold text-cmo-text-primary mb-2\">\n                  No Jobs Found\n                </h3>\n                <p className=\"text-cmo-text-secondary\">\n                  Try adjusting your search criteria or filters\n                </p>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Job Detail Modal */}\n      <Dialog open={!!selectedJob} onOpenChange={() => setSelectedJob(null)}>\n        <DialogContent className=\"max-w-3xl max-h-[90vh] overflow-y-auto\">\n          {selectedJob && (\n            <>\n              <DialogHeader>\n                <DialogTitle className=\"text-xl font-semibold\">\n                  {selectedJob.title}\n                </DialogTitle>\n              </DialogHeader>\n              \n              <div className=\"space-y-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-cmo-text-primary\">\n                      {selectedJob.company}\n                    </h3>\n                    <div className=\"flex items-center text-cmo-text-secondary text-sm mt-1\">\n                      <MapPin className=\"w-4 h-4 mr-1\" />\n                      {selectedJob.location}\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"text-xl font-bold text-cmo-primary\">\n                      {selectedJob.salaryRange}\n                    </div>\n                    <Badge className={getJobTypeColor(selectedJob.type)}>\n                      {selectedJob.type.replace('-', ' ').toUpperCase()}\n                    </Badge>\n                  </div>\n                </div>\n\n                <Separator />\n\n                <div className=\"grid grid-cols-2 gap-6\">\n                  <div>\n                    <h4 className=\"font-semibold text-cmo-text-primary mb-2\">Experience Required</h4>\n                    <p className=\"text-cmo-text-secondary\">{selectedJob.experience}</p>\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold text-cmo-text-primary mb-2\">Qualifications</h4>\n                    <p className=\"text-cmo-text-secondary\">{selectedJob.qualifications}</p>\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold text-cmo-text-primary mb-2\">Vacancies</h4>\n                    <p className=\"text-cmo-text-secondary\">{selectedJob.numberOfVacancies} position{selectedJob.numberOfVacancies > 1 ? 's' : ''}</p>\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold text-cmo-text-primary mb-2\">Application Deadline</h4>\n                    <p className=\"text-cmo-text-secondary\">\n                      {new Date(selectedJob.deadline).toLocaleDateString('en-IN')}\n                    </p>\n                  </div>\n                </div>\n\n                <div>\n                  <h4 className=\"font-semibold text-cmo-text-primary mb-2\">Required Skills</h4>\n                  <div className=\"flex flex-wrap gap-1\">\n                    {selectedJob.skills.map((skill) => (\n                      <Badge key={skill} variant=\"secondary\">\n                        {skill}\n                      </Badge>\n                    ))}\n                  </div>\n                </div>\n\n                <div>\n                  <h4 className=\"font-semibold text-cmo-text-primary mb-2\">Job Description</h4>\n                  <p className=\"text-cmo-text-secondary leading-relaxed\">\n                    {selectedJob.description}\n                  </p>\n                </div>\n\n                <div className=\"flex items-center justify-between bg-gray-50 p-4 rounded-lg\">\n                  <div className=\"flex space-x-4 text-sm text-cmo-text-secondary\">\n                    <div className=\"flex items-center\">\n                      <Eye className=\"w-4 h-4 mr-1\" />\n                      {selectedJob.totalViews} views\n                    </div>\n                    <div className=\"flex items-center\">\n                      <Users className=\"w-4 h-4 mr-1\" />\n                      {selectedJob.totalApplications} applications\n                    </div>\n                    <div className=\"flex items-center\">\n                      <Calendar className=\"w-4 h-4 mr-1\" />\n                      Posted {formatDate(selectedJob.postedAt)}\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"flex space-x-3\">\n                  {selectedJob.alreadyApplied ? (\n                    <Button disabled className=\"flex-1\">\n                      Already Applied\n                    </Button>\n                  ) : (\n                    <Button \n                      className=\"flex-1\"\n                      onClick={() => handleApplyJob(selectedJob.jobId)}\n                      data-testid=\"button-apply-modal\"\n                    >\n                      Apply for this Job\n                    </Button>\n                  )}\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => handleSaveJob(selectedJob.jobId)}\n                    data-testid=\"button-save-modal\"\n                  >\n                    <Bookmark className=\"w-4 h-4 mr-2\" />\n                    Save Job\n                  </Button>\n                </div>\n              </div>\n            </>\n          )}\n        </DialogContent>\n      </Dialog>\n    </Layout>\n  );\n};\n\nexport default JobsPage;","size_bytes":22670}},"version":1}